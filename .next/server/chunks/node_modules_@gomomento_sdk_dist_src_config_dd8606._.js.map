{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/retry/no-retry-strategy.ts"],"sourcesContent":["import {\n  DeterminewhenToRetryRequestProps,\n  RetryStrategy,\n} from './retry-strategy';\nimport {MomentoLoggerFactory, MomentoLogger} from '../../';\n\nexport interface NoRetryStrategyProps {\n  loggerFactory: MomentoLoggerFactory;\n}\n\nexport class NoRetryStrategy implements RetryStrategy {\n  private readonly logger: MomentoLogger;\n\n  constructor(props: NoRetryStrategyProps) {\n    this.logger = props.loggerFactory.getLogger(this);\n  }\n\n  determineWhenToRetryRequest(\n    props: DeterminewhenToRetryRequestProps\n  ): number | null {\n    this.logger.debug(\n      `Using no-retry strategy, therefore not retrying request; status code: ${props.grpcStatus.code}, request type: ${props.grpcRequest.path}, attemptNumber: ${props.attemptNumber}`\n    );\n    // null means do not retry\n    return null;\n  }\n}\n"],"names":[],"mappings":";;;;;AAUA,MAAa;IAGX,YAAY,KAA2B,CAAA;QACrC,IAAI,CAAC,MAAM,GAAG,MAAM,aAAa,CAAC,SAAS,CAAC,IAAI;IAClD;IAEA,4BACE,KAAuC,EAAA;QAEvC,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,CAAA,sEAAA,EAAyE,MAAM,UAAU,CAAC,IAAI,CAAA,gBAAA,EAAmB,MAAM,WAAW,CAAC,IAAI,CAAA,iBAAA,EAAoB,MAAM,aAAa,CAAA,CAAE;QAElL,0BAA0B;QAC1B,OAAO;IACT;;AAfF,QAAA,eAAA,GAAA"}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/middleware/cache-request-logging.ts"],"sourcesContent":["import {cache} from '@gomomento/generated-types';\nimport {SetBatchItem} from '@gomomento/sdk-core';\n\nconst TEXT_DECODER = new TextDecoder();\n\n// TODO: bytes will not always be convertible to string\nfunction convertBytesToString(bytes: Uint8Array) {\n  return TEXT_DECODER.decode(bytes);\n}\n\nexport function convertSingleKeyRequest(\n  requestType: string,\n  key: Uint8Array\n): RequestSingleKeyLog {\n  return {\n    requestType: requestType,\n    key: convertBytesToString(key),\n  };\n}\n\nexport interface RequestLog {\n  requestType: string;\n}\n\ninterface WriteRequestLog extends RequestLog {\n  ttlMillis: number;\n}\n\ninterface CollectionWriteRequestLog extends WriteRequestLog {\n  refreshTtl: boolean;\n}\n\n// Current used for GetBatch and KeysExist requests\ninterface RequestMultipleKeysLog extends RequestLog {\n  keys: string[];\n}\n\n// Currently used for Get, Delete, ItemGetTtl, and ItemGetType requests\ninterface RequestSingleKeyLog extends RequestLog {\n  key: string;\n}\n\ninterface RequestToLogInterfaceConverterFn<TRequest, TLog extends RequestLog> {\n  (request: TRequest): TLog;\n}\n\nconst convertGetRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._GetRequest,\n  RequestSingleKeyLog\n> = (request: cache.cache_client._GetRequest) => {\n  return convertSingleKeyRequest('get', request.cache_key);\n};\n\nconst convertGetBatchRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._GetBatchRequest,\n  RequestMultipleKeysLog\n> = (request: cache.cache_client._GetBatchRequest) => {\n  return {\n    requestType: 'getBatch',\n    keys: request.items.map(item => convertBytesToString(item.cache_key)),\n  };\n};\n\nconst convertDeleteRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._DeleteRequest,\n  RequestSingleKeyLog\n> = (request: cache.cache_client._DeleteRequest) => {\n  return convertSingleKeyRequest('delete', request.cache_key);\n};\n\ninterface SetRequestLog extends WriteRequestLog {\n  key: string;\n  value: string;\n}\n\nconst convertSetRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SetRequest,\n  SetRequestLog\n> = (request: cache.cache_client._SetRequest) => {\n  return {\n    requestType: 'set',\n    key: convertBytesToString(request.cache_key),\n    value: convertBytesToString(request.cache_body),\n    ttlMillis: request.ttl_milliseconds,\n  };\n};\n\ninterface SetBatchRequestLog extends RequestLog {\n  items: SetBatchItem[];\n}\n\nconst convertSetBatchRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SetBatchRequest,\n  SetBatchRequestLog\n> = (request: cache.cache_client._SetBatchRequest) => {\n  return {\n    requestType: 'setBatch',\n    items: request.items.map(item => {\n      return {\n        key: convertBytesToString(item.cache_key),\n        value: convertBytesToString(item.cache_body),\n        ttlMillis: item.ttl_milliseconds,\n      };\n    }),\n  };\n};\n\ninterface SetIfRequestLog extends WriteRequestLog {\n  key: string;\n  value: string;\n  condition: string;\n  present: boolean;\n  presentAndNotEqual: string | undefined;\n  absent: boolean;\n  equal: string | undefined;\n  absentOrEqual: string | undefined;\n  notEqual: string | undefined;\n}\n\nconst convertSetIfRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SetIfRequest,\n  SetIfRequestLog\n> = (request: cache.cache_client._SetIfRequest) => {\n  return {\n    requestType: 'setIf',\n    key: convertBytesToString(request.cache_key),\n    value: convertBytesToString(request.cache_body),\n    ttlMillis: request.ttl_milliseconds,\n    condition: request.condition,\n    present: request.present !== undefined,\n    presentAndNotEqual: request.present_and_not_equal\n      ? convertBytesToString(request.present_and_not_equal.value_to_check)\n      : undefined,\n    absent: request.absent !== undefined,\n    equal: request.equal\n      ? convertBytesToString(request.equal.value_to_check)\n      : undefined,\n    absentOrEqual: request.absent_or_equal\n      ? convertBytesToString(request.absent_or_equal.value_to_check)\n      : undefined,\n    notEqual: request.not_equal\n      ? convertBytesToString(request.not_equal.value_to_check)\n      : undefined,\n  };\n};\n\nconst convertSetIfNotExistsRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SetIfNotExistsRequest,\n  SetRequestLog\n> = (request: cache.cache_client._SetIfNotExistsRequest) => {\n  return {\n    requestType: 'setIfNotExists',\n    key: convertBytesToString(request.cache_key),\n    value: convertBytesToString(request.cache_body),\n    ttlMillis: request.ttl_milliseconds,\n  };\n};\n\nconst convertKeysExistRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._KeysExistRequest,\n  RequestMultipleKeysLog\n> = (request: cache.cache_client._KeysExistRequest) => {\n  return {\n    requestType: 'keysExist',\n    keys: request.cache_keys.map(key => convertBytesToString(key)),\n  };\n};\n\ninterface IncrementRequestLog extends WriteRequestLog {\n  key: string;\n  amount: number;\n}\n\nconst convertIncrementRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._IncrementRequest,\n  IncrementRequestLog\n> = (request: cache.cache_client._IncrementRequest) => {\n  return {\n    requestType: 'increment',\n    key: convertBytesToString(request.cache_key),\n    amount: request.amount,\n    ttlMillis: request.ttl_milliseconds,\n  };\n};\n\ninterface UpdateTtlRequestLog extends RequestLog {\n  key: string;\n  increaseToMillis: number;\n  decreaseToMillis: number;\n  overwriteToMillis: number;\n}\n\nconst convertUpdateTtlRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._UpdateTtlRequest,\n  UpdateTtlRequestLog\n> = (request: cache.cache_client._UpdateTtlRequest) => {\n  return {\n    requestType: 'updateTtl',\n    key: convertBytesToString(request.cache_key),\n    increaseToMillis: request.increase_to_milliseconds,\n    decreaseToMillis: request.decrease_to_milliseconds,\n    overwriteToMillis: request.overwrite_to_milliseconds,\n  };\n};\n\nconst convertItemGetTtlRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ItemGetTtlRequest,\n  RequestSingleKeyLog\n> = (request: cache.cache_client._ItemGetTtlRequest) => {\n  return convertSingleKeyRequest('itemGetTtl', request.cache_key);\n};\n\nconst convertItemGetTypeRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ItemGetTypeRequest,\n  RequestSingleKeyLog\n> = (request: cache.cache_client._ItemGetTypeRequest) => {\n  return convertSingleKeyRequest('itemGetType', request.cache_key);\n};\n\ninterface DictionaryRequestLog extends RequestLog {\n  dictionaryName: string;\n}\n\ninterface DictionaryGetRequestLog extends DictionaryRequestLog {\n  fields: string[];\n}\n\nconst convertDictionaryGetRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._DictionaryGetRequest,\n  DictionaryGetRequestLog\n> = (request: cache.cache_client._DictionaryGetRequest) => {\n  return {\n    requestType: 'dictionaryGet',\n    dictionaryName: convertBytesToString(request.dictionary_name),\n    fields: request.fields.map(field => convertBytesToString(field)),\n  };\n};\n\nconst convertDictionaryFetchRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._DictionaryFetchRequest,\n  DictionaryRequestLog\n> = (request: cache.cache_client._DictionaryFetchRequest) => {\n  return {\n    requestType: 'dictionaryFetch',\n    dictionaryName: convertBytesToString(request.dictionary_name),\n  };\n};\n\ninterface DictionarySetRequestLog\n  extends DictionaryRequestLog,\n    CollectionWriteRequestLog {\n  items: {field: string; value: string}[];\n}\n\nconst convertDictionarySetRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._DictionarySetRequest,\n  DictionarySetRequestLog\n> = (request: cache.cache_client._DictionarySetRequest) => {\n  return {\n    requestType: 'dictionarySet',\n    dictionaryName: convertBytesToString(request.dictionary_name),\n    ttlMillis: request.ttl_milliseconds,\n    refreshTtl: request.refresh_ttl,\n    items: request.items.map(item => {\n      return {\n        field: convertBytesToString(item.field),\n        value: convertBytesToString(item.value),\n      };\n    }),\n  };\n};\n\ninterface DictionaryIncrementRequestLog\n  extends DictionaryRequestLog,\n    CollectionWriteRequestLog {\n  field: string;\n  amount: number;\n}\n\nconst convertDictionaryIncrementRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._DictionaryIncrementRequest,\n  DictionaryIncrementRequestLog\n> = (request: cache.cache_client._DictionaryIncrementRequest) => {\n  return {\n    requestType: 'dictionaryIncrement',\n    dictionaryName: convertBytesToString(request.dictionary_name),\n    field: convertBytesToString(request.field),\n    amount: request.amount,\n    ttlMillis: request.ttl_milliseconds,\n    refreshTtl: request.refresh_ttl,\n  };\n};\n\ninterface DictionaryDeleteRequestLog extends DictionaryRequestLog {\n  fields: string[];\n}\n\nconst convertDictionaryDeleteRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._DictionaryDeleteRequest,\n  DictionaryDeleteRequestLog\n> = (request: cache.cache_client._DictionaryDeleteRequest) => {\n  return {\n    requestType: 'dictionaryDelete',\n    dictionaryName: convertBytesToString(request.dictionary_name),\n    fields: request.some.fields.map(field => convertBytesToString(field)),\n  };\n};\n\nconst convertDictionaryLengthRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._DictionaryLengthRequest,\n  DictionaryRequestLog\n> = (request: cache.cache_client._DictionaryLengthRequest) => {\n  return {\n    requestType: 'dictionaryLength',\n    dictionaryName: convertBytesToString(request.dictionary_name),\n  };\n};\n\ninterface SetCollectionRequestLog extends RequestLog {\n  setName: string;\n}\n\nconst convertSetFetchRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SetFetchRequest,\n  SetCollectionRequestLog\n> = (request: cache.cache_client._SetFetchRequest) => {\n  return {\n    requestType: 'setFetch',\n    setName: convertBytesToString(request.set_name),\n  };\n};\n\ninterface SetSampleRequestLog extends SetCollectionRequestLog {\n  limit: number;\n}\n\nconst convertSetSampleRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SetSampleRequest,\n  SetSampleRequestLog\n> = (request: cache.cache_client._SetSampleRequest) => {\n  return {\n    requestType: 'setSample',\n    setName: convertBytesToString(request.set_name),\n    limit: request.limit,\n  };\n};\n\ninterface SetUnionRequestLog\n  extends SetCollectionRequestLog,\n    CollectionWriteRequestLog {\n  elements: string[];\n}\n\nconst convertSetUnionRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SetUnionRequest,\n  SetUnionRequestLog\n> = (request: cache.cache_client._SetUnionRequest) => {\n  return {\n    requestType: 'setUnion',\n    setName: convertBytesToString(request.set_name),\n    ttlMillis: request.ttl_milliseconds,\n    refreshTtl: request.refresh_ttl,\n    elements: request.elements.map(element => convertBytesToString(element)),\n  };\n};\n\ninterface SetDifferenceRequestLog extends SetCollectionRequestLog {\n  action: 'minuend' | 'subtrahend_set' | 'subtrahend_identity';\n  elements?: string[];\n}\n\nconst convertSetDifferenceRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SetDifferenceRequest,\n  SetDifferenceRequestLog\n> = (request: cache.cache_client._SetDifferenceRequest) => {\n  return {\n    requestType: 'setDifference',\n    setName: convertBytesToString(request.set_name),\n    action: request.minuend\n      ? 'minuend'\n      : request.subtrahend.set\n      ? 'subtrahend_set'\n      : 'subtrahend_identity',\n    elements: request.minuend\n      ? request.minuend.elements.map(element => convertBytesToString(element))\n      : request.subtrahend.set\n      ? request.subtrahend.set.elements.map(element =>\n          convertBytesToString(element)\n        )\n      : undefined,\n  };\n};\n\ninterface SetContainsRequestLog extends SetCollectionRequestLog {\n  elements: string[];\n}\n\nconst convertSetContainsRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SetContainsRequest,\n  SetContainsRequestLog\n> = (request: cache.cache_client._SetContainsRequest) => {\n  return {\n    requestType: 'setContains',\n    setName: convertBytesToString(request.set_name),\n    elements: request.elements.map(element => convertBytesToString(element)),\n  };\n};\n\nconst convertSetLengthRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SetLengthRequest,\n  SetCollectionRequestLog\n> = (request: cache.cache_client._SetLengthRequest) => {\n  return {\n    requestType: 'setLength',\n    setName: convertBytesToString(request.set_name),\n  };\n};\n\ninterface SetPopRequestLog extends SetCollectionRequestLog {\n  count: number;\n}\n\nconst convertSetPopRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SetPopRequest,\n  SetPopRequestLog\n> = (request: cache.cache_client._SetPopRequest) => {\n  return {\n    requestType: 'setPop',\n    setName: convertBytesToString(request.set_name),\n    count: request.count,\n  };\n};\n\ninterface ListRequestLog extends RequestLog {\n  listName: string;\n}\n\ninterface ListConcatenateFrontRequestLog\n  extends ListRequestLog,\n    CollectionWriteRequestLog {\n  truncateBackToSize: number;\n  values: string[];\n}\n\nconst convertListConcatenateFrontRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ListConcatenateFrontRequest,\n  ListConcatenateFrontRequestLog\n> = (request: cache.cache_client._ListConcatenateFrontRequest) => {\n  return {\n    requestType: 'listConcatenateFront',\n    listName: convertBytesToString(request.list_name),\n    ttlMillis: request.ttl_milliseconds,\n    refreshTtl: request.refresh_ttl,\n    truncateBackToSize: request.truncate_back_to_size,\n    values: request.values.map(value => convertBytesToString(value)),\n  };\n};\n\ninterface ListConcatenateBackRequestLog\n  extends ListRequestLog,\n    CollectionWriteRequestLog {\n  truncateFrontToSize: number;\n  values: string[];\n}\n\nconst convertListConcatenateBackRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ListConcatenateBackRequest,\n  ListConcatenateBackRequestLog\n> = (request: cache.cache_client._ListConcatenateBackRequest) => {\n  return {\n    requestType: 'listConcatenateBack',\n    listName: convertBytesToString(request.list_name),\n    ttlMillis: request.ttl_milliseconds,\n    refreshTtl: request.refresh_ttl,\n    truncateFrontToSize: request.truncate_front_to_size,\n    values: request.values.map(value => convertBytesToString(value)),\n  };\n};\n\ninterface ListPushFrontRequestLog\n  extends ListRequestLog,\n    CollectionWriteRequestLog {\n  truncateBackToSize: number;\n  value: string;\n}\n\nconst convertListPushFrontRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ListPushFrontRequest,\n  ListPushFrontRequestLog\n> = (request: cache.cache_client._ListPushFrontRequest) => {\n  return {\n    requestType: 'listPushFront',\n    listName: convertBytesToString(request.list_name),\n    ttlMillis: request.ttl_milliseconds,\n    refreshTtl: request.refresh_ttl,\n    truncateBackToSize: request.truncate_back_to_size,\n    value: convertBytesToString(request.value),\n  };\n};\n\ninterface ListPushBackRequestLog\n  extends ListRequestLog,\n    CollectionWriteRequestLog {\n  truncateFrontToSize: number;\n  value: string;\n}\n\nconst convertListPushBackRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ListPushBackRequest,\n  ListPushBackRequestLog\n> = (request: cache.cache_client._ListPushBackRequest) => {\n  return {\n    requestType: 'listPushBack',\n    listName: convertBytesToString(request.list_name),\n    ttlMillis: request.ttl_milliseconds,\n    refreshTtl: request.refresh_ttl,\n    truncateFrontToSize: request.truncate_front_to_size,\n    value: convertBytesToString(request.value),\n  };\n};\n\nconst convertListPopFrontRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ListPopFrontRequest,\n  ListRequestLog\n> = (request: cache.cache_client._ListPopFrontRequest) => {\n  return {\n    requestType: 'listPopFront',\n    listName: convertBytesToString(request.list_name),\n  };\n};\n\nconst convertListPopBackRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ListPopBackRequest,\n  ListRequestLog\n> = (request: cache.cache_client._ListPopBackRequest) => {\n  return {\n    requestType: 'listPopBack',\n    listName: convertBytesToString(request.list_name),\n  };\n};\n\ninterface ListRemoveValueRequestLog extends ListRequestLog {\n  value: string;\n}\n\nconst convertListRemoveRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ListRemoveRequest,\n  ListRemoveValueRequestLog\n> = (request: cache.cache_client._ListRemoveRequest) => {\n  return {\n    requestType: 'listRemove',\n    listName: convertBytesToString(request.list_name),\n    value: convertBytesToString(request.all_elements_with_value),\n  };\n};\n\ninterface ListFetchRequestLog extends ListRequestLog {\n  inclusiveStart: number;\n  exclusiveEnd: number;\n}\n\nconst convertListFetchRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ListFetchRequest,\n  ListFetchRequestLog\n> = (request: cache.cache_client._ListFetchRequest) => {\n  return {\n    requestType: 'listFetch',\n    listName: convertBytesToString(request.list_name),\n    inclusiveStart: request.inclusive_start,\n    exclusiveEnd: request.exclusive_end,\n  };\n};\n\ninterface ListEraseRequestLog extends ListRequestLog {\n  all: boolean;\n  some: {beginIndex: number; count: number}[];\n}\n\nconst convertListEraseRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ListEraseRequest,\n  ListEraseRequestLog\n> = (request: cache.cache_client._ListEraseRequest) => {\n  return {\n    requestType: 'listErase',\n    listName: convertBytesToString(request.list_name),\n    all: request.all !== undefined,\n    some: request.some.ranges.map(range => {\n      return {\n        beginIndex: range.begin_index,\n        count: range.count,\n      };\n    }),\n  };\n};\n\ninterface ListRetainRequestLog\n  extends ListRequestLog,\n    CollectionWriteRequestLog {\n  inclusiveStart: number;\n  exclusiveEnd: number;\n}\n\nconst convertListRetainRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ListRetainRequest,\n  ListRetainRequestLog\n> = (request: cache.cache_client._ListRetainRequest) => {\n  return {\n    requestType: 'listRetain',\n    listName: convertBytesToString(request.list_name),\n    ttlMillis: request.ttl_milliseconds,\n    refreshTtl: request.refresh_ttl,\n    inclusiveStart: request.inclusive_start,\n    exclusiveEnd: request.exclusive_end,\n  };\n};\n\nconst convertListLengthRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._ListLengthRequest,\n  ListRequestLog\n> = (request: cache.cache_client._ListLengthRequest) => {\n  return {\n    requestType: 'listLength',\n    listName: convertBytesToString(request.list_name),\n  };\n};\n\ninterface SortedSetRequestLog extends RequestLog {\n  sortedSetName: string;\n}\n\ninterface SortedSetPutRequestLog\n  extends SortedSetRequestLog,\n    CollectionWriteRequestLog {\n  elements: {value: string; score: number}[];\n}\n\nconst convertSortedSetPutRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SortedSetPutRequest,\n  SortedSetPutRequestLog\n> = (request: cache.cache_client._SortedSetPutRequest) => {\n  return {\n    requestType: 'sortedSetPut',\n    sortedSetName: convertBytesToString(request.set_name),\n    ttlMillis: request.ttl_milliseconds,\n    refreshTtl: request.refresh_ttl,\n    elements: request.elements.map(item => {\n      return {\n        value: convertBytesToString(item.value),\n        score: item.score,\n      };\n    }),\n  };\n};\n\ninterface SortedSetFetchRequestLog extends SortedSetRequestLog {\n  order: 'ascending' | 'descending'; // enum with 0 = ascending, 1 = descending\n  byScore?: {\n    minScore: number | string;\n    minScoreExclusive?: boolean;\n    maxScore: number | string;\n    maxScoreExclusive?: boolean;\n    offset: number;\n    count: number;\n  };\n  byIndex?: {\n    inclusiveStartIndex: number | string;\n    exclusiveEndIndex: number | string;\n  };\n}\n\nconst convertSortedSetFetchRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SortedSetFetchRequest,\n  SortedSetFetchRequestLog\n> = (request: cache.cache_client._SortedSetFetchRequest) => {\n  const byScore = request.by_score\n    ? {\n        minScore: request.by_score.unbounded_min\n          ? 'unbounded'\n          : request.by_score.min_score.score,\n        minScoreExclusive: request.by_score.min_score?.exclusive,\n        maxScore: request.by_score.unbounded_max\n          ? 'unbounded'\n          : request.by_score.max_score.score,\n        maxScoreExclusive: request.by_score.max_score?.exclusive,\n        offset: request.by_score.offset,\n        count: request.by_score.count,\n      }\n    : undefined;\n\n  const byIndex = request.by_index\n    ? {\n        inclusiveStartIndex: request.by_index.unbounded_start\n          ? 'unbounded'\n          : request.by_index.inclusive_start_index,\n        exclusiveEndIndex: request.by_index.unbounded_end\n          ? 'unbounded'\n          : request.by_index.exclusive_end_index,\n      }\n    : undefined;\n\n  return {\n    requestType: 'sortedSetFetch',\n    sortedSetName: convertBytesToString(request.set_name),\n    order:\n      request.order ===\n      cache.cache_client._SortedSetFetchRequest.Order.DESCENDING\n        ? 'descending'\n        : 'ascending',\n    byScore,\n    byIndex,\n  };\n};\n\ninterface SortedSetValuesRequestLog extends SortedSetRequestLog {\n  values: string[];\n}\n\nconst convertSortedSetGetScoreRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SortedSetGetScoreRequest,\n  SortedSetValuesRequestLog\n> = (request: cache.cache_client._SortedSetGetScoreRequest) => {\n  return {\n    requestType: 'sortedSetGetScore',\n    sortedSetName: convertBytesToString(request.set_name),\n    values: request.values.map(value => convertBytesToString(value)),\n  };\n};\n\ninterface SortedSetRemoveRequestLog extends SortedSetRequestLog {\n  values: string[] | 'all';\n}\n\nconst convertSortedSetRemoveRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SortedSetRemoveRequest,\n  SortedSetRemoveRequestLog\n> = (request: cache.cache_client._SortedSetRemoveRequest) => {\n  return {\n    requestType: 'sortedSetRemove',\n    sortedSetName: convertBytesToString(request.set_name),\n    values: request.all\n      ? 'all'\n      : request.some.values.map(value => convertBytesToString(value)),\n  };\n};\n\ninterface SortedSetIncrementRequestLog\n  extends SortedSetRequestLog,\n    CollectionWriteRequestLog {\n  value: string;\n  amount: number;\n}\n\nconst convertSortedSetIncrementRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SortedSetIncrementRequest,\n  SortedSetIncrementRequestLog\n> = (request: cache.cache_client._SortedSetIncrementRequest) => {\n  return {\n    requestType: 'sortedSetIncrement',\n    sortedSetName: convertBytesToString(request.set_name),\n    value: convertBytesToString(request.value),\n    amount: request.amount,\n    ttlMillis: request.ttl_milliseconds,\n    refreshTtl: request.refresh_ttl,\n  };\n};\n\ninterface SortedSetGetRankRequestLog extends SortedSetRequestLog {\n  value: string;\n  order: 'ascending' | 'descending'; // enum with 0 = ascending, 1 = descending\n}\n\nconst convertSortedSetGetRankRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SortedSetGetRankRequest,\n  SortedSetGetRankRequestLog\n> = (request: cache.cache_client._SortedSetGetRankRequest) => {\n  return {\n    requestType: 'sortedSetGetRank',\n    sortedSetName: convertBytesToString(request.set_name),\n    value: convertBytesToString(request.value),\n    order:\n      request.order ===\n      cache.cache_client._SortedSetGetRankRequest.Order.DESCENDING\n        ? 'descending'\n        : 'ascending',\n  };\n};\n\nconst convertSortedSetLengthRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SortedSetLengthRequest,\n  SortedSetRequestLog\n> = (request: cache.cache_client._SortedSetLengthRequest) => {\n  return {\n    requestType: 'sortedSetLength',\n    sortedSetName: convertBytesToString(request.set_name),\n  };\n};\n\ninterface SortedSetLengthByScoreRequestLog extends SortedSetRequestLog {\n  minScore: number | string;\n  minScoreExclusive?: boolean;\n  maxScore: number | string;\n  maxScoreExclusive?: boolean;\n}\n\nconst convertSortedSetLengthByScoreRequest: RequestToLogInterfaceConverterFn<\n  cache.cache_client._SortedSetLengthByScoreRequest,\n  SortedSetLengthByScoreRequestLog\n> = (request: cache.cache_client._SortedSetLengthByScoreRequest) => {\n  return {\n    requestType: 'sortedSetLengthByScore',\n    sortedSetName: convertBytesToString(request.set_name),\n    minScore: request.unbounded_min\n      ? 'unbounded'\n      : request.inclusive_min ?? request.exclusive_min,\n    minScoreExclusive: request.unbounded_min\n      ? undefined\n      : request.has_exclusive_min,\n    maxScore: request.unbounded_max\n      ? 'unbounded'\n      : request.inclusive_max ?? request.exclusive_max,\n    maxScoreExclusive: request.unbounded_max\n      ? undefined\n      : request.has_exclusive_max,\n  };\n};\n\nexport const CacheRequestToLogInterfaceConverter = new Map<\n  string,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  RequestToLogInterfaceConverterFn<any, RequestLog>\n>([\n  ['_GetRequest', convertGetRequest],\n  ['_GetBatchRequest', convertGetBatchRequest],\n  ['_DeleteRequest', convertDeleteRequest],\n  ['_SetRequest', convertSetRequest],\n  ['_SetBatchRequest', convertSetBatchRequest],\n  ['_SetIfRequest', convertSetIfRequest],\n  ['_SetIfNotExistsRequest', convertSetIfNotExistsRequest],\n  ['_KeysExistRequest', convertKeysExistRequest],\n  ['_IncrementRequest', convertIncrementRequest],\n  ['_UpdateTtlRequest', convertUpdateTtlRequest],\n  ['_ItemGetTtlRequest', convertItemGetTtlRequest],\n  ['_ItemGetTypeRequest', convertItemGetTypeRequest],\n  ['_DictionaryGetRequest', convertDictionaryGetRequest],\n  ['_DictionaryFetchRequest', convertDictionaryFetchRequest],\n  ['_DictionarySetRequest', convertDictionarySetRequest],\n  ['_DictionaryIncrementRequest', convertDictionaryIncrementRequest],\n  ['_DictionaryDeleteRequest', convertDictionaryDeleteRequest],\n  ['_DictionaryLengthRequest', convertDictionaryLengthRequest],\n  ['_SetFetchRequest', convertSetFetchRequest],\n  ['_SetSampleRequest', convertSetSampleRequest],\n  ['_SetUnionRequest', convertSetUnionRequest],\n  ['_SetDifferenceRequest', convertSetDifferenceRequest],\n  ['_SetContainsRequest', convertSetContainsRequest],\n  ['_SetLengthRequest', convertSetLengthRequest],\n  ['_SetPopRequest', convertSetPopRequest],\n  ['_ListConcatenateFrontRequest', convertListConcatenateFrontRequest],\n  ['_ListConcatenateBackRequest', convertListConcatenateBackRequest],\n  ['_ListPushFrontRequest', convertListPushFrontRequest],\n  ['_ListPushBackRequest', convertListPushBackRequest],\n  ['_ListPopFrontRequest', convertListPopFrontRequest],\n  ['_ListPopBackRequest', convertListPopBackRequest],\n  ['_ListRemoveRequest', convertListRemoveRequest],\n  ['_ListFetchRequest', convertListFetchRequest],\n  ['_ListEraseRequest', convertListEraseRequest],\n  ['_ListRetainRequest', convertListRetainRequest],\n  ['_ListLengthRequest', convertListLengthRequest],\n  ['_SortedSetPutRequest', convertSortedSetPutRequest],\n  ['_SortedSetFetchRequest', convertSortedSetFetchRequest],\n  ['_SortedSetGetScoreRequest', convertSortedSetGetScoreRequest],\n  ['_SortedSetRemoveRequest', convertSortedSetRemoveRequest],\n  ['_SortedSetIncrementRequest', convertSortedSetIncrementRequest],\n  ['_SortedSetGetRankRequest', convertSortedSetGetRankRequest],\n  ['_SortedSetLengthRequest', convertSortedSetLengthRequest],\n  ['_SortedSetLengthByScoreRequest', convertSortedSetLengthByScoreRequest],\n]);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 585, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 589, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/middleware/middleware.ts"],"sourcesContent":["import {Metadata, StatusObject} from '@grpc/grpc-js';\nimport {Message} from 'google-protobuf';\nimport {\n  RequestLog,\n  CacheRequestToLogInterfaceConverter,\n} from './cache-request-logging';\n\nexport class MiddlewareMetadata {\n  readonly _grpcMetadata: Metadata;\n  constructor(metadata: Metadata) {\n    this._grpcMetadata = metadata;\n  }\n\n  toJsonObject() {\n    return this._grpcMetadata.toJSON();\n  }\n\n  toJsonString(): string {\n    return JSON.stringify(this._grpcMetadata.toJSON());\n  }\n}\nexport class MiddlewareStatus {\n  readonly _grpcStatus: StatusObject;\n  constructor(status: StatusObject) {\n    this._grpcStatus = status;\n  }\n\n  code() {\n    return this._grpcStatus.code;\n  }\n}\n\nexport class MiddlewareMessage {\n  readonly _grpcMessage: Message;\n  constructor(message: Message) {\n    this._grpcMessage = message;\n  }\n\n  messageLength(): number {\n    if (this._grpcMessage !== null && this._grpcMessage !== undefined) {\n      return this._grpcMessage.serializeBinary().length;\n    }\n    return 0;\n  }\n\n  constructorName(): string {\n    return this._grpcMessage.constructor.name;\n  }\n\n  // Note: APIs that use streaming interceptors (e.g. GetBatch and SetBatch)\n  // will not see these debug messages\n  toLogFormat(): RequestLog {\n    const requestToLogConverter = CacheRequestToLogInterfaceConverter.get(\n      this.constructorName()\n    );\n    if (requestToLogConverter === undefined) {\n      console.warn(\n        'Unable to find requestToLogConverter for',\n        this.constructorName()\n      );\n      return {requestType: this.constructorName()};\n    }\n    return requestToLogConverter(this._grpcMessage);\n  }\n}\n\nexport interface MiddlewareRequestHandler {\n  onRequestMetadata(metadata: MiddlewareMetadata): Promise<MiddlewareMetadata>;\n  onRequestBody(request: MiddlewareMessage): Promise<MiddlewareMessage>;\n\n  onResponseMetadata(metadata: MiddlewareMetadata): Promise<MiddlewareMetadata>;\n  onResponseBody(\n    response: MiddlewareMessage | null\n  ): Promise<MiddlewareMessage | null>;\n  onResponseStatus(status: MiddlewareStatus): Promise<MiddlewareStatus>;\n}\n\nexport interface MiddlewareRequestHandlerContext {\n  [key: symbol]: string;\n}\n\n/**\n * The Middleware interface allows the Configuration to provide a higher-order function that wraps all requests.\n * This allows future support for things like client-side metrics or other diagnostics helpers.\n *\n * An optional context can be provided that is essentially a <key, value> map {@link MiddlewareRequestHandlerContext}.\n * The context object is available to each individual invocation of the request handler for the middleware.\n */\nexport interface Middleware {\n  onNewRequest(\n    context?: MiddlewareRequestHandlerContext\n  ): MiddlewareRequestHandler;\n  init?(): void;\n  close?(): void;\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA;AAKA,MAAa;IAEX,YAAY,QAAkB,CAAA;QAC5B,IAAI,CAAC,aAAa,GAAG;IACvB;IAEA,eAAY;QACV,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM;IAClC;IAEA,eAAY;QACV,OAAO,KAAK,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM;IACjD;;AAZF,QAAA,kBAAA,GAAA;AAcA,MAAa;IAEX,YAAY,MAAoB,CAAA;QAC9B,IAAI,CAAC,WAAW,GAAG;IACrB;IAEA,OAAI;QACF,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI;IAC9B;;AARF,QAAA,gBAAA,GAAA;AAWA,MAAa;IAEX,YAAY,OAAgB,CAAA;QAC1B,IAAI,CAAC,YAAY,GAAG;IACtB;IAEA,gBAAa;QACX,IAAI,IAAI,CAAC,YAAY,KAAK,QAAQ,IAAI,CAAC,YAAY,KAAK,WAAW;YACjE,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,GAAG,MAAM;;QAEnD,OAAO;IACT;IAEA,kBAAe;QACb,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI;IAC3C;IAEA,0EAA0E;IAC1E,oCAAoC;IACpC,cAAW;QACT,MAAM,wBAAwB,wBAAA,mCAAmC,CAAC,GAAG,CACnE,IAAI,CAAC,eAAe;QAEtB,IAAI,0BAA0B,WAAW;YACvC,QAAQ,IAAI,CACV,4CACA,IAAI,CAAC,eAAe;YAEtB,OAAO;gBAAC,aAAa,IAAI,CAAC,eAAe;YAAE;;QAE7C,OAAO,sBAAsB,IAAI,CAAC,YAAY;IAChD;;AA/BF,QAAA,iBAAA,GAAA"}},
    {"offset": {"line": 643, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 647, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/transport/cache/grpc-configuration.ts"],"sourcesContent":["export interface GrpcConfigurationProps {\n  /**\n   * number of milliseconds the client is willing to wait for an RPC to complete before it is terminated\n   * with a DeadlineExceeded error.\n   */\n  deadlineMillis: number;\n  /**\n   * the maximum amount of memory, in megabytes, that a session is allowed to consume.  Sessions that consume\n   * more than this amount will return a ResourceExhausted error.\n   */\n  maxSessionMemoryMb: number;\n\n  /**\n   * The number of internal clients a cache client will create to communicate with Momento. More of them allows\n   * more concurrent requests, at the cost of more open connections and the latency of setting up each client.\n   */\n  numClients?: number;\n\n  /**\n   * The maximum number of concurrent requests that can be made to the server.\n   * This limit is independent of the number of internal clients, meaning this limit is the maximum\n   * number of requests that will be made concurrently across all of the internal clients.\n   * If this is not set, it will default to the defaultRequestConcurrencyLimit.\n   */\n  maxConcurrentRequests?: number;\n\n  /**\n   * Indicates if it permissible to send keepalive pings from the client without any outstanding streams.\n   *\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   */\n  keepAlivePermitWithoutCalls?: number;\n\n  /**\n   * After waiting for a duration of this time, if the keepalive ping sender does not receive the ping ack,\n   * it will close the transport.\n   *\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   */\n  keepAliveTimeoutMs?: number;\n\n  /**\n   * After a duration of this time the client/server pings its peer to see if the transport is still alive.\n   *\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   */\n  keepAliveTimeMs?: number;\n\n  /**\n   * The maximum message length the client can send to the server.  If the client attempts to send a message larger than\n   * this size, it will result in a RESOURCE_EXHAUSTED error.\n   */\n  maxSendMessageLength?: number;\n\n  /**\n   * The maximum message length the client can receive from the server.  If the server attempts to send a message larger than\n   * this size, it will result in a RESOURCE_EXHAUSTED error.\n   */\n  maxReceiveMessageLength?: number;\n}\n\n/**\n * Encapsulates gRPC configuration tunables.\n * @export\n * @interface GrpcConfiguration\n */\nexport interface GrpcConfiguration {\n  /**\n   * @returns {number} number of milliseconds the client is willing to wait for an RPC to complete before it is terminated\n   *    with a DeadlineExceeded error.\n   */\n  getDeadlineMillis(): number;\n\n  /**\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   *\n   * @returns {number} 0 or 1, if it is permissible to send a keepalive/ping without any outstanding calls.\n   */\n  getKeepAlivePermitWithoutCalls(): number | undefined;\n\n  /**\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   *\n   * @returns {number} the time to wait for a response from a keepalive or ping.\n   */\n  getKeepAliveTimeoutMS(): number | undefined;\n\n  /**\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   *\n   * @returns {number} the interval at which to send the keepalive or ping.\n   */\n  getKeepAliveTimeMS(): number | undefined;\n\n  /**\n   * Copy constructor for overriding the client-side deadline\n   * @param {number} deadlineMillis\n   * @returns {GrpcConfiguration} a new GrpcConfiguration with the specified client-side deadline\n   */\n  withDeadlineMillis(deadlineMillis: number): GrpcConfiguration;\n\n  /**\n   * @returns {number} the maximum amount of memory, in megabytes, that a session is allowed to consume.  Sessions that consume\n   *    more than this amount will return a ResourceExhausted error.\n   */\n  getMaxSessionMemoryMb(): number;\n\n  /**\n   * Copy constructor for overriding the max session memory\n   * @param {number} maxSessionMemoryMb the desired maximum amount of memory, in megabytes, to allow a client session to consume\n   * @returns {GrpcConfiguration} a new GrpcConfiguration with the specified maximum memory\n   */\n  withMaxSessionMemoryMb(maxSessionMemoryMb: number): GrpcConfiguration;\n\n  /**\n   * The maximum message length the client can send to the server.  If the client attempts to send a message larger than\n   * this size, it will result in a RESOURCE_EXHAUSTED error.\n   */\n  getMaxSendMessageLength(): number | undefined;\n\n  /**\n   * The maximum message length the client can receive from the server.  If the server attempts to send a message larger than\n   * this size, it will result in a RESOURCE_EXHAUSTED error.\n   */\n  getMaxReceiveMessageLength(): number | undefined;\n\n  /**\n   * @returns {number} the number of internal clients a cache client will create to communicate with Momento. More of\n   * them will allow for more concurrent requests.\n   */\n  getNumClients(): number;\n\n  /**\n   * Copy constructor for overriding the number of clients to create\n   * @param {number} numClients the number of internal clients to create\n   * @returns {GrpcConfiguration} a new GrpcConfiguration with the specified number of clients\n   */\n  withNumClients(numClients: number): GrpcConfiguration;\n\n  /**\n   * returns the maximum number of concurrent requests that can be made to the server.\n   */\n  getMaxConcurrentRequests(): number | undefined;\n\n  /**\n   * Copy constructor for overriding the maximum number of concurrent requests\n   * @param {number} maxConcurrentRequests the maximum number of concurrent requests that can be made to the server\n   * @returns {GrpcConfiguration} a new GrpcConfiguration with the specified maximum number of concurrent requests\n   */\n  withMaxConcurrentRequests(maxConcurrentRequests: number): GrpcConfiguration;\n}\n"],"names":[],"mappings":""}},
    {"offset": {"line": 651, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 655, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/transport/cache/transport-strategy.ts"],"sourcesContent":["import {GrpcConfiguration, GrpcConfigurationProps} from './grpc-configuration';\n\nexport interface TransportStrategy {\n  /**\n   * Configures the low-level gRPC settings for the Momento client's communication\n   * with the Momento server.\n   * @returns {GrpcConfiguration}\n   */\n  getGrpcConfig(): GrpcConfiguration;\n\n  /**\n   * Copy constructor for overriding the gRPC configuration\n   * @param {GrpcConfiguration} grpcConfig\n   * @returns {TransportStrategy} a new TransportStrategy with the specified gRPC config.\n   */\n  withGrpcConfig(grpcConfig: GrpcConfiguration): TransportStrategy;\n\n  /**\n   * Copy constructor to update the client-side timeout\n   * @param {number} clientTimeoutMillis\n   * @returns {TransportStrategy} a new TransportStrategy with the specified client timeout\n   */\n  withClientTimeoutMillis(clientTimeoutMillis: number): TransportStrategy;\n\n  /**\n   * The maximum duration for which a connection may remain idle before being replaced.  This\n   * setting can be used to force re-connection of a client if it has been idle for too long.\n   * In environments such as AWS lambda, if the lambda is suspended for too long the connection\n   * may be closed by the load balancer, resulting in an error on the subsequent request.  If\n   * this setting is set to a duration less than the load balancer timeout, we can ensure that\n   * the connection will be refreshed to avoid errors.\n   * @returns {number}\n   */\n  getMaxIdleMillis(): number;\n\n  /**\n   * @returns {number} the interval time in milliseconds for when each cache client should be re-initialized.\n   */\n  getMaxClientAgeMillis(): number | undefined;\n\n  /**\n   * Copy constructor to update the max idle connection timeout.  (See {getMaxIdleMillis}.)\n   * @param {number} maxIdleMillis\n   * @returns {TransportStrategy} a new TransportStrategy with the specified max idle connection timeout.\n   */\n  withMaxIdleMillis(maxIdleMillis: number): TransportStrategy;\n\n  /**\n   * Copy constructor to update the max client age in millis.  (See {getMaxClientAgeMillis}.)\n   * @param {number} maxClientAgeMillis\n   * @returns {TransportStrategy} a new TransportStrategy with the specified max client age.\n   */\n  withMaxClientAgeMillis(maxClientAgeMillis: number): TransportStrategy;\n\n  /**\n   * returns the maximum number of concurrent requests that can be made by the client.\n   */\n  getMaxConcurrentRequests(): number | undefined;\n\n  /**\n   * Copy constructor to update the maximum number of concurrent requests that can be made by the client.\n   * @param {number} maxConcurrentRequests\n   * @returns {TransportStrategy} a new TransportStrategy with the specified concurrent requests limit.\n   */\n  withMaxConcurrentRequests(maxConcurrentRequests: number): TransportStrategy;\n}\n\nexport interface TransportStrategyProps {\n  /**\n   * low-level gRPC settings for communication with the Momento server\n   */\n  grpcConfiguration: GrpcConfiguration;\n  /**\n   * The maximum duration for which a connection may remain idle before being replaced.  This\n   * setting can be used to force re-connection of a client if it has been idle for too long.\n   * In environments such as AWS lambda, if the lambda is suspended for too long the connection\n   * may be closed by the load balancer, resulting in an error on the subsequent request.  If\n   * this setting is set to a duration less than the load balancer timeout, we can ensure that\n   * the connection will be refreshed to avoid errors.\n   * @returns {number}\n   */\n  maxIdleMillis: number;\n\n  /**\n   * Specifies the interval time in milliseconds for when each cache client should be re-initialized.\n   */\n  maxClientAgeMillis?: number;\n}\n\nexport class StaticGrpcConfiguration implements GrpcConfiguration {\n  private readonly deadlineMillis: number;\n  private readonly maxSessionMemoryMb: number;\n  private readonly numClients: number;\n  private readonly maxConcurrentRequests?: number;\n  private readonly keepAlivePermitWithoutCalls?: number;\n  private readonly keepAliveTimeoutMs?: number;\n  private readonly keepAliveTimeMs?: number;\n  private readonly maxSendMessageLength?: number;\n  private readonly maxReceiveMessageLength?: number;\n\n  constructor(props: GrpcConfigurationProps) {\n    this.deadlineMillis = props.deadlineMillis;\n    this.maxSessionMemoryMb = props.maxSessionMemoryMb;\n    if (props.numClients !== undefined && props.numClients !== null) {\n      this.numClients = props.numClients;\n    } else {\n      // This is the previously hardcoded value and a safe default for most environments.\n      this.numClients = 6;\n    }\n    this.maxConcurrentRequests = props.maxConcurrentRequests;\n    this.keepAliveTimeMs = props.keepAliveTimeMs;\n    this.keepAliveTimeoutMs = props.keepAliveTimeoutMs;\n    this.keepAlivePermitWithoutCalls = props.keepAlivePermitWithoutCalls;\n    this.maxSendMessageLength = props.maxSendMessageLength;\n    this.maxReceiveMessageLength = props.maxReceiveMessageLength;\n  }\n\n  getDeadlineMillis(): number {\n    return this.deadlineMillis;\n  }\n\n  getMaxSessionMemoryMb(): number {\n    return this.maxSessionMemoryMb;\n  }\n\n  getKeepAliveTimeoutMS(): number | undefined {\n    return this.keepAliveTimeoutMs;\n  }\n\n  getKeepAliveTimeMS(): number | undefined {\n    return this.keepAliveTimeMs;\n  }\n\n  getKeepAlivePermitWithoutCalls(): number | undefined {\n    return this.keepAlivePermitWithoutCalls;\n  }\n\n  withDeadlineMillis(deadlineMillis: number): StaticGrpcConfiguration {\n    return new StaticGrpcConfiguration({\n      deadlineMillis: deadlineMillis,\n      maxSessionMemoryMb: this.maxSessionMemoryMb,\n      numClients: this.numClients,\n    });\n  }\n\n  withMaxSessionMemoryMb(maxSessionMemoryMb: number): StaticGrpcConfiguration {\n    return new StaticGrpcConfiguration({\n      deadlineMillis: this.deadlineMillis,\n      maxSessionMemoryMb: maxSessionMemoryMb,\n      numClients: this.numClients,\n    });\n  }\n\n  getMaxSendMessageLength(): number | undefined {\n    return this.maxSendMessageLength;\n  }\n\n  getMaxReceiveMessageLength(): number | undefined {\n    return this.maxReceiveMessageLength;\n  }\n\n  getNumClients(): number {\n    return this.numClients;\n  }\n\n  withNumClients(numClients: number): GrpcConfiguration {\n    return new StaticGrpcConfiguration({\n      deadlineMillis: this.deadlineMillis,\n      maxSessionMemoryMb: this.maxSessionMemoryMb,\n      numClients: numClients,\n    });\n  }\n\n  getMaxConcurrentRequests(): number | undefined {\n    return this.maxConcurrentRequests;\n  }\n\n  withMaxConcurrentRequests(maxConcurrentRequests: number): GrpcConfiguration {\n    return new StaticGrpcConfiguration({\n      deadlineMillis: this.deadlineMillis,\n      maxSessionMemoryMb: this.maxSessionMemoryMb,\n      numClients: this.numClients,\n      maxConcurrentRequests: maxConcurrentRequests,\n    });\n  }\n}\n\nexport class StaticTransportStrategy implements TransportStrategy {\n  private readonly grpcConfig: GrpcConfiguration;\n  private readonly maxIdleMillis: number;\n  private readonly maxClientAgeMillis?: number;\n\n  constructor(props: TransportStrategyProps) {\n    this.grpcConfig = props.grpcConfiguration;\n    this.maxIdleMillis = props.maxIdleMillis;\n    this.maxClientAgeMillis = props.maxClientAgeMillis;\n  }\n\n  getGrpcConfig(): GrpcConfiguration {\n    return this.grpcConfig;\n  }\n\n  getMaxClientAgeMillis(): number | undefined {\n    return this.maxClientAgeMillis;\n  }\n\n  withGrpcConfig(grpcConfig: GrpcConfiguration): StaticTransportStrategy {\n    return new StaticTransportStrategy({\n      grpcConfiguration: grpcConfig,\n      maxIdleMillis: this.maxIdleMillis,\n      maxClientAgeMillis: this.maxClientAgeMillis,\n    });\n  }\n\n  getMaxIdleMillis(): number {\n    return this.maxIdleMillis;\n  }\n\n  withMaxIdleMillis(maxIdleMillis: number): TransportStrategy {\n    return new StaticTransportStrategy({\n      grpcConfiguration: this.grpcConfig,\n      maxIdleMillis: maxIdleMillis,\n      maxClientAgeMillis: this.maxClientAgeMillis,\n    });\n  }\n\n  withMaxClientAgeMillis(maxClientAgeMillis: number): TransportStrategy {\n    return new StaticTransportStrategy({\n      grpcConfiguration: this.grpcConfig,\n      maxIdleMillis: this.maxIdleMillis,\n      maxClientAgeMillis: maxClientAgeMillis,\n    });\n  }\n\n  withClientTimeoutMillis(clientTimeout: number): StaticTransportStrategy {\n    return new StaticTransportStrategy({\n      grpcConfiguration: this.grpcConfig.withDeadlineMillis(clientTimeout),\n      maxIdleMillis: this.maxIdleMillis,\n    });\n  }\n\n  getMaxConcurrentRequests(): number | undefined {\n    return this.grpcConfig.getMaxConcurrentRequests();\n  }\n\n  withMaxConcurrentRequests(\n    maxConcurrentRequests: number\n  ): StaticTransportStrategy {\n    return new StaticTransportStrategy({\n      grpcConfiguration: this.grpcConfig.withMaxConcurrentRequests(\n        maxConcurrentRequests\n      ),\n      maxIdleMillis: this.maxIdleMillis,\n    });\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 788, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 792, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/transport/cache/index.ts"],"sourcesContent":["export * from './grpc-configuration';\nexport * from './transport-strategy';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,4JAAA;AACA,4JAAA"}},
    {"offset": {"line": 817, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 821, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/configuration.ts"],"sourcesContent":["import {RetryStrategy} from './retry/retry-strategy';\nimport {Middleware} from './middleware/middleware';\nimport {MomentoLoggerFactory, TransportStrategy} from '../';\nimport {ReadConcern} from '@gomomento/sdk-core';\nimport {CompressionStrategy} from './compression/compression';\n\nexport interface ConfigurationProps {\n  /**\n   * Configures logging verbosity and format\n   */\n  loggerFactory: MomentoLoggerFactory;\n  /**\n   * Configures how and when failed requests will be retried\n   */\n  retryStrategy: RetryStrategy;\n  /**\n   * Configures low-level options for network interactions with the Momento service\n   */\n  transportStrategy: TransportStrategy;\n  /**\n   * Configures middleware functions that will wrap each request\n   */\n  middlewares: Middleware[];\n  /**\n   * Configures whether the client should return a Momento Error object or throw an exception when an error occurs.\n   */\n  throwOnErrors: boolean;\n  /**\n   * Configures the read concern for the client.\n   */\n  readConcern: ReadConcern;\n  /**\n   * Configures compression capabilities for the client.\n   */\n  compression: CompressionStrategy | undefined;\n}\n\n/**\n * Configuration options for Momento CacheClient.\n *\n * @export\n * @interface Configuration\n */\nexport interface Configuration {\n  /**\n   * @returns {MomentoLoggerFactory} the current configuration options for logging verbosity and format\n   */\n  getLoggerFactory(): MomentoLoggerFactory;\n\n  /**\n   * @returns {RetryStrategy} the current configuration options for how and when failed requests will be retried\n   */\n  getRetryStrategy(): RetryStrategy;\n\n  /**\n   * Copy constructor for overriding RetryStrategy\n   * @param {RetryStrategy} retryStrategy\n   * @returns {Configuration} a new Configuration object with the specified RetryStrategy\n   */\n  withRetryStrategy(retryStrategy: RetryStrategy): Configuration;\n\n  /**\n   * @returns {TransportStrategy} the current configuration options for wire interactions with the Momento service\n   */\n  getTransportStrategy(): TransportStrategy;\n\n  /**\n   * Copy constructor for overriding TransportStrategy\n   * @param {TransportStrategy} transportStrategy\n   * @returns {Configuration} a new Configuration object with the specified TransportStrategy\n   */\n  withTransportStrategy(transportStrategy: TransportStrategy): Configuration;\n\n  /**\n   * Shorthand copy constructor for overriding TransportStrategy.GrpcStrategy.NumClients. This will\n   * allow you to control the number of TCP connections that the client will open to the server. Usually\n   * you should stick with the default value from your pre-built configuration, but it can be valuable\n   * to increase this value in order to ensure more evenly distributed load on Momento servers.\n   *\n   * @param {number} numConnections\n   * @returns {Configuration} a new Configuration object with the updated TransportStrategy\n   */\n  withNumConnections(numConnections: number): Configuration;\n\n  /**\n   * @returns {Middleware[]} the middleware functions that will wrap each request\n   */\n  getMiddlewares(): Middleware[];\n\n  /**\n   * Copy constructor for overriding Middlewares\n   * @param {Middleware[]} middlewares\n   * @returns {Configuration} a new Configuration object with the specified Middlewares\n   */\n  withMiddlewares(middlewares: Middleware[]): Configuration;\n\n  /**\n   * Copy constructor that adds a single middleware to the existing middlewares\n   * @param {Middleware} middleware\n   * @returns {Configuration} a new Configuration object with the specified Middleware appended to the list of existing Middlewares\n   */\n  addMiddleware(middleware: Middleware): Configuration;\n\n  /**\n   * Convenience copy constructor that updates the client-side timeout setting in the TransportStrategy\n   * @param {number} clientTimeoutMillis\n   * @returns {Configuration} a new Configuration object with its TransportStrategy updated to use the specified client timeout\n   */\n  withClientTimeoutMillis(clientTimeoutMillis: number): Configuration;\n\n  /**\n   * @returns {boolean} Configures whether the client should return a Momento Error object or throw an exception when an\n   * error occurs. By default, this is set to false, and the client will return a Momento Error object on errors. Set it\n   * to true if you prefer for exceptions to be thrown.\n   */\n  getThrowOnErrors(): boolean;\n\n  /**\n   * Copy constructor for configuring whether the client should return a Momento Error object or throw an exception when an\n   * error occurs. By default, this is set to false, and the client will return a Momento Error object on errors. Set it\n   * to true if you prefer for exceptions to be thrown.\n   * @param {boolean} throwOnErrors\n   * @returns {Configuration} a new Configuration object with the specified throwOnErrors setting\n   */\n  withThrowOnErrors(throwOnErrors: boolean): Configuration;\n\n  /**\n   * @returns {ReadConcern} the current configuration option for read consistency\n   */\n  getReadConcern(): ReadConcern;\n\n  /**\n   * Copy constructor for overriding ReadConcern\n   * @param {ReadConcern} readConcern\n   * @returns {Configuration} a new Configuration object with the specified ReadConcern\n   */\n  withReadConcern(readConcern: ReadConcern): Configuration;\n\n  /**\n   * @returns {ICompression} the current configuration settings for compression\n   */\n  getCompressionStrategy(): CompressionStrategy | undefined;\n\n  /**\n   * Copy constructor for overriding compression settings\n   * @param {ICompression} compression\n   * @returns {Configuration} a new Configuration object with the specified compression settings\n   */\n  withCompressionStrategy(compression: CompressionStrategy): Configuration;\n\n  /**\n   * @returns {boolean} whether the client has a compression strategy configured.\n   */\n  hasCompressionStrategy(): boolean;\n}\n\nexport class CacheConfiguration implements Configuration {\n  private readonly loggerFactory: MomentoLoggerFactory;\n  private readonly retryStrategy: RetryStrategy;\n  private readonly transportStrategy: TransportStrategy;\n  private readonly middlewares: Middleware[];\n  private readonly throwOnErrors: boolean;\n  private readonly readConcern: ReadConcern;\n  private readonly compression: CompressionStrategy | undefined;\n\n  constructor(props: ConfigurationProps) {\n    this.loggerFactory = props.loggerFactory;\n    this.retryStrategy = props.retryStrategy;\n    this.transportStrategy = props.transportStrategy;\n    this.middlewares = props.middlewares;\n    this.throwOnErrors = props.throwOnErrors;\n    this.readConcern = props.readConcern;\n    this.compression = props.compression;\n  }\n\n  getLoggerFactory(): MomentoLoggerFactory {\n    return this.loggerFactory;\n  }\n\n  getRetryStrategy(): RetryStrategy {\n    return this.retryStrategy;\n  }\n\n  withRetryStrategy(retryStrategy: RetryStrategy): Configuration {\n    return new CacheConfiguration({\n      loggerFactory: this.loggerFactory,\n      retryStrategy: retryStrategy,\n      transportStrategy: this.transportStrategy,\n      middlewares: this.middlewares,\n      throwOnErrors: this.throwOnErrors,\n      readConcern: this.readConcern,\n      compression: this.compression,\n    });\n  }\n\n  getTransportStrategy(): TransportStrategy {\n    return this.transportStrategy;\n  }\n\n  withTransportStrategy(transportStrategy: TransportStrategy): Configuration {\n    return new CacheConfiguration({\n      loggerFactory: this.loggerFactory,\n      retryStrategy: this.retryStrategy,\n      transportStrategy: transportStrategy,\n      middlewares: this.middlewares,\n      throwOnErrors: this.throwOnErrors,\n      readConcern: this.readConcern,\n      compression: this.compression,\n    });\n  }\n\n  withNumConnections(numConnections: number): Configuration {\n    return this.withTransportStrategy(\n      this.getTransportStrategy().withGrpcConfig(\n        this.getTransportStrategy()\n          .getGrpcConfig()\n          .withNumClients(numConnections)\n      )\n    );\n  }\n\n  getMiddlewares(): Middleware[] {\n    return this.middlewares;\n  }\n\n  withMiddlewares(middlewares: Middleware[]): Configuration {\n    return new CacheConfiguration({\n      loggerFactory: this.loggerFactory,\n      retryStrategy: this.retryStrategy,\n      transportStrategy: this.transportStrategy,\n      middlewares: middlewares,\n      throwOnErrors: this.throwOnErrors,\n      readConcern: this.readConcern,\n      compression: this.compression,\n    });\n  }\n\n  addMiddleware(middleware: Middleware): Configuration {\n    return new CacheConfiguration({\n      loggerFactory: this.loggerFactory,\n      retryStrategy: this.retryStrategy,\n      transportStrategy: this.transportStrategy,\n      middlewares: [middleware, ...this.middlewares],\n      throwOnErrors: this.throwOnErrors,\n      readConcern: this.readConcern,\n      compression: this.compression,\n    });\n  }\n\n  withClientTimeoutMillis(clientTimeout: number): Configuration {\n    return new CacheConfiguration({\n      loggerFactory: this.loggerFactory,\n      retryStrategy: this.retryStrategy,\n      transportStrategy:\n        this.transportStrategy.withClientTimeoutMillis(clientTimeout),\n      middlewares: this.middlewares,\n      throwOnErrors: this.throwOnErrors,\n      readConcern: this.readConcern,\n      compression: this.compression,\n    });\n  }\n\n  getThrowOnErrors(): boolean {\n    return this.throwOnErrors;\n  }\n\n  withThrowOnErrors(throwOnErrors: boolean): Configuration {\n    return new CacheConfiguration({\n      loggerFactory: this.loggerFactory,\n      retryStrategy: this.retryStrategy,\n      transportStrategy: this.transportStrategy,\n      middlewares: this.middlewares,\n      throwOnErrors: throwOnErrors,\n      readConcern: this.readConcern,\n      compression: this.compression,\n    });\n  }\n\n  getReadConcern(): ReadConcern {\n    return this.readConcern;\n  }\n\n  withReadConcern(readConcern: ReadConcern): Configuration {\n    return new CacheConfiguration({\n      loggerFactory: this.loggerFactory,\n      retryStrategy: this.retryStrategy,\n      transportStrategy: this.transportStrategy,\n      middlewares: this.middlewares,\n      throwOnErrors: this.throwOnErrors,\n      readConcern: readConcern,\n      compression: this.compression,\n    });\n  }\n\n  getCompressionStrategy(): CompressionStrategy | undefined {\n    return this.compression;\n  }\n\n  withCompressionStrategy(\n    compressionStrategy: CompressionStrategy\n  ): Configuration {\n    return new CacheConfiguration({\n      loggerFactory: this.loggerFactory,\n      retryStrategy: this.retryStrategy,\n      transportStrategy: this.transportStrategy,\n      middlewares: this.middlewares,\n      throwOnErrors: this.throwOnErrors,\n      readConcern: this.readConcern,\n      compression: compressionStrategy,\n    });\n  }\n\n  hasCompressionStrategy(): boolean {\n    return this.compression !== undefined;\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 956, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 960, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/retry/default-eligibility-strategy.ts"],"sourcesContent":["import {MomentoLogger, MomentoLoggerFactory} from '../../';\nimport {Status} from '@grpc/grpc-js/build/src/constants';\nimport {\n  EligibilityStrategy,\n  EligibleForRetryProps,\n} from './eligibility-strategy';\n\nconst retryableGrpcStatusCodes: Array<Status> = [\n  // including all the status codes for reference, but\n  // commenting out the ones we don't want to retry on for now.\n\n  // Status.OK,\n  // Status.CANCELLED,\n  // Status.UNKNOWN,\n  // Status.INVALID_ARGUMENT,\n  // Status.DEADLINE_EXCEEDED,\n  // Status.NOT_FOUND,\n  // Status.ALREADY_EXISTS,\n  // Status.PERMISSION_DENIED,\n  // Status.RESOURCE_EXHAUSTED,\n  // Status.FAILED_PRECONDITION,\n  // Status.ABORTED,\n  // Status.OUT_OF_RANGE,\n  // Status.UNIMPLEMENTED,\n  Status.INTERNAL,\n  Status.UNAVAILABLE,\n  // Status.DATA_LOSS,\n  // Status.UNAUTHENTICATED\n];\n\nconst retryableRequestTypes: Array<string> = [\n  '/cache_client.Scs/Set',\n  '/cache_client.Scs/Get',\n  '/cache_client.Scs/Delete',\n  '/cache_client.Scs/DictionarySet',\n  // not idempotent: '/cache_client.Scs/DictionaryIncrement',\n  '/cache_client.Scs/DictionaryGet',\n  '/cache_client.Scs/DictionaryFetch',\n  '/cache_client.Scs/DictionaryDelete',\n  '/cache_client.Scs/SetUnion',\n  '/cache_client.Scs/SetDifference',\n  '/cache_client.Scs/SetFetch',\n  // not idempotent: '/cache_client.Scs/ListPushFront',\n  // not idempotent: '/cache_client.Scs/ListPushBack',\n  // not idempotent: '/cache_client.Scs/ListPopFront',\n  // not idempotent: '/cache_client.Scs/ListPopBack',\n  '/cache_client.Scs/ListFetch',\n  /*\n   *  Warning: in the future, this may not be idempotent\n   *  Currently it supports removing all occurrences of a value.\n   *  In the future, we may also add \"the first/last N occurrences of a value\".\n   *  In the latter case it is not idempotent.\n   */\n  '/cache_client.Scs/ListRemove',\n  '/cache_client.Scs/ListLength',\n  // not idempotent: '/cache_client.Scs/ListConcatenateFront',\n  // not idempotent: '/cache_client.Scs/ListConcatenateBack'\n];\n\nexport class DefaultEligibilityStrategy implements EligibilityStrategy {\n  private readonly logger: MomentoLogger;\n\n  constructor(loggerFactory: MomentoLoggerFactory) {\n    this.logger = loggerFactory.getLogger(this);\n  }\n\n  isEligibleForRetry(props: EligibleForRetryProps): boolean {\n    if (!retryableGrpcStatusCodes.includes(props.grpcStatus.code)) {\n      this.logger.debug(\n        `Response with status code ${props.grpcStatus.code} is not retryable.`\n      );\n      return false;\n    }\n\n    if (!retryableRequestTypes.includes(props.grpcRequest.path)) {\n      this.logger.debug(\n        `Request with type ${props.grpcRequest.path} is not retryable.`\n      );\n      return false;\n    }\n\n    return true;\n  }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA;AAMA,MAAM,2BAA0C;IAC9C,oDAAoD;IACpD,6DAA6D;IAE7D,aAAa;IACb,oBAAoB;IACpB,kBAAkB;IAClB,2BAA2B;IAC3B,4BAA4B;IAC5B,oBAAoB;IACpB,yBAAyB;IACzB,4BAA4B;IAC5B,6BAA6B;IAC7B,8BAA8B;IAC9B,kBAAkB;IAClB,uBAAuB;IACvB,wBAAwB;IACxB,YAAA,MAAM,CAAC,QAAQ;IACf,YAAA,MAAM,CAAC,WAAW;CAGnB;AAED,MAAM,wBAAuC;IAC3C;IACA;IACA;IACA;IACA,2DAA2D;IAC3D;IACA;IACA;IACA;IACA;IACA;IACA,qDAAqD;IACrD,oDAAoD;IACpD,oDAAoD;IACpD,mDAAmD;IACnD;IACA;;;;;QAMA;IACA;CAGD;AAED,MAAa;IAGX,YAAY,aAAmC,CAAA;QAC7C,IAAI,CAAC,MAAM,GAAG,cAAc,SAAS,CAAC,IAAI;IAC5C;IAEA,mBAAmB,KAA4B,EAAA;QAC7C,IAAI,CAAC,yBAAyB,QAAQ,CAAC,MAAM,UAAU,CAAC,IAAI,GAAG;YAC7D,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,CAAA,0BAAA,EAA6B,MAAM,UAAU,CAAC,IAAI,CAAA,kBAAA,CAAoB;YAExE,OAAO;;QAGT,IAAI,CAAC,sBAAsB,QAAQ,CAAC,MAAM,WAAW,CAAC,IAAI,GAAG;YAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,CAAA,kBAAA,EAAqB,MAAM,WAAW,CAAC,IAAI,CAAA,kBAAA,CAAoB;YAEjE,OAAO;;QAGT,OAAO;IACT;;AAvBF,QAAA,0BAAA,GAAA"}},
    {"offset": {"line": 1027, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1031, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/retry/fixed-count-retry-strategy.ts"],"sourcesContent":["import {\n  DeterminewhenToRetryRequestProps,\n  RetryStrategy,\n} from './retry-strategy';\nimport {EligibilityStrategy} from './eligibility-strategy';\nimport {DefaultEligibilityStrategy} from './default-eligibility-strategy';\nimport {MomentoLoggerFactory, MomentoLogger} from '../../';\n\nexport interface FixedCountRetryStrategyProps {\n  loggerFactory: MomentoLoggerFactory;\n  maxAttempts: number;\n  eligibilityStrategy?: EligibilityStrategy;\n}\n\nexport class FixedCountRetryStrategy implements RetryStrategy {\n  private readonly logger: MomentoLogger;\n  private readonly eligibilityStrategy: EligibilityStrategy;\n  private readonly maxAttempts: number;\n\n  constructor(props: FixedCountRetryStrategyProps) {\n    this.logger = props.loggerFactory.getLogger(this);\n    this.eligibilityStrategy =\n      props.eligibilityStrategy ??\n      new DefaultEligibilityStrategy(props.loggerFactory);\n    this.maxAttempts = props.maxAttempts;\n  }\n\n  determineWhenToRetryRequest(\n    props: DeterminewhenToRetryRequestProps\n  ): number | null {\n    this.logger.debug(\n      `Determining whether request is eligible for retry; status code: ${props.grpcStatus.code}, request type: ${props.grpcRequest.path}, attemptNumber: ${props.attemptNumber}, maxAttempts: ${this.maxAttempts}`\n    );\n    if (!this.eligibilityStrategy.isEligibleForRetry(props)) {\n      // null means do not retry\n      return null;\n    }\n    if (props.attemptNumber > this.maxAttempts) {\n      this.logger.debug(`Exceeded max attempt count (${this.maxAttempts})`);\n      // null means do not retry\n      return null;\n    }\n    this.logger.debug(\n      `Request is eligible for retry (attempt ${props.attemptNumber} of ${this.maxAttempts}, retrying immediately.`\n    );\n    // 0 means retry immediately\n    return 0;\n  }\n}\n"],"names":[],"mappings":";;;;;AAKA,MAAA;AASA,MAAa;IAKX,YAAY,KAAmC,CAAA;;QAC7C,IAAI,CAAC,MAAM,GAAG,MAAM,aAAa,CAAC,SAAS,CAAC,IAAI;QAChD,IAAI,CAAC,mBAAmB,GACtB,CAAA,KAAA,MAAM,mBAAmB,MAAA,QAAA,OAAA,KAAA,IAAA,KACzB,IAAI,+BAAA,0BAA0B,CAAC,MAAM,aAAa;QACpD,IAAI,CAAC,WAAW,GAAG,MAAM,WAAW;IACtC;IAEA,4BACE,KAAuC,EAAA;QAEvC,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,CAAA,gEAAA,EAAmE,MAAM,UAAU,CAAC,IAAI,CAAA,gBAAA,EAAmB,MAAM,WAAW,CAAC,IAAI,CAAA,iBAAA,EAAoB,MAAM,aAAa,CAAA,eAAA,EAAkB,IAAI,CAAC,WAAW,CAAA,CAAE;QAE9M,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,QAAQ;YACvD,0BAA0B;YAC1B,OAAO;;QAET,IAAI,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,EAAE;YAC1C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA,4BAAA,EAA+B,IAAI,CAAC,WAAW,CAAA,CAAA,CAAG;YACpE,0BAA0B;YAC1B,OAAO;;QAET,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,CAAA,uCAAA,EAA0C,MAAM,aAAa,CAAA,IAAA,EAAO,IAAI,CAAC,WAAW,CAAA,uBAAA,CAAyB;QAE/G,4BAA4B;QAC5B,OAAO;IACT;;AAjCF,QAAA,uBAAA,GAAA"}},
    {"offset": {"line": 1061, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1065, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/logging/default-momento-logger.ts"],"sourcesContent":["import {\n  MomentoLogger,\n  MomentoLoggerFactory,\n} from '@gomomento/sdk-core/dist/src/config/logging/momento-logger';\nimport printf = require('../../internal/vendor/printf/printf');\n\nexport enum DefaultMomentoLoggerLevel {\n  TRACE = 5,\n  DEBUG = 10,\n  INFO = 20,\n  WARN = 30,\n  ERROR = 40,\n}\n\nexport class DefaultMomentoLoggerFactory implements MomentoLoggerFactory {\n  private readonly level: DefaultMomentoLoggerLevel;\n  constructor(\n    level: DefaultMomentoLoggerLevel = DefaultMomentoLoggerLevel.INFO\n  ) {\n    this.level = level;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getLogger(loggerName: string | any): MomentoLogger {\n    return new DefaultMomentoLogger(loggerName, this.level);\n  }\n}\n\nexport class DefaultMomentoLogger implements MomentoLogger {\n  private readonly loggerName: string;\n  private readonly level: DefaultMomentoLoggerLevel;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(loggerName: string | any, level: DefaultMomentoLoggerLevel) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.loggerName =\n      typeof loggerName === 'string' || loggerName instanceof String\n        ? loggerName\n        : // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          loggerName.constructor.name;\n    this.level = level;\n  }\n\n  trace(msg: string, ...args: unknown[]): void {\n    if (this.level > DefaultMomentoLoggerLevel.TRACE) {\n      return;\n    }\n    this.outputMessage(console.log, DefaultMomentoLoggerLevel.TRACE, msg, args);\n  }\n\n  debug(msg: string, ...args: unknown[]): void {\n    if (this.level > DefaultMomentoLoggerLevel.DEBUG) {\n      return;\n    }\n    this.outputMessage(console.log, DefaultMomentoLoggerLevel.DEBUG, msg, args);\n  }\n\n  info(msg: string, ...args: unknown[]): void {\n    if (this.level > DefaultMomentoLoggerLevel.INFO) {\n      return;\n    }\n    this.outputMessage(console.log, DefaultMomentoLoggerLevel.INFO, msg, args);\n  }\n\n  warn(msg: string, ...args: unknown[]): void {\n    if (this.level > DefaultMomentoLoggerLevel.WARN) {\n      return;\n    }\n    this.outputMessage(console.warn, DefaultMomentoLoggerLevel.WARN, msg, args);\n  }\n\n  error(msg: string, ...args: unknown[]): void {\n    if (this.level > DefaultMomentoLoggerLevel.ERROR) {\n      return;\n    }\n    this.outputMessage(\n      console.error,\n      DefaultMomentoLoggerLevel.ERROR,\n      msg,\n      args\n    );\n  }\n\n  private outputMessage(\n    outputFn: (output: string) => void,\n    level: DefaultMomentoLoggerLevel,\n    msg: string,\n    args: unknown[]\n  ) {\n    outputFn(\n      printf(\n        '[%s] %s (Momento: %s): %s',\n        new Date().toISOString(),\n        DefaultMomentoLoggerLevel[level],\n        this.loggerName,\n        printf(msg, ...args)\n      )\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AAIA,MAAA;AAEA,IAAY;AAAZ,CAAA,SAAY,yBAAyB;IACnC,yBAAA,CAAA,yBAAA,CAAA,QAAA,GAAA,EAAA,GAAA;IACA,yBAAA,CAAA,yBAAA,CAAA,QAAA,GAAA,GAAA,GAAA;IACA,yBAAA,CAAA,yBAAA,CAAA,OAAA,GAAA,GAAA,GAAA;IACA,yBAAA,CAAA,yBAAA,CAAA,OAAA,GAAA,GAAA,GAAA;IACA,yBAAA,CAAA,yBAAA,CAAA,QAAA,GAAA,GAAA,GAAA;AACF,CAAC,EANW,4BAAA,QAAA,yBAAyB,IAAA,CAAzB,QAAA,yBAAyB,GAAA,CAAA,CAAA;AAQrC,MAAa;IAEX,YACE,QAAmC,0BAA0B,IAAI,CAAA;QAEjE,IAAI,CAAC,KAAK,GAAG;IACf;IAEA,8DAA8D;IAC9D,UAAU,UAAwB,EAAA;QAChC,OAAO,IAAI,qBAAqB,YAAY,IAAI,CAAC,KAAK;IACxD;;AAXF,QAAA,2BAAA,GAAA;AAcA,MAAa;IAGX,8DAA8D;IAC9D,YAAY,UAAwB,EAAE,KAAgC,CAAA;QACpE,mEAAmE;QACnE,IAAI,CAAC,UAAU,GACb,OAAO,eAAe,YAAY,sBAAsB,SACpD,aAEA,WAAW,WAAW,CAAC,IAAI;QACjC,IAAI,CAAC,KAAK,GAAG;IACf;IAEA,MAAM,GAAW,EAAE,GAAG,IAAe,EAAA;QACnC,IAAI,IAAI,CAAC,KAAK,GAAG,0BAA0B,KAAK,EAAE;YAChD;;QAEF,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,EAAE,0BAA0B,KAAK,EAAE,KAAK;IACxE;IAEA,MAAM,GAAW,EAAE,GAAG,IAAe,EAAA;QACnC,IAAI,IAAI,CAAC,KAAK,GAAG,0BAA0B,KAAK,EAAE;YAChD;;QAEF,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,EAAE,0BAA0B,KAAK,EAAE,KAAK;IACxE;IAEA,KAAK,GAAW,EAAE,GAAG,IAAe,EAAA;QAClC,IAAI,IAAI,CAAC,KAAK,GAAG,0BAA0B,IAAI,EAAE;YAC/C;;QAEF,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,EAAE,0BAA0B,IAAI,EAAE,KAAK;IACvE;IAEA,KAAK,GAAW,EAAE,GAAG,IAAe,EAAA;QAClC,IAAI,IAAI,CAAC,KAAK,GAAG,0BAA0B,IAAI,EAAE;YAC/C;;QAEF,IAAI,CAAC,aAAa,CAAC,QAAQ,IAAI,EAAE,0BAA0B,IAAI,EAAE,KAAK;IACxE;IAEA,MAAM,GAAW,EAAE,GAAG,IAAe,EAAA;QACnC,IAAI,IAAI,CAAC,KAAK,GAAG,0BAA0B,KAAK,EAAE;YAChD;;QAEF,IAAI,CAAC,aAAa,CAChB,QAAQ,KAAK,EACb,0BAA0B,KAAK,EAC/B,KACA;IAEJ;IAEQ,cACN,QAAkC,EAClC,KAAgC,EAChC,GAAW,EACX,IAAe,EAAA;QAEf,SACE,OACE,6BACA,IAAI,OAAO,WAAW,IACtB,yBAAyB,CAAC,MAAM,EAChC,IAAI,CAAC,UAAU,EACf,OAAO,QAAQ;IAGrB;;AArEF,QAAA,oBAAA,GAAA"}},
    {"offset": {"line": 1131, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1135, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/configurations.ts"],"sourcesContent":["import {CacheConfiguration} from './configuration';\nimport {FixedCountRetryStrategy} from './retry/fixed-count-retry-strategy';\nimport {RetryStrategy} from './retry/retry-strategy';\nimport {Middleware} from './middleware/middleware';\nimport {MomentoLoggerFactory, ReadConcern} from '@gomomento/sdk-core';\nimport {\n  GrpcConfiguration,\n  StaticGrpcConfiguration,\n  StaticTransportStrategy,\n  TransportStrategy,\n} from '..';\nimport {DefaultMomentoLoggerFactory} from './logging/default-momento-logger';\n\n// 4 minutes.  We want to remain comfortably underneath the idle timeout for AWS NLB, which is 350s.\nconst defaultMaxIdleMillis = 4 * 60 * 1_000;\nconst defaultMaxSessionMemoryMb = 256;\nconst defaultLoggerFactory: MomentoLoggerFactory =\n  new DefaultMomentoLoggerFactory();\nconst defaultMiddlewares: Middleware[] = [];\n\nfunction defaultRetryStrategy(\n  loggerFactory: MomentoLoggerFactory\n): RetryStrategy {\n  return new FixedCountRetryStrategy({\n    loggerFactory: loggerFactory,\n    maxAttempts: 3,\n  });\n}\n\n/**\n * Laptop config provides defaults suitable for a medium-to-high-latency dev environment.  Permissive timeouts, retries, and\n * relaxed latency and throughput targets.\n * @export\n * @class Laptop\n */\nexport class Laptop extends CacheConfiguration {\n  /**\n   * Provides the latest recommended configuration for a laptop development environment.  NOTE: this configuration may\n   * change in future releases to take advantage of improvements we identify for default configurations.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {CacheConfiguration}\n   */\n  static latest(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): CacheConfiguration {\n    return Laptop.v1(loggerFactory);\n  }\n\n  /**\n   * Provides v1 recommended configuration for a laptop development environment.  This configuration is guaranteed not\n   * to change in future releases of the Momento node.js SDK.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {CacheConfiguration}\n   */\n  static v1(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): CacheConfiguration {\n    const deadlineMillis = 5000;\n    const grpcConfig: GrpcConfiguration = new StaticGrpcConfiguration({\n      deadlineMillis: deadlineMillis,\n      maxSessionMemoryMb: defaultMaxSessionMemoryMb,\n      keepAlivePermitWithoutCalls: 1,\n      keepAliveTimeMs: 5000,\n      keepAliveTimeoutMs: 1000,\n    });\n    const transportStrategy: TransportStrategy = new StaticTransportStrategy({\n      grpcConfiguration: grpcConfig,\n      maxIdleMillis: defaultMaxIdleMillis,\n    });\n    return new Laptop({\n      loggerFactory: loggerFactory,\n      retryStrategy: defaultRetryStrategy(loggerFactory),\n      transportStrategy: transportStrategy,\n      middlewares: defaultMiddlewares,\n      throwOnErrors: false,\n      readConcern: ReadConcern.BALANCED,\n      compression: undefined,\n    });\n  }\n}\n\nexport class Lambda extends CacheConfiguration {\n  /**\n   * Provides the latest recommended configuration for a lambda environment.  NOTE: this configuration may\n   * change in future releases to take advantage of improvements we identify for default configurations.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {CacheConfiguration}\n   */\n  static latest(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): CacheConfiguration {\n    const deadlineMillis = 1100;\n    const grpcConfig: GrpcConfiguration = new StaticGrpcConfiguration({\n      deadlineMillis: deadlineMillis,\n      maxSessionMemoryMb: defaultMaxSessionMemoryMb,\n      numClients: 1,\n    });\n    const transportStrategy: TransportStrategy = new StaticTransportStrategy({\n      grpcConfiguration: grpcConfig,\n      maxIdleMillis: defaultMaxIdleMillis,\n    });\n    return new Lambda({\n      loggerFactory: loggerFactory,\n      retryStrategy: defaultRetryStrategy(loggerFactory),\n      transportStrategy: transportStrategy,\n      middlewares: defaultMiddlewares,\n      throwOnErrors: false,\n      readConcern: ReadConcern.BALANCED,\n      compression: undefined,\n    });\n  }\n}\n\nclass InRegionDefault extends CacheConfiguration {\n  /**\n   * Provides the latest recommended configuration for a typical in-region environment.  NOTE: this configuration may\n   * change in future releases to take advantage of improvements we identify for default configurations.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {CacheConfiguration}\n   */\n  static latest(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): CacheConfiguration {\n    return InRegionDefault.v1(loggerFactory);\n  }\n\n  /**\n   * Provides v1 recommended configuration for a typical in-region environment.  This configuration is guaranteed not\n   * to change in future releases of the Momento node.js SDK.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {CacheConfiguration}\n   */\n  static v1(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): CacheConfiguration {\n    const deadlineMillis = 1100;\n    const grpcConfig: GrpcConfiguration = new StaticGrpcConfiguration({\n      deadlineMillis: deadlineMillis,\n      maxSessionMemoryMb: defaultMaxSessionMemoryMb,\n      keepAlivePermitWithoutCalls: 1,\n      keepAliveTimeMs: 5000,\n      keepAliveTimeoutMs: 1000,\n    });\n    const transportStrategy: TransportStrategy = new StaticTransportStrategy({\n      grpcConfiguration: grpcConfig,\n      maxIdleMillis: defaultMaxIdleMillis,\n    });\n    return new InRegionDefault({\n      loggerFactory: loggerFactory,\n      retryStrategy: defaultRetryStrategy(loggerFactory),\n      transportStrategy: transportStrategy,\n      middlewares: defaultMiddlewares,\n      throwOnErrors: false,\n      readConcern: ReadConcern.BALANCED,\n      compression: undefined,\n    });\n  }\n}\n\nclass InRegionLowLatency extends CacheConfiguration {\n  /**\n   * Provides the latest recommended configuration for an in-region environment with aggressive low-latency requirements.\n   * NOTE: this configuration may change in future releases to take advantage of improvements we identify for default\n   * configurations.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {CacheConfiguration}\n   */\n  static latest(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): CacheConfiguration {\n    return InRegionLowLatency.v1(loggerFactory);\n  }\n\n  /**\n   * Provides v1 recommended configuration for an in-region environment with aggressive low-latency requirements.\n   * This configuration is guaranteed not to change in future releases of the Momento node.js SDK.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {CacheConfiguration}\n   */\n  static v1(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): CacheConfiguration {\n    const deadlineMillis = 500;\n    const grpcConfig: GrpcConfiguration = new StaticGrpcConfiguration({\n      deadlineMillis: deadlineMillis,\n      maxSessionMemoryMb: defaultMaxSessionMemoryMb,\n      keepAlivePermitWithoutCalls: 1,\n      keepAliveTimeMs: 5000,\n      keepAliveTimeoutMs: 1000,\n    });\n    const transportStrategy: TransportStrategy = new StaticTransportStrategy({\n      grpcConfiguration: grpcConfig,\n      maxIdleMillis: defaultMaxIdleMillis,\n    });\n    return new InRegionDefault({\n      loggerFactory: loggerFactory,\n      retryStrategy: defaultRetryStrategy(loggerFactory),\n      transportStrategy: transportStrategy,\n      middlewares: defaultMiddlewares,\n      throwOnErrors: false,\n      readConcern: ReadConcern.BALANCED,\n      compression: undefined,\n    });\n  }\n}\n\n/**\n * InRegion provides defaults suitable for an environment where your client is running in the same region as the Momento\n * service.  It has more aggressive timeouts and retry behavior than the Laptop config.\n * @export\n * @class InRegion\n */\nexport class InRegion {\n  /**\n   * This config prioritizes throughput and client resource utilization.  It has a slightly relaxed client-side timeout\n   * setting to maximize throughput.\n   * @type {InRegionDefault}\n   */\n  static Default = InRegionDefault;\n  /**\n   * This config prioritizes keeping p99.9 latencies as low as possible, potentially sacrificing\n   * some throughput to achieve this.  It has a very aggressive client-side timeout.  Use this\n   * configuration if the most important factor is to ensure that cache unavailability doesn't force\n   * unacceptably high latencies for your own application.\n   * @type {InRegionLowLatency}\n   */\n  static LowLatency = InRegionLowLatency;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1326, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1330, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/auth-client-configuration.ts"],"sourcesContent":["import {MomentoLoggerFactory} from '@gomomento/sdk-core';\n\nexport interface AuthClientConfigurationProps {\n  /**\n   * Configures logging verbosity and format\n   */\n  loggerFactory: MomentoLoggerFactory;\n}\n\n/**\n * Configuration options for Momento CacheClient.\n *\n * @export\n * @interface Configuration\n */\nexport interface AuthConfiguration {\n  /**\n   * @returns {MomentoLoggerFactory} the current configuration options for logging verbosity and format\n   */\n  getLoggerFactory(): MomentoLoggerFactory;\n}\n\nexport class AuthClientConfiguration implements AuthConfiguration {\n  private readonly loggerFactory: MomentoLoggerFactory;\n\n  constructor(props: AuthClientConfigurationProps) {\n    this.loggerFactory = props.loggerFactory;\n  }\n\n  getLoggerFactory(): MomentoLoggerFactory {\n    return this.loggerFactory;\n  }\n}\n"],"names":[],"mappings":";;;;;AAsBA,MAAa;IAGX,YAAY,KAAmC,CAAA;QAC7C,IAAI,CAAC,aAAa,GAAG,MAAM,aAAa;IAC1C;IAEA,mBAAgB;QACd,OAAO,IAAI,CAAC,aAAa;IAC3B;;AATF,QAAA,uBAAA,GAAA"}},
    {"offset": {"line": 1344, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1348, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/auth-client-configurations.ts"],"sourcesContent":["import {AuthClientConfiguration} from './auth-client-configuration';\nimport {MomentoLoggerFactory} from '@gomomento/sdk-core';\nimport {DefaultMomentoLoggerFactory} from './logging/default-momento-logger';\n\nconst defaultLoggerFactory: MomentoLoggerFactory =\n  new DefaultMomentoLoggerFactory();\n\n/**\n * Laptop config provides defaults suitable for a medium-to-high-latency dev environment.  Permissive timeouts, retries, and\n * relaxed latency and throughput targets.\n * @export\n * @class Laptop\n */\nexport class Default extends AuthClientConfiguration {\n  /**\n   * Provides the latest recommended configuration for a laptop development environment.  NOTE: this configuration may\n   * change in future releases to take advantage of improvements we identify for default configurations.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {CacheConfiguration}\n   */\n  static latest(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): AuthClientConfiguration {\n    return new AuthClientConfiguration({\n      loggerFactory: loggerFactory,\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA;AAEA,MAAA;AAEA,MAAM,uBACJ,IAAI,yBAAA,2BAA2B;AAEjC;;;;;IAMA,MAAa,gBAAgB,4BAAA,uBAAuB;IAClD;;;;;QAMA,OAAO,OACL,gBAAsC,oBAAoB,EAAA;QAE1D,OAAO,IAAI,4BAAA,uBAAuB,CAAC;YACjC,eAAe;;IAEnB;;AAbF,QAAA,OAAA,GAAA"}},
    {"offset": {"line": 1374, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1378, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/topic-configuration.ts"],"sourcesContent":["import {MomentoLoggerFactory} from '@gomomento/sdk-core';\nimport {TopicTransportStrategy} from './transport/topics';\n\nexport interface TopicConfigurationProps {\n  /**\n   * Configures logging verbosity and format\n   */\n  loggerFactory: MomentoLoggerFactory;\n\n  /**\n   * Configures low-level options for network interactions with the Momento service\n   */\n  transportStrategy: TopicTransportStrategy;\n\n  /**\n   * Configures whether the client should return a Momento Error object or throw an exception when an error occurs.\n   */\n  throwOnErrors: boolean;\n}\n\n/**\n * Configuration options for Momento TopicClient\n *\n * @export\n * @interface TopicConfiguration\n */\nexport interface TopicConfiguration {\n  /**\n   * @returns {MomentoLoggerFactory} the current configuration options for logging verbosity and format\n   */\n  getLoggerFactory(): MomentoLoggerFactory;\n\n  /**\n   * @returns {TransportStrategy} the current configuration options for wire interactions with the Momento service\n   */\n  getTransportStrategy(): TopicTransportStrategy;\n\n  /**\n   * Shorthand copy constructor for overriding TransportStrategy.GrpcStrategy.NumClients. This will\n   * allow you to control the number of TCP connections that the client will open to the server. Usually\n   * you should stick with the default value from your pre-built configuration, but it can be valuable\n   * to increase this value in order to ensure more evenly distributed load on Momento servers.\n   *\n   * @param {number} numConnections\n   * @returns {Configuration} a new Configuration object with the updated TransportStrategy\n   */\n  withNumConnections(numConnections: number): TopicConfiguration;\n\n  /**\n   * @returns {boolean} Configures whether the client should return a Momento Error object or throw an exception when an\n   * error occurs. By default, this is set to false, and the client will return a Momento Error object on errors. Set it\n   * to true if you prefer for exceptions to be thrown.\n   */\n  getThrowOnErrors(): boolean;\n\n  /**\n   * Copy constructor for configuring whether the client should return a Momento Error object or throw an exception when an\n   * error occurs. By default, this is set to false, and the client will return a Momento Error object on errors. Set it\n   * to true if you prefer for exceptions to be thrown.\n   * @param {boolean} throwOnErrors\n   * @returns {Configuration} a new Configuration object with the specified throwOnErrors setting\n   */\n  withThrowOnErrors(throwOnErrors: boolean): TopicConfiguration;\n}\n\nexport class TopicClientConfiguration implements TopicConfiguration {\n  private readonly loggerFactory: MomentoLoggerFactory;\n  private readonly transportStrategy: TopicTransportStrategy;\n  private readonly throwOnErrors: boolean;\n\n  constructor(props: TopicConfigurationProps) {\n    this.loggerFactory = props.loggerFactory;\n    this.transportStrategy = props.transportStrategy;\n    this.throwOnErrors = props.throwOnErrors;\n  }\n\n  getLoggerFactory(): MomentoLoggerFactory {\n    return this.loggerFactory;\n  }\n\n  getTransportStrategy(): TopicTransportStrategy {\n    return this.transportStrategy;\n  }\n\n  withTransportStrategy(\n    transportStrategy: TopicTransportStrategy\n  ): TopicConfiguration {\n    return new TopicClientConfiguration({\n      loggerFactory: this.loggerFactory,\n      transportStrategy: transportStrategy,\n      throwOnErrors: this.throwOnErrors,\n    });\n  }\n\n  withNumConnections(numConnections: number): TopicConfiguration {\n    return this.withTransportStrategy(\n      this.getTransportStrategy().withGrpcConfig(\n        this.getTransportStrategy()\n          .getGrpcConfig()\n          .withNumClients(numConnections)\n      )\n    );\n  }\n\n  getThrowOnErrors(): boolean {\n    return this.throwOnErrors;\n  }\n\n  withThrowOnErrors(throwOnErrors: boolean): TopicConfiguration {\n    return new TopicClientConfiguration({\n      loggerFactory: this.loggerFactory,\n      transportStrategy: this.transportStrategy,\n      throwOnErrors: throwOnErrors,\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;AAiEA,MAAa;IAKX,YAAY,KAA8B,CAAA;QACxC,IAAI,CAAC,aAAa,GAAG,MAAM,aAAa;QACxC,IAAI,CAAC,iBAAiB,GAAG,MAAM,iBAAiB;QAChD,IAAI,CAAC,aAAa,GAAG,MAAM,aAAa;IAC1C;IAEA,mBAAgB;QACd,OAAO,IAAI,CAAC,aAAa;IAC3B;IAEA,uBAAoB;QAClB,OAAO,IAAI,CAAC,iBAAiB;IAC/B;IAEA,sBACE,iBAAyC,EAAA;QAEzC,OAAO,IAAI,yBAAyB;YAClC,eAAe,IAAI,CAAC,aAAa;YACjC,mBAAmB;YACnB,eAAe,IAAI,CAAC,aAAa;;IAErC;IAEA,mBAAmB,cAAsB,EAAA;QACvC,OAAO,IAAI,CAAC,qBAAqB,CAC/B,IAAI,CAAC,oBAAoB,GAAG,cAAc,CACxC,IAAI,CAAC,oBAAoB,GACtB,aAAa,GACb,cAAc,CAAC;IAGxB;IAEA,mBAAgB;QACd,OAAO,IAAI,CAAC,aAAa;IAC3B;IAEA,kBAAkB,aAAsB,EAAA;QACtC,OAAO,IAAI,yBAAyB;YAClC,eAAe,IAAI,CAAC,aAAa;YACjC,mBAAmB,IAAI,CAAC,iBAAiB;YACzC,eAAe;;IAEnB;;AAjDF,QAAA,wBAAA,GAAA"}},
    {"offset": {"line": 1417, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1421, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/transport/topics/grpc-configuration.ts"],"sourcesContent":["export interface TopicGrpcConfigurationProps {\n  /**\n   * The number of internal clients a topic client will create to communicate with Momento. More of them allows\n   * more concurrent requests, at the cost of more open connections and the latency of setting up each client.\n   */\n  numClients?: number;\n\n  /**\n   * Indicates if it permissible to send keepalive pings from the client without any outstanding streams.\n   *\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   */\n  keepAlivePermitWithoutCalls?: number;\n\n  /**\n   * After waiting for a duration of this time, if the keepalive ping sender does not receive the ping ack,\n   * it will close the transport.\n   *\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   */\n  keepAliveTimeoutMs?: number;\n\n  /**\n   * After a duration of this time the client/server pings its peer to see if the transport is still alive.\n   *\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   */\n  keepAliveTimeMs?: number;\n}\n\n/**\n * Encapsulates gRPC configuration tunables.\n * @export\n * @interface TopicGrpcConfiguration\n */\nexport interface TopicGrpcConfiguration {\n  /**\n   * @returns {number} the number of internal clients a topic client will create to communicate with Momento. More of\n   * them will allow for more concurrent requests.\n   */\n  getNumClients(): number;\n\n  /**\n   * Copy constructor for overriding the number of clients to create\n   * @param {number} numClients the number of internal clients to create\n   * @returns {GrpcConfiguration} a new GrpcConfiguration with the specified number of clients\n   */\n  withNumClients(numClients: number): TopicGrpcConfiguration;\n\n  /**\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   *\n   * @returns {number} 0 or 1, if it is permissible to send a keepalive/ping without any outstanding calls.\n   */\n  getKeepAlivePermitWithoutCalls(): number | undefined;\n\n  /**\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   *\n   * @returns {number} the time to wait for a response from a keepalive or ping.\n   */\n  getKeepAliveTimeoutMS(): number | undefined;\n\n  /**\n   * NOTE: keep-alives are very important for long-lived server environments where there may be periods of time\n   * when the connection is idle. However, they are very problematic for lambda environments where the lambda\n   * runtime is continuously frozen and unfrozen, because the lambda may be frozen before the \"ACK\" is received\n   * from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.\n   * Therefore, keep-alives should be disabled in lambda and similar environments.\n   *\n   * @returns {number} the interval at which to send the keepalive or ping.\n   */\n  getKeepAliveTimeMS(): number | undefined;\n}\n"],"names":[],"mappings":""}},
    {"offset": {"line": 1425, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1429, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/transport/topics/transport-strategy.ts"],"sourcesContent":["import {\n  TopicGrpcConfiguration,\n  TopicGrpcConfigurationProps,\n} from './grpc-configuration';\n\nexport interface TopicTransportStrategy {\n  /**\n   * Configures the low-level gRPC settings for the Momento client's communication\n   * with the Momento server.\n   * @returns {TopicGrpcConfiguration}\n   */\n  getGrpcConfig(): TopicGrpcConfiguration;\n\n  /**\n   * Copy constructor for overriding the gRPC configuration\n   * @param {TopicGrpcConfiguration} grpcConfig\n   * @returns {TopicTransportStrategy} a new TransportStrategy with the specified gRPC config.\n   */\n  withGrpcConfig(grpcConfig: TopicGrpcConfiguration): TopicTransportStrategy;\n}\n\nexport interface TopicTransportStrategyProps {\n  /**\n   * low-level gRPC settings for communication with the Momento server\n   */\n  grpcConfiguration: TopicGrpcConfiguration;\n}\n\nexport class StaticTopicGrpcConfiguration implements TopicGrpcConfiguration {\n  private readonly numClients: number;\n  private readonly keepAlivePermitWithoutCalls?: number;\n  private readonly keepAliveTimeoutMs?: number;\n  private readonly keepAliveTimeMs?: number;\n\n  constructor(props: TopicGrpcConfigurationProps) {\n    if (props.numClients !== undefined && props.numClients !== null) {\n      this.numClients = props.numClients;\n    } else {\n      this.numClients = 1;\n    }\n\n    this.keepAliveTimeMs = props.keepAliveTimeMs;\n    this.keepAliveTimeoutMs = props.keepAliveTimeoutMs;\n    this.keepAlivePermitWithoutCalls = props.keepAlivePermitWithoutCalls;\n  }\n\n  getNumClients(): number {\n    return this.numClients;\n  }\n\n  withNumClients(numClients: number): TopicGrpcConfiguration {\n    return new StaticTopicGrpcConfiguration({\n      numClients: numClients,\n      keepAlivePermitWithoutCalls: this.keepAlivePermitWithoutCalls,\n      keepAliveTimeoutMs: this.keepAliveTimeoutMs,\n      keepAliveTimeMs: this.keepAliveTimeMs,\n    });\n  }\n\n  getKeepAliveTimeoutMS(): number | undefined {\n    return this.keepAliveTimeoutMs;\n  }\n\n  getKeepAliveTimeMS(): number | undefined {\n    return this.keepAliveTimeMs;\n  }\n\n  getKeepAlivePermitWithoutCalls(): number | undefined {\n    return this.keepAlivePermitWithoutCalls;\n  }\n}\n\nexport class StaticTopicTransportStrategy implements TopicTransportStrategy {\n  private readonly grpcConfig: TopicGrpcConfiguration;\n\n  constructor(props: TopicTransportStrategyProps) {\n    this.grpcConfig = props.grpcConfiguration;\n  }\n\n  getGrpcConfig(): TopicGrpcConfiguration {\n    return this.grpcConfig;\n  }\n\n  withGrpcConfig(\n    grpcConfig: TopicGrpcConfiguration\n  ): StaticTopicTransportStrategy {\n    return new StaticTopicTransportStrategy({\n      grpcConfiguration: grpcConfig,\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;AA4BA,MAAa;IAMX,YAAY,KAAkC,CAAA;QAC5C,IAAI,MAAM,UAAU,KAAK,aAAa,MAAM,UAAU,KAAK,MAAM;YAC/D,IAAI,CAAC,UAAU,GAAG,MAAM,UAAU;eAC7B;YACL,IAAI,CAAC,UAAU,GAAG;;QAGpB,IAAI,CAAC,eAAe,GAAG,MAAM,eAAe;QAC5C,IAAI,CAAC,kBAAkB,GAAG,MAAM,kBAAkB;QAClD,IAAI,CAAC,2BAA2B,GAAG,MAAM,2BAA2B;IACtE;IAEA,gBAAa;QACX,OAAO,IAAI,CAAC,UAAU;IACxB;IAEA,eAAe,UAAkB,EAAA;QAC/B,OAAO,IAAI,6BAA6B;YACtC,YAAY;YACZ,6BAA6B,IAAI,CAAC,2BAA2B;YAC7D,oBAAoB,IAAI,CAAC,kBAAkB;YAC3C,iBAAiB,IAAI,CAAC,eAAe;;IAEzC;IAEA,wBAAqB;QACnB,OAAO,IAAI,CAAC,kBAAkB;IAChC;IAEA,qBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe;IAC7B;IAEA,iCAA8B;QAC5B,OAAO,IAAI,CAAC,2BAA2B;IACzC;;AAzCF,QAAA,4BAAA,GAAA;AA4CA,MAAa;IAGX,YAAY,KAAkC,CAAA;QAC5C,IAAI,CAAC,UAAU,GAAG,MAAM,iBAAiB;IAC3C;IAEA,gBAAa;QACX,OAAO,IAAI,CAAC,UAAU;IACxB;IAEA,eACE,UAAkC,EAAA;QAElC,OAAO,IAAI,6BAA6B;YACtC,mBAAmB;;IAEvB;;AAjBF,QAAA,4BAAA,GAAA"}},
    {"offset": {"line": 1481, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1485, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/transport/topics/index.ts"],"sourcesContent":["export * from './grpc-configuration';\nexport * from './transport-strategy';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,6JAAA;AACA,6JAAA"}},
    {"offset": {"line": 1510, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1514, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/topic-configurations.ts"],"sourcesContent":["import {MomentoLoggerFactory} from '@gomomento/sdk-core';\nimport {DefaultMomentoLoggerFactory} from './logging/default-momento-logger';\nimport {\n  TopicClientConfiguration,\n  TopicConfiguration,\n} from './topic-configuration';\nimport {\n  StaticTopicGrpcConfiguration,\n  StaticTopicTransportStrategy,\n} from './transport/topics';\n\nconst defaultLoggerFactory: MomentoLoggerFactory =\n  new DefaultMomentoLoggerFactory();\n\n/**\n * Default config provides defaults suitable for most environments; prioritizes success of publishing and receiving messages.\n * @export\n * @class Default\n */\nexport class Default extends TopicClientConfiguration {\n  /**\n   * Provides the latest recommended configuration for a default environment.  NOTE: this configuration may\n   * change in future releases to take advantage of improvements we identify for default configurations.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {TopicConfiguration}\n   */\n  static latest(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): TopicConfiguration {\n    return new TopicClientConfiguration({\n      loggerFactory: loggerFactory,\n      transportStrategy: new StaticTopicTransportStrategy({\n        grpcConfiguration: new StaticTopicGrpcConfiguration({\n          numClients: 1,\n          keepAlivePermitWithoutCalls: 1,\n          keepAliveTimeMs: 5000,\n          keepAliveTimeoutMs: 1000,\n        }),\n      }),\n      throwOnErrors: false,\n    });\n  }\n}\n\n/**\n * Default config provides defaults suitable for AWS lambda or similar environments; relaxes timeouts, disables keep-alives\n * to avoid issues with execution environments being frozen and resumed, etc.\n * @export\n * @class Lambda\n */\nexport class Lambda extends TopicClientConfiguration {\n  /**\n   * Provides the latest recommended configuration for a lambda environment.  NOTE: this configuration may\n   * change in future releases to take advantage of improvements we identify for default configurations.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {CacheConfiguration}\n   */\n  static latest(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): TopicClientConfiguration {\n    const grpcConfig = new StaticTopicGrpcConfiguration({\n      numClients: 1,\n    });\n    const transportStrategy = new StaticTopicTransportStrategy({\n      grpcConfiguration: grpcConfig,\n    });\n    return new Lambda({\n      loggerFactory: loggerFactory,\n      transportStrategy: transportStrategy,\n      throwOnErrors: false,\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA;AACA,MAAA;AAIA,MAAA;AAKA,MAAM,uBACJ,IAAI,yBAAA,2BAA2B;AAEjC;;;;IAKA,MAAa,gBAAgB,sBAAA,wBAAwB;IACnD;;;;;QAMA,OAAO,OACL,gBAAsC,oBAAoB,EAAA;QAE1D,OAAO,IAAI,sBAAA,wBAAwB,CAAC;YAClC,eAAe;YACf,mBAAmB,IAAI,SAAA,4BAA4B,CAAC;gBAClD,mBAAmB,IAAI,SAAA,4BAA4B,CAAC;oBAClD,YAAY;oBACZ,6BAA6B;oBAC7B,iBAAiB;oBACjB,oBAAoB;;;YAGxB,eAAe;;IAEnB;;AAtBF,QAAA,OAAA,GAAA;AAyBA;;;;;IAMA,MAAa,eAAe,sBAAA,wBAAwB;IAClD;;;;;QAMA,OAAO,OACL,gBAAsC,oBAAoB,EAAA;QAE1D,MAAM,aAAa,IAAI,SAAA,4BAA4B,CAAC;YAClD,YAAY;;QAEd,MAAM,oBAAoB,IAAI,SAAA,4BAA4B,CAAC;YACzD,mBAAmB;;QAErB,OAAO,IAAI,OAAO;YAChB,eAAe;YACf,mBAAmB;YACnB,eAAe;;IAEnB;;AArBF,QAAA,MAAA,GAAA"}},
    {"offset": {"line": 1575, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1579, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/storage-configuration.ts"],"sourcesContent":["import {MomentoLoggerFactory, RetryStrategy} from '../';\nimport {StorageTransportStrategy} from './transport/storage';\n\n/**\n * Configuration options for Momento StorageClient\n *\n * @export\n * @interface StorageConfiguration\n */\nexport interface StorageConfiguration {\n  /**\n   * @returns {MomentoLoggerFactory} the current configuration options for logging verbosity and format\n   */\n  getLoggerFactory(): MomentoLoggerFactory;\n\n  /**\n   * @returns {StorageTransportStrategy} the current configuration options for wire interactions with the Momento service\n   */\n  getTransportStrategy(): StorageTransportStrategy;\n\n  /**\n   * @returns {RetryStrategy} the current configuration options for how and when failed requests will be retried\n   */\n  getRetryStrategy(): RetryStrategy;\n\n  /**\n   * Convenience copy constructor that updates the client-side timeout setting in the TransportStrategy\n   * @param {number} clientTimeoutMillis\n   * @returns {StorageConfiguration} a new Configuration object with its TransportStrategy updated to use the specified client timeout\n   */\n  withClientTimeoutMillis(clientTimeoutMillis: number): StorageConfiguration;\n\n  /**\n   * Copy constructor for overriding TransportStrategy\n   * @param {StorageTransportStrategy} transportStrategy\n   * @returns {StorageConfiguration} a new Configuration object with the specified TransportStrategy\n   */\n  withTransportStrategy(\n    transportStrategy: StorageTransportStrategy\n  ): StorageConfiguration;\n\n  /**\n   * Copy constructor for overriding RetryStrategy\n   * @param {RetryStrategy} retryStrategy\n   * @returns {StorageConfiguration} a new Configuration object with the specified RetryStrategy\n   */\n  withRetryStrategy(retryStrategy: RetryStrategy): StorageConfiguration;\n}\n\nexport interface StorageConfigurationProps {\n  /**\n   * Configures logging verbosity and format\n   */\n  loggerFactory: MomentoLoggerFactory;\n  /**\n   * Configures low-level options for network interactions with the Momento service\n   */\n  transportStrategy: StorageTransportStrategy;\n  /**\n   * Configures how and when failed requests will be retried\n   */\n  retryStrategy: RetryStrategy;\n}\n\nexport class StorageClientConfiguration implements StorageConfiguration {\n  private readonly loggerFactory: MomentoLoggerFactory;\n  private readonly transportStrategy: StorageTransportStrategy;\n  private readonly retryStrategy: RetryStrategy;\n\n  constructor(props: StorageConfigurationProps) {\n    this.loggerFactory = props.loggerFactory;\n    this.transportStrategy = props.transportStrategy;\n    this.retryStrategy = props.retryStrategy;\n  }\n\n  getLoggerFactory(): MomentoLoggerFactory {\n    return this.loggerFactory;\n  }\n\n  getTransportStrategy(): StorageTransportStrategy {\n    return this.transportStrategy;\n  }\n\n  getRetryStrategy(): RetryStrategy {\n    return this.retryStrategy;\n  }\n\n  withClientTimeoutMillis(clientTimeoutMillis: number): StorageConfiguration {\n    return new StorageClientConfiguration({\n      loggerFactory: this.loggerFactory,\n      transportStrategy:\n        this.transportStrategy.withClientTimeoutMillis(clientTimeoutMillis),\n      retryStrategy: this.retryStrategy,\n    });\n  }\n\n  withTransportStrategy(\n    transportStrategy: StorageTransportStrategy\n  ): StorageConfiguration {\n    return new StorageClientConfiguration({\n      loggerFactory: this.loggerFactory,\n      transportStrategy: transportStrategy,\n      retryStrategy: this.retryStrategy,\n    });\n  }\n\n  withRetryStrategy(retryStrategy: RetryStrategy): StorageConfiguration {\n    return new StorageClientConfiguration({\n      loggerFactory: this.loggerFactory,\n      transportStrategy: this.transportStrategy,\n      retryStrategy: retryStrategy,\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;AAgEA,MAAa;IAKX,YAAY,KAAgC,CAAA;QAC1C,IAAI,CAAC,aAAa,GAAG,MAAM,aAAa;QACxC,IAAI,CAAC,iBAAiB,GAAG,MAAM,iBAAiB;QAChD,IAAI,CAAC,aAAa,GAAG,MAAM,aAAa;IAC1C;IAEA,mBAAgB;QACd,OAAO,IAAI,CAAC,aAAa;IAC3B;IAEA,uBAAoB;QAClB,OAAO,IAAI,CAAC,iBAAiB;IAC/B;IAEA,mBAAgB;QACd,OAAO,IAAI,CAAC,aAAa;IAC3B;IAEA,wBAAwB,mBAA2B,EAAA;QACjD,OAAO,IAAI,2BAA2B;YACpC,eAAe,IAAI,CAAC,aAAa;YACjC,mBACE,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC;YACjD,eAAe,IAAI,CAAC,aAAa;;IAErC;IAEA,sBACE,iBAA2C,EAAA;QAE3C,OAAO,IAAI,2BAA2B;YACpC,eAAe,IAAI,CAAC,aAAa;YACjC,mBAAmB;YACnB,eAAe,IAAI,CAAC,aAAa;;IAErC;IAEA,kBAAkB,aAA4B,EAAA;QAC5C,OAAO,IAAI,2BAA2B;YACpC,eAAe,IAAI,CAAC,aAAa;YACjC,mBAAmB,IAAI,CAAC,iBAAiB;YACzC,eAAe;;IAEnB;;AAhDF,QAAA,0BAAA,GAAA"}},
    {"offset": {"line": 1622, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1626, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/transport/storage/grpc-configuration.ts"],"sourcesContent":["export interface StorageGrpcConfigurationProps {\n  /**\n   * number of milliseconds the client is willing to wait for an RPC to complete before it is terminated\n   * with a DeadlineExceeded error.\n   */\n  deadlineMillis: number;\n}\n\n/**\n * Encapsulates gRPC configuration tunables.\n * @export\n * @interface StorageGrpcConfiguration\n */\nexport interface StorageGrpcConfiguration {\n  /**\n   * @returns {number} number of milliseconds the client is willing to wait for an RPC to complete before it is terminated\n   * with a DeadlineExceeded error.\n   */\n  getDeadlineMillis(): number;\n\n  /**\n   * Copy constructor for overriding the client-side deadline\n   * @param {number} deadlineMillis\n   * @returns {StorageGrpcConfiguration} a new StorageGrpcConfiguration with the specified client-side deadline\n   */\n  withDeadlineMillis(deadlineMillis: number): StorageGrpcConfiguration;\n}\n"],"names":[],"mappings":""}},
    {"offset": {"line": 1630, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1634, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/transport/storage/transport-strategy.ts"],"sourcesContent":["import {\n  StorageGrpcConfiguration,\n  StorageGrpcConfigurationProps,\n} from './grpc-configuration';\n\nexport interface StorageTransportStrategy {\n  /**\n   * Configures the low-level gRPC settings for the Momento client's communication\n   * with the Momento server.\n   * @returns {StorageGrpcConfiguration}\n   */\n  getGrpcConfig(): StorageGrpcConfiguration;\n\n  /**\n   * Copy constructor for overriding the gRPC configuration\n   * @param {TopicGrpcConfiguration} grpcConfig\n   * @returns {TopicTransportStrategy} a new StorageTransportStrategy with the specified gRPC config.\n   */\n  withGrpcConfig(\n    grpcConfig: StorageGrpcConfiguration\n  ): StorageTransportStrategy;\n\n  /**\n   * Copy constructor to update the client-side timeout\n   * @param {number} clientTimeoutMillis\n   * @returns {StorageTransportStrategy} a new StorageTransportStrategy with the specified client timeout\n   */\n  withClientTimeoutMillis(\n    clientTimeoutMillis: number\n  ): StorageTransportStrategy;\n}\n\nexport interface StorageTransportStrategyProps {\n  /**\n   * low-level gRPC settings for communication with the Momento server\n   */\n  grpcConfiguration: StorageGrpcConfiguration;\n}\n\nexport class StaticStorageGrpcConfiguration\n  implements StorageGrpcConfiguration\n{\n  private readonly deadlineMillis: number;\n\n  constructor(props: StorageGrpcConfigurationProps) {\n    this.deadlineMillis = props.deadlineMillis;\n  }\n\n  getDeadlineMillis(): number {\n    return this.deadlineMillis;\n  }\n\n  withDeadlineMillis(deadlineMillis: number): StorageGrpcConfiguration {\n    return new StaticStorageGrpcConfiguration({\n      deadlineMillis: deadlineMillis,\n    });\n  }\n}\n\nexport class StaticStorageTransportStrategy\n  implements StorageTransportStrategy\n{\n  private readonly grpcConfig: StorageGrpcConfiguration;\n\n  constructor(props: StorageTransportStrategyProps) {\n    this.grpcConfig = props.grpcConfiguration;\n  }\n\n  getGrpcConfig(): StorageGrpcConfiguration {\n    return this.grpcConfig;\n  }\n\n  withGrpcConfig(\n    grpcConfig: StorageGrpcConfiguration\n  ): StorageTransportStrategy {\n    return new StaticStorageTransportStrategy({\n      grpcConfiguration: grpcConfig,\n    });\n  }\n\n  withClientTimeoutMillis(\n    clientTimeoutMillis: number\n  ): StorageTransportStrategy {\n    return new StaticStorageTransportStrategy({\n      grpcConfiguration:\n        this.grpcConfig.withDeadlineMillis(clientTimeoutMillis),\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;AAuCA,MAAa;IAKX,YAAY,KAAoC,CAAA;QAC9C,IAAI,CAAC,cAAc,GAAG,MAAM,cAAc;IAC5C;IAEA,oBAAiB;QACf,OAAO,IAAI,CAAC,cAAc;IAC5B;IAEA,mBAAmB,cAAsB,EAAA;QACvC,OAAO,IAAI,+BAA+B;YACxC,gBAAgB;;IAEpB;;AAjBF,QAAA,8BAAA,GAAA;AAoBA,MAAa;IAKX,YAAY,KAAoC,CAAA;QAC9C,IAAI,CAAC,UAAU,GAAG,MAAM,iBAAiB;IAC3C;IAEA,gBAAa;QACX,OAAO,IAAI,CAAC,UAAU;IACxB;IAEA,eACE,UAAoC,EAAA;QAEpC,OAAO,IAAI,+BAA+B;YACxC,mBAAmB;;IAEvB;IAEA,wBACE,mBAA2B,EAAA;QAE3B,OAAO,IAAI,+BAA+B;YACxC,mBACE,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC;;IAEzC;;AA5BF,QAAA,8BAAA,GAAA"}},
    {"offset": {"line": 1672, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1676, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/transport/storage/index.ts"],"sourcesContent":["export * from './grpc-configuration';\nexport * from './transport-strategy';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,8JAAA;AACA,8JAAA"}},
    {"offset": {"line": 1701, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1705, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/retry/storage-default-eligibility-strategy.ts"],"sourcesContent":["import {MomentoLogger, MomentoLoggerFactory} from '../../';\nimport {Status} from '@grpc/grpc-js/build/src/constants';\nimport {\n  EligibilityStrategy,\n  EligibleForRetryProps,\n} from './eligibility-strategy';\nimport {Metadata} from '@grpc/grpc-js';\n\nconst retryableGrpcStatusCodes: Array<Status> = [\n  // including all the status codes for reference, but\n  // commenting out the ones we don't want to retry on for now.\n\n  // Status.OK,\n  // Status.CANCELLED,\n  // Status.UNKNOWN,\n  // Status.INVALID_ARGUMENT,\n  Status.DEADLINE_EXCEEDED,\n  // Status.NOT_FOUND,\n  // Status.ALREADY_EXISTS,\n  // Status.PERMISSION_DENIED,\n  // Status.RESOURCE_EXHAUSTED,\n  // Status.FAILED_PRECONDITION,\n  // Status.ABORTED,\n  // Status.OUT_OF_RANGE,\n  // Status.UNIMPLEMENTED,\n  Status.INTERNAL,\n  Status.UNAVAILABLE,\n  // Status.DATA_LOSS,\n  // Status.UNAUTHENTICATED\n];\n\nconst retryableRequestTypes: Array<string> = [\n  '/store.Store/Put',\n  '/store.Store/Get',\n  '/store.Store/Delete',\n];\n\nexport class DefaultStorageEligibilityStrategy implements EligibilityStrategy {\n  private readonly logger: MomentoLogger;\n\n  constructor(loggerFactory: MomentoLoggerFactory) {\n    this.logger = loggerFactory.getLogger(this);\n  }\n\n  isEligibleForRetry(props: EligibleForRetryProps): boolean {\n    if (!retryableGrpcStatusCodes.includes(props.grpcStatus.code)) {\n      this.logger.debug(\n        `Response with status code ${props.grpcStatus.code} is not retryable.`\n      );\n      return false;\n    }\n\n    // If retry disposition metadata is available and the value is \"retryable\",\n    // it is safe to retry regardless of idempotency.\n    const retryMetadata = this.getRetryDispositionMetadata(\n      props.grpcStatus.metadata\n    );\n    if (retryMetadata === 'retryable') {\n      return true;\n    }\n\n    // Otherwise, if there is no retry metadata or the retry disposition is\n    // \"possibly_retryable\", it is safe to retry only idempotent commands.\n    if (!retryableRequestTypes.includes(props.grpcRequest.path)) {\n      this.logger.debug(\n        `Request with type ${props.grpcRequest.path} is not retryable.`\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  private getRetryDispositionMetadata(metadata: Metadata): string | undefined {\n    const retryMetadata = metadata.get('retry_disposition');\n    if (retryMetadata.length === 1) {\n      return retryMetadata[0].toString();\n    }\n    return undefined;\n  }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA;AAOA,MAAM,2BAA0C;IAC9C,oDAAoD;IACpD,6DAA6D;IAE7D,aAAa;IACb,oBAAoB;IACpB,kBAAkB;IAClB,2BAA2B;IAC3B,YAAA,MAAM,CAAC,iBAAiB;IACxB,oBAAoB;IACpB,yBAAyB;IACzB,4BAA4B;IAC5B,6BAA6B;IAC7B,8BAA8B;IAC9B,kBAAkB;IAClB,uBAAuB;IACvB,wBAAwB;IACxB,YAAA,MAAM,CAAC,QAAQ;IACf,YAAA,MAAM,CAAC,WAAW;CAGnB;AAED,MAAM,wBAAuC;IAC3C;IACA;IACA;CACD;AAED,MAAa;IAGX,YAAY,aAAmC,CAAA;QAC7C,IAAI,CAAC,MAAM,GAAG,cAAc,SAAS,CAAC,IAAI;IAC5C;IAEA,mBAAmB,KAA4B,EAAA;QAC7C,IAAI,CAAC,yBAAyB,QAAQ,CAAC,MAAM,UAAU,CAAC,IAAI,GAAG;YAC7D,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,CAAA,0BAAA,EAA6B,MAAM,UAAU,CAAC,IAAI,CAAA,kBAAA,CAAoB;YAExE,OAAO;;QAGT,2EAA2E;QAC3E,iDAAiD;QACjD,MAAM,gBAAgB,IAAI,CAAC,2BAA2B,CACpD,MAAM,UAAU,CAAC,QAAQ;QAE3B,IAAI,kBAAkB,aAAa;YACjC,OAAO;;QAGT,uEAAuE;QACvE,sEAAsE;QACtE,IAAI,CAAC,sBAAsB,QAAQ,CAAC,MAAM,WAAW,CAAC,IAAI,GAAG;YAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,CAAA,kBAAA,EAAqB,MAAM,WAAW,CAAC,IAAI,CAAA,kBAAA,CAAoB;YAEjE,OAAO;;QAGT,OAAO;IACT;IAEQ,4BAA4B,QAAkB,EAAA;QACpD,MAAM,gBAAgB,SAAS,GAAG,CAAC;QACnC,IAAI,cAAc,MAAM,KAAK,GAAG;YAC9B,OAAO,aAAa,CAAC,EAAE,CAAC,QAAQ;;QAElC,OAAO;IACT;;AA1CF,QAAA,iCAAA,GAAA"}},
    {"offset": {"line": 1767, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1771, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/retry/fixed-timeout-retry-strategy.ts"],"sourcesContent":["import {\n  DeterminewhenToRetryRequestProps,\n  RetryStrategy,\n} from './retry-strategy';\nimport {EligibilityStrategy} from './eligibility-strategy';\nimport {MomentoLoggerFactory, MomentoLogger} from '../..';\nimport {DefaultStorageEligibilityStrategy} from './storage-default-eligibility-strategy';\n\nexport interface FixedTimeoutRetryStrategyProps {\n  loggerFactory: MomentoLoggerFactory;\n  eligibilityStrategy?: EligibilityStrategy;\n\n  // Retry request after a fixed time interval (defaults to 100ms)\n  retryDelayIntervalMillis?: number;\n\n  // Number of milliseconds the client is willing to wait for response data to be received before retrying (defaults to 1000ms). After the overarching GRPC config deadlineMillis has been reached, the client will terminate the RPC with a Cancelled error.\n  responseDataReceivedTimeoutMillis?: number;\n}\n\nexport class FixedTimeoutRetryStrategy implements RetryStrategy {\n  private readonly logger: MomentoLogger;\n  private readonly eligibilityStrategy: EligibilityStrategy;\n  private readonly retryDelayIntervalMillis: number;\n  readonly responseDataReceivedTimeoutMillis: number;\n\n  constructor(props: FixedTimeoutRetryStrategyProps) {\n    this.logger = props.loggerFactory.getLogger(this);\n    this.eligibilityStrategy =\n      props.eligibilityStrategy ??\n      new DefaultStorageEligibilityStrategy(props.loggerFactory);\n    this.retryDelayIntervalMillis = props.retryDelayIntervalMillis ?? 100;\n    this.responseDataReceivedTimeoutMillis =\n      props.responseDataReceivedTimeoutMillis ?? 1000;\n  }\n\n  determineWhenToRetryRequest(\n    props: DeterminewhenToRetryRequestProps\n  ): number | null {\n    this.logger.debug(\n      `Determining whether request is eligible for retry; status code: ${props.grpcStatus.code}, request type: ${props.grpcRequest.path}, attemptNumber: ${props.attemptNumber}`\n    );\n    if (!this.eligibilityStrategy.isEligibleForRetry(props)) {\n      // null means do not retry\n      return null;\n    }\n\n    this.logger.debug(\n      `Request is eligible for retry (attempt ${props.attemptNumber}), retrying after ${this.retryDelayIntervalMillis} ms +/- jitter.`\n    );\n    // retry after a fixed time interval has passed (+/- some jitter)\n    return addJitter(this.retryDelayIntervalMillis);\n  }\n}\n\nfunction addJitter(whenToRetry: number): number {\n  return (0.2 * Math.random() + 0.9) * whenToRetry;\n}\n"],"names":[],"mappings":";;;;;AAMA,MAAA;AAaA,MAAa;IAMX,YAAY,KAAqC,CAAA;;QAC/C,IAAI,CAAC,MAAM,GAAG,MAAM,aAAa,CAAC,SAAS,CAAC,IAAI;QAChD,IAAI,CAAC,mBAAmB,GACtB,CAAA,KAAA,MAAM,mBAAmB,MAAA,QAAA,OAAA,KAAA,IAAA,KACzB,IAAI,uCAAA,iCAAiC,CAAC,MAAM,aAAa;QAC3D,IAAI,CAAC,wBAAwB,GAAG,CAAA,KAAA,MAAM,wBAAwB,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI;QAClE,IAAI,CAAC,iCAAiC,GACpC,CAAA,KAAA,MAAM,iCAAiC,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI;IAC/C;IAEA,4BACE,KAAuC,EAAA;QAEvC,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,CAAA,gEAAA,EAAmE,MAAM,UAAU,CAAC,IAAI,CAAA,gBAAA,EAAmB,MAAM,WAAW,CAAC,IAAI,CAAA,iBAAA,EAAoB,MAAM,aAAa,CAAA,CAAE;QAE5K,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,QAAQ;YACvD,0BAA0B;YAC1B,OAAO;;QAGT,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,CAAA,uCAAA,EAA0C,MAAM,aAAa,CAAA,kBAAA,EAAqB,IAAI,CAAC,wBAAwB,CAAA,eAAA,CAAiB;QAElI,iEAAiE;QACjE,OAAO,UAAU,IAAI,CAAC,wBAAwB;IAChD;;AAhCF,QAAA,yBAAA,GAAA;AAmCA,SAAS,UAAU,WAAmB;IACpC,OAAO,CAAC,MAAM,KAAK,MAAM,KAAK,GAAG,IAAI;AACvC"}},
    {"offset": {"line": 1800, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1804, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/storage-configurations.ts"],"sourcesContent":["import {MomentoLoggerFactory} from '@gomomento/sdk-core';\nimport {DefaultMomentoLoggerFactory} from './logging/default-momento-logger';\nimport {\n  StorageClientConfiguration,\n  StorageConfiguration,\n} from './storage-configuration';\nimport {\n  StaticStorageGrpcConfiguration,\n  StaticStorageTransportStrategy,\n} from './transport/storage';\nimport {FixedTimeoutRetryStrategy} from './retry/fixed-timeout-retry-strategy';\nimport {RetryStrategy} from './retry/retry-strategy';\n\nconst defaultLoggerFactory: MomentoLoggerFactory =\n  new DefaultMomentoLoggerFactory();\n\nfunction defaultRetryStrategy(\n  loggerFactory: MomentoLoggerFactory\n): RetryStrategy {\n  return new FixedTimeoutRetryStrategy({\n    loggerFactory: loggerFactory,\n  });\n}\n\n/**\n * Laptop config provides defaults suitable for a medium-to-high-latency dev environment.\n * @export\n * @class Laptop\n */\nexport class Laptop extends StorageClientConfiguration {\n  /**\n   * Provides the latest recommended configuration for a laptop development environment.  NOTE: this configuration may\n   * change in future releases to take advantage of improvements we identify for default configurations.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {StorageConfiguration}\n   */\n  static latest(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): StorageConfiguration {\n    return new StorageClientConfiguration({\n      loggerFactory: loggerFactory,\n      transportStrategy: new StaticStorageTransportStrategy({\n        grpcConfiguration: new StaticStorageGrpcConfiguration({\n          deadlineMillis: 5000,\n        }),\n      }),\n      retryStrategy: defaultRetryStrategy(loggerFactory),\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA;AACA,MAAA;AAIA,MAAA;AAIA,MAAA;AAGA,MAAM,uBACJ,IAAI,yBAAA,2BAA2B;AAEjC,SAAS,qBACP,aAAmC;IAEnC,OAAO,IAAI,+BAAA,yBAAyB,CAAC;QACnC,eAAe;;AAEnB;AAEA;;;;IAKA,MAAa,eAAe,wBAAA,0BAA0B;IACpD;;;;;QAMA,OAAO,OACL,gBAAsC,oBAAoB,EAAA;QAE1D,OAAO,IAAI,wBAAA,0BAA0B,CAAC;YACpC,eAAe;YACf,mBAAmB,IAAI,UAAA,8BAA8B,CAAC;gBACpD,mBAAmB,IAAI,UAAA,8BAA8B,CAAC;oBACpD,gBAAgB;;;YAGpB,eAAe,qBAAqB;;IAExC;;AAnBF,QAAA,MAAA,GAAA"}},
    {"offset": {"line": 1842, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1846, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/leaderboard-configuration.ts"],"sourcesContent":["import {MomentoLoggerFactory, TransportStrategy} from '../';\nimport {Middleware} from './middleware/middleware';\n\n/**\n * Configuration options for Momento LeaderboardClient\n *\n * @export\n * @interface LeaderboardConfiguration\n */\nexport interface LeaderboardConfiguration {\n  /**\n   * @returns {MomentoLoggerFactory} the current configuration options for logging verbosity and format\n   */\n  getLoggerFactory(): MomentoLoggerFactory;\n\n  /**\n   * @returns {TransportStrategy} the current configuration options for wire interactions with the Momento service\n   */\n  getTransportStrategy(): TransportStrategy;\n\n  /**\n   * Convenience copy constructor that updates the client-side timeout setting in the TransportStrategy\n   * @param {number} clientTimeoutMillis\n   * @returns {LeaderboardConfiguration} a new Configuration object with its TransportStrategy updated to use the specified client timeout\n   */\n  withClientTimeoutMillis(\n    clientTimeoutMillis: number\n  ): LeaderboardConfiguration;\n\n  /**\n   * Copy constructor for overriding TransportStrategy\n   * @param {TransportStrategy} transportStrategy\n   * @returns {Configuration} a new Configuration object with the specified TransportStrategy\n   */\n  withTransportStrategy(\n    transportStrategy: TransportStrategy\n  ): LeaderboardConfiguration;\n\n  /**\n   * @returns {boolean} Configures whether the client should return a Momento Error object or throw an exception when an\n   * error occurs. By default, this is set to false, and the client will return a Momento Error object on errors. Set it\n   * to true if you prefer for exceptions to be thrown.\n   */\n  getThrowOnErrors(): boolean;\n\n  /**\n   * Copy constructor for configuring whether the client should return a Momento Error object or throw an exception when an\n   * error occurs. By default, this is set to false, and the client will return a Momento Error object on errors. Set it\n   * to true if you prefer for exceptions to be thrown.\n   * @param {boolean} throwOnErrors\n   * @returns {Configuration} a new Configuration object with the specified throwOnErrors setting\n   */\n  withThrowOnErrors(throwOnErrors: boolean): LeaderboardConfiguration;\n\n  /**\n   * @returns {Middleware[]} the middleware functions that will wrap each request\n   */\n  getMiddlewares(): Middleware[];\n\n  /**\n   * Copy constructor for overriding Middlewares\n   * @param {Middleware[]} middlewares\n   * @returns {Configuration} a new Configuration object with the specified Middlewares\n   */\n  withMiddlewares(middlewares: Middleware[]): LeaderboardConfiguration;\n\n  /**\n   * Copy constructor that adds a single middleware to the existing middlewares\n   * @param {Middleware} middleware\n   * @returns {Configuration} a new Configuration object with the specified Middleware appended to the list of existing Middlewares\n   */\n  addMiddleware(middleware: Middleware): LeaderboardConfiguration;\n}\n\nexport interface LeaderboardConfigurationProps {\n  /**\n   * Configures logging verbosity and format\n   */\n  loggerFactory: MomentoLoggerFactory;\n  /**\n   * Configures low-level options for network interactions with the Momento service\n   */\n  transportStrategy: TransportStrategy;\n\n  /**\n   * Configures whether the client should return a Momento Error object or throw an exception when an error occurs.\n   */\n  throwOnErrors: boolean;\n\n  /**\n   * Configures middleware functions that will wrap each request\n   */\n  middlewares: Middleware[];\n}\n\nexport class LeaderboardClientConfiguration\n  implements LeaderboardConfiguration\n{\n  private readonly loggerFactory: MomentoLoggerFactory;\n  private readonly transportStrategy: TransportStrategy;\n  private readonly throwOnErrors: boolean;\n  private readonly middlewares: Middleware[];\n\n  constructor(props: LeaderboardConfigurationProps) {\n    this.loggerFactory = props.loggerFactory;\n    this.transportStrategy = props.transportStrategy;\n    this.throwOnErrors = props.throwOnErrors;\n    this.middlewares = props.middlewares;\n  }\n\n  getLoggerFactory(): MomentoLoggerFactory {\n    return this.loggerFactory;\n  }\n\n  getTransportStrategy(): TransportStrategy {\n    return this.transportStrategy;\n  }\n\n  withClientTimeoutMillis(\n    clientTimeoutMillis: number\n  ): LeaderboardConfiguration {\n    return new LeaderboardClientConfiguration({\n      loggerFactory: this.loggerFactory,\n      transportStrategy:\n        this.transportStrategy.withClientTimeoutMillis(clientTimeoutMillis),\n      throwOnErrors: this.throwOnErrors,\n      middlewares: this.middlewares,\n    });\n  }\n\n  withTransportStrategy(\n    transportStrategy: TransportStrategy\n  ): LeaderboardConfiguration {\n    return new LeaderboardClientConfiguration({\n      loggerFactory: this.loggerFactory,\n      transportStrategy: transportStrategy,\n      throwOnErrors: this.throwOnErrors,\n      middlewares: this.middlewares,\n    });\n  }\n\n  getThrowOnErrors(): boolean {\n    return this.throwOnErrors;\n  }\n\n  withThrowOnErrors(throwOnErrors: boolean): LeaderboardConfiguration {\n    return new LeaderboardClientConfiguration({\n      loggerFactory: this.loggerFactory,\n      transportStrategy: this.transportStrategy,\n      throwOnErrors: throwOnErrors,\n      middlewares: this.middlewares,\n    });\n  }\n\n  getMiddlewares(): Middleware[] {\n    return this.middlewares;\n  }\n\n  withMiddlewares(middlewares: Middleware[]): LeaderboardConfiguration {\n    return new LeaderboardClientConfiguration({\n      loggerFactory: this.loggerFactory,\n      transportStrategy: this.transportStrategy,\n      middlewares: middlewares,\n      throwOnErrors: this.throwOnErrors,\n    });\n  }\n\n  addMiddleware(middleware: Middleware): LeaderboardConfiguration {\n    return new LeaderboardClientConfiguration({\n      loggerFactory: this.loggerFactory,\n      transportStrategy: this.transportStrategy,\n      middlewares: [middleware, ...this.middlewares],\n      throwOnErrors: this.throwOnErrors,\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;AA+FA,MAAa;IAQX,YAAY,KAAoC,CAAA;QAC9C,IAAI,CAAC,aAAa,GAAG,MAAM,aAAa;QACxC,IAAI,CAAC,iBAAiB,GAAG,MAAM,iBAAiB;QAChD,IAAI,CAAC,aAAa,GAAG,MAAM,aAAa;QACxC,IAAI,CAAC,WAAW,GAAG,MAAM,WAAW;IACtC;IAEA,mBAAgB;QACd,OAAO,IAAI,CAAC,aAAa;IAC3B;IAEA,uBAAoB;QAClB,OAAO,IAAI,CAAC,iBAAiB;IAC/B;IAEA,wBACE,mBAA2B,EAAA;QAE3B,OAAO,IAAI,+BAA+B;YACxC,eAAe,IAAI,CAAC,aAAa;YACjC,mBACE,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC;YACjD,eAAe,IAAI,CAAC,aAAa;YACjC,aAAa,IAAI,CAAC,WAAW;;IAEjC;IAEA,sBACE,iBAAoC,EAAA;QAEpC,OAAO,IAAI,+BAA+B;YACxC,eAAe,IAAI,CAAC,aAAa;YACjC,mBAAmB;YACnB,eAAe,IAAI,CAAC,aAAa;YACjC,aAAa,IAAI,CAAC,WAAW;;IAEjC;IAEA,mBAAgB;QACd,OAAO,IAAI,CAAC,aAAa;IAC3B;IAEA,kBAAkB,aAAsB,EAAA;QACtC,OAAO,IAAI,+BAA+B;YACxC,eAAe,IAAI,CAAC,aAAa;YACjC,mBAAmB,IAAI,CAAC,iBAAiB;YACzC,eAAe;YACf,aAAa,IAAI,CAAC,WAAW;;IAEjC;IAEA,iBAAc;QACZ,OAAO,IAAI,CAAC,WAAW;IACzB;IAEA,gBAAgB,WAAyB,EAAA;QACvC,OAAO,IAAI,+BAA+B;YACxC,eAAe,IAAI,CAAC,aAAa;YACjC,mBAAmB,IAAI,CAAC,iBAAiB;YACzC,aAAa;YACb,eAAe,IAAI,CAAC,aAAa;;IAErC;IAEA,cAAc,UAAsB,EAAA;QAClC,OAAO,IAAI,+BAA+B;YACxC,eAAe,IAAI,CAAC,aAAa;YACjC,mBAAmB,IAAI,CAAC,iBAAiB;YACzC,aAAa;gBAAC;mBAAe,IAAI,CAAC,WAAW;aAAC;YAC9C,eAAe,IAAI,CAAC,aAAa;;IAErC;;AA/EF,QAAA,8BAAA,GAAA"}},
    {"offset": {"line": 1915, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1919, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/leaderboard-configurations.ts"],"sourcesContent":["import {\n  LeaderboardClientConfiguration,\n  LeaderboardConfiguration,\n} from './leaderboard-configuration';\nimport {MomentoLoggerFactory} from '@gomomento/sdk-core';\n\nimport {\n  GrpcConfiguration,\n  StaticGrpcConfiguration,\n  StaticTransportStrategy,\n  TransportStrategy,\n} from '../';\nimport {DefaultMomentoLoggerFactory} from './logging/default-momento-logger';\nimport {Middleware} from './middleware/middleware';\n\n// 4 minutes.  We want to remain comfortably underneath the idle timeout for AWS NLB, which is 350s.\nconst defaultMaxIdleMillis = 4 * 60 * 1_000;\nconst defaultMaxSessionMemoryMb = 256;\nconst defaultLoggerFactory: MomentoLoggerFactory =\n  new DefaultMomentoLoggerFactory();\nconst defaultMiddlewares: Middleware[] = [];\n\n/**\n * Laptop config provides defaults suitable for a medium-to-high-latency dev environment.\n * @export\n * @class Laptop\n */\nexport class Laptop extends LeaderboardClientConfiguration {\n  /**\n   * Provides the latest recommended configuration for a laptop development environment.  NOTE: this configuration may\n   * change in future releases to take advantage of improvements we identify for default configurations.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {LeaderboardConfiguration}\n   */\n  static latest(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): LeaderboardConfiguration {\n    return Laptop.v1(loggerFactory);\n  }\n\n  /**\n   * Provides v1 recommended configuration for a laptop development environment.  This configuration is guaranteed not\n   * to change in future releases of the Momento web SDK.\n   * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]\n   * @returns {LeaderboardConfiguration}\n   */\n  static v1(\n    loggerFactory: MomentoLoggerFactory = defaultLoggerFactory\n  ): LeaderboardConfiguration {\n    const deadlineMillis = 15000;\n    const grpcConfig: GrpcConfiguration = new StaticGrpcConfiguration({\n      deadlineMillis: deadlineMillis,\n      maxSessionMemoryMb: defaultMaxSessionMemoryMb,\n      keepAlivePermitWithoutCalls: 1,\n      keepAliveTimeMs: 5000,\n      keepAliveTimeoutMs: 1000,\n    });\n    const transportStrategy: TransportStrategy = new StaticTransportStrategy({\n      grpcConfiguration: grpcConfig,\n      maxIdleMillis: defaultMaxIdleMillis,\n    });\n    return new Laptop({\n      loggerFactory: loggerFactory,\n      transportStrategy: transportStrategy,\n      throwOnErrors: false,\n      middlewares: defaultMiddlewares,\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA;AAMA,MAAA;AAMA,MAAA;AAGA,oGAAoG;AACpG,MAAM,uBAAuB,IAAI,KAAK;AACtC,MAAM,4BAA4B;AAClC,MAAM,uBACJ,IAAI,yBAAA,2BAA2B;AACjC,MAAM,qBAAmC,EAAE;AAE3C;;;;IAKA,MAAa,eAAe,4BAAA,8BAA8B;IACxD;;;;;QAMA,OAAO,OACL,gBAAsC,oBAAoB,EAAA;QAE1D,OAAO,OAAO,EAAE,CAAC;IACnB;IAEA;;;;;QAMA,OAAO,GACL,gBAAsC,oBAAoB,EAAA;QAE1D,MAAM,iBAAiB;QACvB,MAAM,aAAgC,IAAI,IAAA,uBAAuB,CAAC;YAChE,gBAAgB;YAChB,oBAAoB;YACpB,6BAA6B;YAC7B,iBAAiB;YACjB,oBAAoB;;QAEtB,MAAM,oBAAuC,IAAI,IAAA,uBAAuB,CAAC;YACvE,mBAAmB;YACnB,eAAe;;QAEjB,OAAO,IAAI,OAAO;YAChB,eAAe;YACf,mBAAmB;YACnB,eAAe;YACf,aAAa;;IAEjB;;AAxCF,QAAA,MAAA,GAAA"}},
    {"offset": {"line": 1972, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1976, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/middleware/request-logging-middleware.ts"],"sourcesContent":["import {\n  Middleware,\n  MiddlewareMessage,\n  MiddlewareMetadata,\n  MiddlewareRequestHandler,\n  MiddlewareStatus,\n} from './middleware';\nimport {\n  DefaultMomentoLoggerFactory,\n  MomentoLogger,\n  MomentoLoggerFactory,\n} from '../..';\n\nclass LoggingMiddlewareRequestHandler implements MiddlewareRequestHandler {\n  private readonly logger: MomentoLogger;\n  private readonly requestId: string;\n  constructor(logger: MomentoLogger, requestId: string) {\n    this.logger = logger;\n    this.requestId = requestId;\n  }\n\n  onRequestMetadata(metadata: MiddlewareMetadata): Promise<MiddlewareMetadata> {\n    this.logger.info(\n      JSON.stringify({\n        event: 'onRequestMetadata',\n        requestId: this.requestId,\n        ...metadata.toJsonObject(),\n      })\n    );\n    return Promise.resolve(metadata);\n  }\n  onRequestBody(request: MiddlewareMessage): Promise<MiddlewareMessage> {\n    this.logger.info(\n      JSON.stringify({\n        event: 'onRequestBody',\n        requestId: this.requestId,\n        requestSize: request.messageLength(),\n        ...request.toLogFormat(),\n      })\n    );\n    return Promise.resolve(request);\n  }\n\n  onResponseMetadata(\n    metadata: MiddlewareMetadata\n  ): Promise<MiddlewareMetadata> {\n    this.logger.info(\n      JSON.stringify({\n        event: 'onResponseMetadata',\n        requestId: this.requestId,\n        ...metadata.toJsonObject(),\n      })\n    );\n    return Promise.resolve(metadata);\n  }\n\n  onResponseBody(\n    response: MiddlewareMessage | null\n  ): Promise<MiddlewareMessage | null> {\n    this.logger.info(\n      JSON.stringify({\n        event: 'onResponseBody',\n        requestId: this.requestId,\n        ...response?._grpcMessage?.toObject(),\n      })\n    );\n    return Promise.resolve(response);\n  }\n\n  onResponseStatus(status: MiddlewareStatus): Promise<MiddlewareStatus> {\n    this.logger.info(\n      JSON.stringify({\n        event: 'onResponseStatus',\n        requestId: this.requestId,\n        status: status.code(),\n      })\n    );\n    return Promise.resolve(status);\n  }\n}\n\n/**\n * This middleware implements per-request logging which can be used for\n * debugging.\n *\n * WARNING: enabling this middleware may have minor performance implications,\n * so enable with caution.\n *\n * In order for this middleware to produce output you will need to have\n * set up your {Configuration} with a {MomentoLoggerFactory} instance that\n * is configured to log at DEBUG level or lower.  See `advanced.ts` in the\n * examples directory for an example of how to set up your {Configuration} to\n * enable this middleware.\n */\nexport class RequestLoggingMiddleware implements Middleware {\n  private readonly logger: MomentoLogger;\n  private nextRequestId: number;\n  constructor(\n    loggerFactory: MomentoLoggerFactory = new DefaultMomentoLoggerFactory()\n  ) {\n    this.logger = loggerFactory.getLogger(this);\n    this.nextRequestId = 0;\n  }\n\n  onNewRequest(): MiddlewareRequestHandler {\n    this.nextRequestId++;\n    return new LoggingMiddlewareRequestHandler(\n      this.logger,\n      this.nextRequestId.toString()\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AAOA,MAAA;AAMA,MAAM;IAGJ,YAAY,MAAqB,EAAE,SAAiB,CAAA;QAClD,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,SAAS,GAAG;IACnB;IAEA,kBAAkB,QAA4B,EAAA;QAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,KAAK,SAAS,CAAC;YACb,OAAO;YACP,WAAW,IAAI,CAAC,SAAS;YACzB,GAAG,SAAS,YAAY,EAAE;;QAG9B,OAAO,QAAQ,OAAO,CAAC;IACzB;IACA,cAAc,OAA0B,EAAA;QACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,KAAK,SAAS,CAAC;YACb,OAAO;YACP,WAAW,IAAI,CAAC,SAAS;YACzB,aAAa,QAAQ,aAAa;YAClC,GAAG,QAAQ,WAAW,EAAE;;QAG5B,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,mBACE,QAA4B,EAAA;QAE5B,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,KAAK,SAAS,CAAC;YACb,OAAO;YACP,WAAW,IAAI,CAAC,SAAS;YACzB,GAAG,SAAS,YAAY,EAAE;;QAG9B,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,eACE,QAAkC,EAAA;;QAElC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,KAAK,SAAS,CAAC;YACb,OAAO;YACP,WAAW,IAAI,CAAC,SAAS;YACzB,GAAG,CAAA,KAAA,aAAQ,QAAR,aAAQ,KAAA,IAAA,KAAA,IAAR,SAAU,YAAY,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,QAAQ,EAAE;;QAGzC,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,iBAAiB,MAAwB,EAAA;QACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,KAAK,SAAS,CAAC;YACb,OAAO;YACP,WAAW,IAAI,CAAC,SAAS;YACzB,QAAQ,OAAO,IAAI;;QAGvB,OAAO,QAAQ,OAAO,CAAC;IACzB;;AAGF;;;;;;;;;;;;IAaA,MAAa;IAGX,YACE,gBAAsC,IAAI,IAAA,2BAA2B,EAAE,CAAA;QAEvE,IAAI,CAAC,MAAM,GAAG,cAAc,SAAS,CAAC,IAAI;QAC1C,IAAI,CAAC,aAAa,GAAG;IACvB;IAEA,eAAY;QACV,IAAI,CAAC,aAAa;QAClB,OAAO,IAAI,gCACT,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,aAAa,CAAC,QAAQ;IAE/B;;AAhBF,QAAA,wBAAA,GAAA"}},
    {"offset": {"line": 2053, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2057, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/middleware/impl/experimental-metrics-middleware.ts"],"sourcesContent":["import {\n  Middleware,\n  MiddlewareMessage,\n  MiddlewareMetadata,\n  MiddlewareRequestHandler,\n  MiddlewareRequestHandlerContext,\n  MiddlewareStatus,\n} from '../middleware';\nimport {MomentoLogger, MomentoLoggerFactory} from '@gomomento/sdk-core';\nimport {CONNECTION_ID_KEY} from '../../../internal/cache-data-client';\n\nconst FIELD_NAMES: Array<string> = [\n  'numActiveRequestsAtStart',\n  'numActiveRequestsAtFinish',\n  'requestType',\n  'status',\n  'startTime',\n  'requestBodyTime',\n  'endTime',\n  'duration',\n  'requestSize',\n  'responseSize',\n  'connectionID',\n];\n\nexport interface ExperimentalRequestMetrics {\n  momento: {\n    /**\n     * number of requests active at the start of the request\n     */\n    numActiveRequestsAtStart: number;\n    /**\n     * number of requests active at the finish of the request (including the request itself)\n     */\n    numActiveRequestsAtFinish: number;\n    /**\n     * The generated grpc object type of the request\n     */\n    requestType: string;\n    /**\n     * The grpc status code of the response\n     */\n    status: number;\n    /**\n     * The time the request started (millis since epoch)\n     */\n    startTime: number;\n    /**\n     * The time the body of the request was available to the grpc library (millis since epoch)\n     */\n    requestBodyTime: number;\n    /**\n     * The time the request completed (millis since epoch)\n     */\n    endTime: number;\n    /**\n     * The duration of the request (in millis)\n     */\n    duration: number;\n    /**\n     * The size of the request body in bytes\n     */\n    requestSize: number;\n    /**\n     * The size of the response body in bytes\n     */\n    responseSize: number;\n    /**\n     * The ID of the specific connection that made the request\n     */\n    connectionID: string;\n  };\n}\n\nexport abstract class ExperimentalMetricsMiddlewareRequestHandler\n  implements MiddlewareRequestHandler\n{\n  protected readonly parent: ExperimentalMetricsMiddleware;\n  protected readonly logger: MomentoLogger;\n  private readonly connectionID: string;\n\n  private readonly numActiveRequestsAtStart: number;\n  private readonly startTime: number;\n  private requestBodyTime: number;\n  private requestType: string;\n  private requestSize: number;\n  private responseStatusCode: number;\n  private responseSize: number;\n\n  private receivedResponseBody: boolean;\n  private receivedResponseStatus: boolean;\n\n  constructor(\n    parent: ExperimentalMetricsMiddleware,\n    logger: MomentoLogger,\n    context: MiddlewareRequestHandlerContext\n  ) {\n    this.parent = parent;\n    this.logger = logger;\n    this.connectionID = context[CONNECTION_ID_KEY];\n\n    this.numActiveRequestsAtStart = parent.incrementActiveRequestCount();\n    this.startTime = new Date().getTime();\n\n    this.receivedResponseBody = false;\n    this.receivedResponseStatus = false;\n  }\n\n  abstract emitMetrics(metrics: ExperimentalRequestMetrics): Promise<void>;\n\n  onRequestBody(request: MiddlewareMessage): Promise<MiddlewareMessage> {\n    this.requestSize = request.messageLength();\n    this.requestType = request._grpcMessage.constructor.name;\n    this.requestBodyTime = new Date().getTime();\n    return Promise.resolve(request);\n  }\n\n  onRequestMetadata(metadata: MiddlewareMetadata): Promise<MiddlewareMetadata> {\n    return Promise.resolve(metadata);\n  }\n\n  onResponseBody(\n    response: MiddlewareMessage | null\n  ): Promise<MiddlewareMessage | null> {\n    if (response !== null) {\n      this.responseSize = response.messageLength();\n    } else {\n      this.responseSize = 0;\n    }\n    this.receivedResponseBody = true;\n    if (this.done()) this.recordMetrics();\n    return Promise.resolve(response);\n  }\n\n  onResponseMetadata(\n    metadata: MiddlewareMetadata\n  ): Promise<MiddlewareMetadata> {\n    return Promise.resolve(metadata);\n  }\n\n  onResponseStatus(status: MiddlewareStatus): Promise<MiddlewareStatus> {\n    this.receivedResponseStatus = true;\n    this.responseStatusCode = status.code();\n    if (this.done()) this.recordMetrics();\n    return Promise.resolve(status);\n  }\n\n  private done(): boolean {\n    return this.receivedResponseBody && this.receivedResponseStatus;\n  }\n\n  protected recordMetrics(): void {\n    const endTime = new Date().getTime();\n    const metrics: ExperimentalRequestMetrics = {\n      momento: {\n        numActiveRequestsAtStart: this.numActiveRequestsAtStart,\n        numActiveRequestsAtFinish: this.parent.activeRequestCount(),\n        requestType: this.requestType,\n        status: this.responseStatusCode,\n        startTime: this.startTime,\n        requestBodyTime: this.requestBodyTime,\n        endTime: endTime,\n        duration: endTime - this.startTime,\n        requestSize: this.requestSize,\n        responseSize: this.responseSize,\n        connectionID: this.connectionID,\n      },\n    };\n    this.emitMetrics(metrics).catch(e =>\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      this.logger.error(`An error occurred when trying to emit metrics: ${e}`)\n    );\n    this.parent.decrementActiveRequestCount();\n  }\n}\n\n/**\n * This middleware enables per-request client-side metrics.  This is an abstract\n * class that does not route the metrics to a specific destination; concrete subclasses\n * may store the metrics as they see fit.\n *\n * The metrics format is currently considered experimental; in a future release,\n * once the format is considered stable, this class will be renamed to remove\n * the Experimental prefix.\n *\n * WARNING: enabling this middleware may have minor performance implications,\n * so enable with caution.\n *\n * See `advanced.ts` in the examples directory for an example of how to set up\n * your {Configuration} to enable this middleware.\n */\nexport abstract class ExperimentalMetricsMiddleware implements Middleware {\n  private numActiveRequests = 0;\n  protected readonly logger: MomentoLogger;\n\n  private readonly requestHandlerFactoryFn: (\n    parent: ExperimentalMetricsMiddleware,\n    logger: MomentoLogger,\n    context: MiddlewareRequestHandlerContext\n  ) => MiddlewareRequestHandler;\n\n  constructor(\n    loggerFactory: MomentoLoggerFactory,\n    requestHandlerFactoryFn: (\n      parent: ExperimentalMetricsMiddleware,\n      logger: MomentoLogger,\n      context: MiddlewareRequestHandlerContext\n    ) => MiddlewareRequestHandler\n  ) {\n    this.logger = loggerFactory.getLogger(this);\n    this.requestHandlerFactoryFn = requestHandlerFactoryFn;\n  }\n\n  fieldNames(): Array<string> {\n    return FIELD_NAMES;\n  }\n\n  incrementActiveRequestCount(): number {\n    return ++this.numActiveRequests;\n  }\n\n  activeRequestCount(): number {\n    return this.numActiveRequests;\n  }\n\n  decrementActiveRequestCount(): void {\n    --this.numActiveRequests;\n  }\n\n  onNewRequest(\n    context: MiddlewareRequestHandlerContext\n  ): MiddlewareRequestHandler {\n    return this.requestHandlerFactoryFn(this, this.logger, context);\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2177, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2181, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/middleware/experimental-metrics-csv-middleware.ts"],"sourcesContent":["import * as fs from 'fs';\nimport {MomentoLogger, MomentoLoggerFactory} from '../../';\nimport {\n  ExperimentalMetricsMiddleware,\n  ExperimentalMetricsMiddlewareRequestHandler,\n  ExperimentalRequestMetrics,\n} from './impl/experimental-metrics-middleware';\nimport {MiddlewareRequestHandlerContext} from './middleware';\n\nclass ExperimentalMetricsCsvMiddlewareRequestHandler extends ExperimentalMetricsMiddlewareRequestHandler {\n  private readonly csvPath: string;\n\n  constructor(\n    parent: ExperimentalMetricsMiddleware,\n    logger: MomentoLogger,\n    context: MiddlewareRequestHandlerContext,\n    csvPath: string\n  ) {\n    super(parent, logger, context);\n    this.csvPath = csvPath;\n  }\n\n  async emitMetrics(metrics: ExperimentalRequestMetrics): Promise<void> {\n    const csvRow = [\n      metrics.momento.numActiveRequestsAtStart,\n      metrics.momento.numActiveRequestsAtFinish,\n      metrics.momento.requestType,\n      metrics.momento.status,\n      metrics.momento.startTime,\n      metrics.momento.requestBodyTime,\n      metrics.momento.endTime,\n      metrics.momento.duration,\n      metrics.momento.requestSize,\n      metrics.momento.responseSize,\n      metrics.momento.connectionID,\n    ].join(',');\n    try {\n      await fs.promises.appendFile(this.csvPath, `${csvRow}\\n`);\n    } catch (err) {\n      if (err !== null) {\n        this.logger.error(\n          'Error writing to metrics csv file at path: %s : %s',\n          this.csvPath,\n          err\n        );\n      }\n    }\n  }\n}\n\n/**\n * This middleware enables per-request client-side metrics.  Metrics for each\n * request will be written to a CSV file; this file can be analyzed or shared\n * with Momento to diagnose performance issues.\n *\n * The metrics format is currently considered experimental; in a future release,\n * once the format is considered stable, this class will be renamed to remove\n * the Experimental prefix.\n *\n * WARNING: enabling this middleware may have minor performance implications,\n * so enable with caution.\n *\n * WARNING: depending on your request volume, the CSV file size may grow quickly;\n * neither sampling nor file compression / rotation are included at this time\n * (though they may be added in the future).\n *\n * See `advanced.ts` in the examples directory for an example of how to set up\n * your {Configuration} to enable this middleware.\n */\nexport class ExperimentalMetricsCsvMiddleware extends ExperimentalMetricsMiddleware {\n  static numActiveRequests = 0;\n\n  private readonly csvPath: string;\n\n  constructor(csvPath: string, loggerFactory: MomentoLoggerFactory) {\n    super(\n      loggerFactory,\n      (p, l, c) =>\n        new ExperimentalMetricsCsvMiddlewareRequestHandler(p, l, c, csvPath)\n    );\n    this.csvPath = csvPath;\n    fs.writeFileSync(this.csvPath, `${this.fieldNames().join(',')}\\n`);\n  }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA;AAEA,MAAA;AAOA,MAAM,uDAAuD,kCAAA,2CAA2C;IAGtG,YACE,MAAqC,EACrC,MAAqB,EACrB,OAAwC,EACxC,OAAe,CAAA;QAEf,KAAK,CAAC,QAAQ,QAAQ;QACtB,IAAI,CAAC,OAAO,GAAG;IACjB;IAEA,MAAM,YAAY,OAAmC,EAAA;QACnD,MAAM,SAAS;YACb,QAAQ,OAAO,CAAC,wBAAwB;YACxC,QAAQ,OAAO,CAAC,yBAAyB;YACzC,QAAQ,OAAO,CAAC,WAAW;YAC3B,QAAQ,OAAO,CAAC,MAAM;YACtB,QAAQ,OAAO,CAAC,SAAS;YACzB,QAAQ,OAAO,CAAC,eAAe;YAC/B,QAAQ,OAAO,CAAC,OAAO;YACvB,QAAQ,OAAO,CAAC,QAAQ;YACxB,QAAQ,OAAO,CAAC,WAAW;YAC3B,QAAQ,OAAO,CAAC,YAAY;YAC5B,QAAQ,OAAO,CAAC,YAAY;SAC7B,CAAC,IAAI,CAAC;QACP,IAAI;YACF,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA,EAAG,OAAM,EAAA,CAAI;UACxD,OAAO,KAAK;YACZ,IAAI,QAAQ,MAAM;gBAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,sDACA,IAAI,CAAC,OAAO,EACZ;;;IAIR;;AAGF;;;;;;;;;;;;;;;;;;IAmBA,MAAa,yCAAyC,kCAAA,6BAA6B;IAKjF,YAAY,OAAe,EAAE,aAAmC,CAAA;QAC9D,KAAK,CACH,eACA,CAAC,GAAG,GAAG,IACL,IAAI,+CAA+C,GAAG,GAAG,GAAG;QAEhE,IAAI,CAAC,OAAO,GAAG;QACf,GAAG,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA,EAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAI,EAAA,CAAI;IACnE;;AAbF,QAAA,gCAAA,GAAA;AACS,iCAAA,iBAAiB,GAAG"}},
    {"offset": {"line": 2243, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2247, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/middleware/experimental-metrics-logging-middleware.ts"],"sourcesContent":["import {MomentoLogger, MomentoLoggerFactory} from '../../';\nimport {\n  ExperimentalMetricsMiddleware,\n  ExperimentalMetricsMiddlewareRequestHandler,\n  ExperimentalRequestMetrics,\n} from './impl/experimental-metrics-middleware';\nimport {MiddlewareRequestHandlerContext} from './middleware';\n\nclass ExperimentalMetricsLoggingMiddlewareRequestHandler extends ExperimentalMetricsMiddlewareRequestHandler {\n  constructor(\n    parent: ExperimentalMetricsMiddleware,\n    logger: MomentoLogger,\n    context: MiddlewareRequestHandlerContext\n  ) {\n    super(parent, logger, context);\n  }\n\n  emitMetrics(metrics: ExperimentalRequestMetrics): Promise<void> {\n    this.logger.info(JSON.stringify(metrics));\n    return Promise.resolve();\n  }\n}\n\n/**\n * This middleware enables per-request client-side metrics.  Metrics for each\n * request will be written to logs; the log data can be analyzed or shared\n * with Momento to diagnose performance issues.\n *\n * The metrics format is currently considered experimental; in a future release,\n * once the format is considered stable, this class will be renamed to remove\n * the Experimental prefix.\n *\n * It also enables regular logging of congestion in the node event loop. Once\n * per second it will output the event loop utilization ratio, as well as stats\n * about the event loop delay, measured in 20ms increments.\n *\n * WARNING: enabling this middleware may have minor performance implications,\n * so enable with caution.\n *\n * WARNING: depending on your request volume, this middleware will produce a high\n * volume of log output. If you are writing logs directly to local disk, be aware\n * of disk usage and make sure you have log rotation / compression enabled via a\n * tool such as `logrotate`.\n *\n * See `advanced.ts` in the examples directory for an example of how to set up\n * your {Configuration} to enable this middleware.\n */\nexport class ExperimentalMetricsLoggingMiddleware extends ExperimentalMetricsMiddleware {\n  constructor(loggerFactory: MomentoLoggerFactory) {\n    super(\n      loggerFactory,\n      (p, l, c) =>\n        new ExperimentalMetricsLoggingMiddlewareRequestHandler(p, l, c)\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA;AAOA,MAAM,2DAA2D,kCAAA,2CAA2C;IAC1G,YACE,MAAqC,EACrC,MAAqB,EACrB,OAAwC,CAAA;QAExC,KAAK,CAAC,QAAQ,QAAQ;IACxB;IAEA,YAAY,OAAmC,EAAA;QAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC;QAChC,OAAO,QAAQ,OAAO;IACxB;;AAGF;;;;;;;;;;;;;;;;;;;;;;;IAwBA,MAAa,6CAA6C,kCAAA,6BAA6B;IACrF,YAAY,aAAmC,CAAA;QAC7C,KAAK,CACH,eACA,CAAC,GAAG,GAAG,IACL,IAAI,mDAAmD,GAAG,GAAG;IAEnE;;AAPF,QAAA,oCAAA,GAAA"}},
    {"offset": {"line": 2291, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2295, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/middleware/experimental-active-request-count-middleware.ts"],"sourcesContent":["import {MomentoLogger, MomentoLoggerFactory} from '../../';\nimport {MiddlewareRequestHandlerContext} from './middleware';\nimport {\n  ExperimentalMetricsMiddleware,\n  ExperimentalMetricsMiddlewareRequestHandler,\n  ExperimentalRequestMetrics,\n} from './impl/experimental-metrics-middleware';\n\nclass ExperimentalActiveRequestCountLoggingMiddlewareRequestHandler extends ExperimentalMetricsMiddlewareRequestHandler {\n  constructor(\n    parent: ExperimentalMetricsMiddleware,\n    logger: MomentoLogger,\n    context: MiddlewareRequestHandlerContext\n  ) {\n    super(parent, logger, context);\n  }\n\n  protected override recordMetrics(): void {\n    this.parent.decrementActiveRequestCount();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  emitMetrics(metrics: ExperimentalRequestMetrics): Promise<void> {\n    return Promise.resolve();\n  }\n}\n\n/**\n * This middleware enables a periodic task to emit the active request count every second as a JSON\n *\n * See `advanced.ts` in the examples directory for an example of how to set up\n * your {Configuration} to enable this middleware.\n */\nexport class ExperimentalActiveRequestCountLoggingMiddleware extends ExperimentalMetricsMiddleware {\n  private isLoggingStarted = false;\n  private readonly metricsLogInterval = 1000;\n  // this is typed as any because JS returns a number for intervalId but\n  // TS returns a NodeJS.Timeout.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private intervalId: any | null = null; // Store the interval ID\n\n  constructor(loggerFactory: MomentoLoggerFactory) {\n    super(\n      loggerFactory,\n      (p, l, c) =>\n        new ExperimentalActiveRequestCountLoggingMiddlewareRequestHandler(\n          p,\n          l,\n          c\n        )\n    );\n  }\n\n  init() {\n    if (!this.isLoggingStarted) {\n      this.isLoggingStarted = true;\n      this.startLogging();\n    }\n  }\n\n  private startLogging(): void {\n    this.intervalId = setInterval(() => {\n      const metrics = {\n        activeRequestCount: this.activeRequestCount(),\n        timestamp: Date.now(),\n      };\n      this.logger.info(JSON.stringify(metrics));\n    }, this.metricsLogInterval);\n  }\n\n  close() {\n    if (this.intervalId !== null) {\n      this.logger.debug('Stopping active request count metrics logging.');\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n      this.isLoggingStarted = false;\n      this.logger.debug('Active request count metrics logging stopped.');\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA;AAMA,MAAM,sEAAsE,kCAAA,2CAA2C;IACrH,YACE,MAAqC,EACrC,MAAqB,EACrB,OAAwC,CAAA;QAExC,KAAK,CAAC,QAAQ,QAAQ;IACxB;IAEmB,gBAAa;QAC9B,IAAI,CAAC,MAAM,CAAC,2BAA2B;IACzC;IAEA,6DAA6D;IAC7D,YAAY,OAAmC,EAAA;QAC7C,OAAO,QAAQ,OAAO;IACxB;;AAGF;;;;;IAMA,MAAa,wDAAwD,kCAAA,6BAA6B;IAQhG,YAAY,aAAmC,CAAA;QAC7C,KAAK,CACH,eACA,CAAC,GAAG,GAAG,IACL,IAAI,8DACF,GACA,GACA;QAdA,IAAA,CAAA,gBAAgB,GAAG;QACV,IAAA,CAAA,kBAAkB,GAAG;QACtC,sEAAsE;QACtE,+BAA+B;QAC/B,8DAA8D;QACtD,IAAA,CAAA,UAAU,GAAe,MAAM,wBAAwB;IAY/D;IAEA,OAAI;QACF,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,IAAI,CAAC,gBAAgB,GAAG;YACxB,IAAI,CAAC,YAAY;;IAErB;IAEQ,eAAY;QAClB,IAAI,CAAC,UAAU,GAAG,YAAY;YAC5B,MAAM,UAAU;gBACd,oBAAoB,IAAI,CAAC,kBAAkB;gBAC3C,WAAW,KAAK,GAAG;;YAErB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC;QAClC,GAAG,IAAI,CAAC,kBAAkB;IAC5B;IAEA,QAAK;QACH,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM;YAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YAClB,iEAAiE;YACjE,cAAc,IAAI,CAAC,UAAU;YAC7B,IAAI,CAAC,UAAU,GAAG;YAClB,IAAI,CAAC,gBAAgB,GAAG;YACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;;IAEtB;;AA9CF,QAAA,+CAAA,GAAA"}},
    {"offset": {"line": 2355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2359, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/middleware/experimental-event-loop-perf-middleware.ts"],"sourcesContent":["import {\n  Middleware,\n  MiddlewareMessage,\n  MiddlewareMetadata,\n  MiddlewareRequestHandler,\n  MiddlewareStatus,\n} from './middleware';\nimport {\n  EventLoopUtilization,\n  monitorEventLoopDelay,\n  performance,\n} from 'perf_hooks';\nimport {MomentoLogger, MomentoLoggerFactory} from '@gomomento/sdk-core';\nimport {IntervalHistogram} from 'node:perf_hooks';\n\ninterface StateMetrics {\n  /**\n   * The proportion of time the event loop was busy over the last second.\n   */\n  eventLoopUtilization: number;\n\n  /**\n   * The average event loop delay over the last second, measured in 20ms increments.\n   */\n  eventLoopDelayMean: number;\n\n  /**\n   * The minimum event loop delay over the last second, measured in 20ms increments.\n   */\n  eventLoopDelayMin: number;\n\n  /**\n   * The 50th percentile event loop delay over the last second, measured in 20ms increments.\n   */\n  eventLoopDelayP50: number;\n\n  /**\n   * The 75th percentile event loop delay over the last second, measured in 20ms increments.\n   */\n  eventLoopDelayP75: number;\n\n  /**\n   * The 90th percentile event loop delay over the last second, measured in 20ms increments.\n   */\n  eventLoopDelayP90: number;\n\n  /**\n   * The 95th percentile event loop delay over the last second, measured in 20ms increments.\n   */\n  eventLoopDelayP95: number;\n\n  /**\n   * The 99th percentile event loop delay over the last second, measured in 20ms increments.\n   */\n  eventLoopDelayP99: number;\n\n  /**\n   * The maximum event loop delay over the last second, measured in 20ms increments.\n   */\n  eventLoopDelayMax: number;\n\n  /**\n   * The timestamp when the state metrics got recorded\n   */\n  timestamp: number;\n}\n\nclass ExperimentalEventLoopPerformanceMetricsMiddlewareRequestHandler\n  implements MiddlewareRequestHandler\n{\n  onRequestBody(request: MiddlewareMessage): Promise<MiddlewareMessage> {\n    return Promise.resolve(request);\n  }\n\n  onRequestMetadata(metadata: MiddlewareMetadata): Promise<MiddlewareMetadata> {\n    return Promise.resolve(metadata);\n  }\n\n  onResponseMetadata(\n    metadata: MiddlewareMetadata\n  ): Promise<MiddlewareMetadata> {\n    return Promise.resolve(metadata);\n  }\n\n  onResponseBody(\n    response: MiddlewareMessage | null\n  ): Promise<MiddlewareMessage | null> {\n    return Promise.resolve(response);\n  }\n\n  onResponseStatus(status: MiddlewareStatus): Promise<MiddlewareStatus> {\n    return Promise.resolve(status);\n  }\n}\n\n/**\n * This middleware enables event-loop performance metrics.It runs a periodic task specified by metricsLogInterval\n * to gather various event-loop metrics that can be correlated with the overall application's performance. This is\n * particularly helpful to analyze and correlate resource contention with higher network latencies.\n *\n * See {@link StateMetrics} for each heuristic/metric and their description.\n */\nexport class ExperimentalEventLoopPerformanceMetricsMiddleware\n  implements Middleware\n{\n  private readonly metricsLogInterval = 1000;\n  private readonly eventLoopDelayInterval = 20;\n  private eldMonitor: IntervalHistogram;\n  private elu: EventLoopUtilization;\n  private isLoggingStarted = false;\n  // this is typed as any because JS returns a number for intervalId but\n  // TS returns a NodeJS.Timeout.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private intervalId: any | null = null; // Store the interval ID\n  private readonly logger: MomentoLogger;\n\n  constructor(loggerFactory: MomentoLoggerFactory) {\n    this.logger = loggerFactory.getLogger(this);\n  }\n\n  init() {\n    if (!this.isLoggingStarted) {\n      this.isLoggingStarted = true;\n      this.startLogging();\n    }\n  }\n\n  private startLogging(): void {\n    this.eldMonitor = monitorEventLoopDelay({\n      resolution: this.eventLoopDelayInterval,\n    });\n    this.eldMonitor.enable();\n    this.elu = performance.eventLoopUtilization();\n\n    this.intervalId = setInterval(() => {\n      this.elu = performance.eventLoopUtilization(this.elu);\n      const metrics: StateMetrics = {\n        eventLoopUtilization: this.elu.utilization,\n        eventLoopDelayMean: this.eldMonitor.mean,\n        eventLoopDelayMin: this.eldMonitor.min,\n        eventLoopDelayP50: this.eldMonitor.percentile(50),\n        eventLoopDelayP75: this.eldMonitor.percentile(75),\n        eventLoopDelayP90: this.eldMonitor.percentile(90),\n        eventLoopDelayP95: this.eldMonitor.percentile(95),\n        eventLoopDelayP99: this.eldMonitor.percentile(99),\n        eventLoopDelayMax: this.eldMonitor.max,\n        timestamp: Date.now(),\n      };\n      this.logger.info(JSON.stringify(metrics));\n      this.eldMonitor.reset();\n    }, this.metricsLogInterval);\n  }\n\n  onNewRequest(): MiddlewareRequestHandler {\n    return new ExperimentalEventLoopPerformanceMetricsMiddlewareRequestHandler();\n  }\n\n  close() {\n    if (this.intervalId !== null) {\n      this.logger.debug('Stopping event loop metrics logging.');\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n      this.isLoggingStarted = false;\n      this.logger.debug('Event loop metrics logging stopped.');\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAOA,MAAA;AA4DA,MAAM;IAGJ,cAAc,OAA0B,EAAA;QACtC,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,kBAAkB,QAA4B,EAAA;QAC5C,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,mBACE,QAA4B,EAAA;QAE5B,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,eACE,QAAkC,EAAA;QAElC,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,iBAAiB,MAAwB,EAAA;QACvC,OAAO,QAAQ,OAAO,CAAC;IACzB;;AAGF;;;;;;IAOA,MAAa;IAcX,YAAY,aAAmC,CAAA;QAX9B,IAAA,CAAA,kBAAkB,GAAG;QACrB,IAAA,CAAA,sBAAsB,GAAG;QAGlC,IAAA,CAAA,gBAAgB,GAAG;QAC3B,sEAAsE;QACtE,+BAA+B;QAC/B,8DAA8D;QACtD,IAAA,CAAA,UAAU,GAAe,MAAM,wBAAwB;QAI7D,IAAI,CAAC,MAAM,GAAG,cAAc,SAAS,CAAC,IAAI;IAC5C;IAEA,OAAI;QACF,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,IAAI,CAAC,gBAAgB,GAAG;YACxB,IAAI,CAAC,YAAY;;IAErB;IAEQ,eAAY;QAClB,IAAI,CAAC,UAAU,GAAG,CAAA,GAAA,aAAA,qBAAqB,EAAC;YACtC,YAAY,IAAI,CAAC,sBAAsB;;QAEzC,IAAI,CAAC,UAAU,CAAC,MAAM;QACtB,IAAI,CAAC,GAAG,GAAG,aAAA,WAAW,CAAC,oBAAoB;QAE3C,IAAI,CAAC,UAAU,GAAG,YAAY;YAC5B,IAAI,CAAC,GAAG,GAAG,aAAA,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG;YACpD,MAAM,UAAwB;gBAC5B,sBAAsB,IAAI,CAAC,GAAG,CAAC,WAAW;gBAC1C,oBAAoB,IAAI,CAAC,UAAU,CAAC,IAAI;gBACxC,mBAAmB,IAAI,CAAC,UAAU,CAAC,GAAG;gBACtC,mBAAmB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;gBAC9C,mBAAmB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;gBAC9C,mBAAmB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;gBAC9C,mBAAmB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;gBAC9C,mBAAmB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;gBAC9C,mBAAmB,IAAI,CAAC,UAAU,CAAC,GAAG;gBACtC,WAAW,KAAK,GAAG;;YAErB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC;YAChC,IAAI,CAAC,UAAU,CAAC,KAAK;QACvB,GAAG,IAAI,CAAC,kBAAkB;IAC5B;IAEA,eAAY;QACV,OAAO,IAAI;IACb;IAEA,QAAK;QACH,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM;YAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YAClB,iEAAiE;YACjE,cAAc,IAAI,CAAC,UAAU;YAC7B,IAAI,CAAC,UAAU,GAAG;YAClB,IAAI,CAAC,gBAAgB,GAAG;YACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;;IAEtB;;AAhEF,QAAA,iDAAA,GAAA"}},
    {"offset": {"line": 2444, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2448, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/middleware/experimental-garbage-collection-middleware.ts"],"sourcesContent":["import {\n  Middleware,\n  MiddlewareMessage,\n  MiddlewareMetadata,\n  MiddlewareRequestHandler,\n  MiddlewareStatus,\n} from './middleware';\nimport {constants, PerformanceObserver} from 'perf_hooks';\nimport {MomentoLogger, MomentoLoggerFactory} from '@gomomento/sdk-core';\nimport {NodeGCPerformanceDetail} from 'node:perf_hooks';\n\nclass ExperimentalGarbageCollectionPerformanceMetricsMiddlewareRequestHandler\n  implements MiddlewareRequestHandler\n{\n  onRequestBody(request: MiddlewareMessage): Promise<MiddlewareMessage> {\n    return Promise.resolve(request);\n  }\n\n  onRequestMetadata(metadata: MiddlewareMetadata): Promise<MiddlewareMetadata> {\n    return Promise.resolve(metadata);\n  }\n\n  onResponseMetadata(\n    metadata: MiddlewareMetadata\n  ): Promise<MiddlewareMetadata> {\n    return Promise.resolve(metadata);\n  }\n\n  onResponseBody(\n    response: MiddlewareMessage | null\n  ): Promise<MiddlewareMessage | null> {\n    return Promise.resolve(response);\n  }\n\n  onResponseStatus(status: MiddlewareStatus): Promise<MiddlewareStatus> {\n    return Promise.resolve(status);\n  }\n}\n\n/**\n * This middleware enables garbage collection metrics. It subscribers to a GC performance observer provided by\n * node's built-in performance hooks, and logs key GC events. A sample log looks like:\n *\n * {\n *     \"entryType\": \"gc\",\n *     \"startTime\": 8221.879917,\n *     \"duration\": 2.8905000016093254,  <-- most important field to analyze for stop the world events, measured in milliseconds.\n *     \"detail\": {\n *         \"kind\": 4,  <-- constant for NODE_PERFORMANCE_GC_MAJOR. `MAJOR` events might point to GC events causing long delays.\n *         \"flags\": 32\n *     },\n *     \"timestamp\": 1710300309368\n * }\n */\nexport class ExperimentalGarbageCollectionPerformanceMetricsMiddleware\n  implements Middleware\n{\n  private readonly logger: MomentoLogger;\n  private readonly gcObserver: PerformanceObserver;\n\n  constructor(loggerFactory: MomentoLoggerFactory) {\n    this.logger = loggerFactory.getLogger(this);\n\n    this.gcObserver = new PerformanceObserver(items => {\n      items\n        .getEntries()\n        .filter(\n          // NODE_PERFORMANCE_GC_MAJOR indicates a major GC event such as STW (stop-the-world) pauses\n          // and other long delays. This filter is to control the volume of GC logs if we were to enable\n          // this on a customer's client.\n          // NODE_PERFORMANCE_GC_INCREMENTAL prints incremental GC stream of logs when the process is approaching\n          // max memory.\n          item => {\n            if (item.entryType !== 'gc') {\n              return false;\n            }\n            const gcPerfDetail = item.detail as NodeGCPerformanceDetail;\n            return (\n              gcPerfDetail.kind === constants.NODE_PERFORMANCE_GC_MAJOR ||\n              gcPerfDetail.kind === constants.NODE_PERFORMANCE_GC_INCREMENTAL\n            );\n          }\n        )\n        .forEach(item => {\n          const gcPerfDetail = item.detail as NodeGCPerformanceDetail;\n          const gcEventObject = {\n            entryType: item.entryType,\n            startTime: item.startTime,\n            duration: item.duration,\n            kind: gcPerfDetail.kind,\n            flags: gcPerfDetail.flags,\n            timestamp: Date.now(),\n          };\n          this.logger.info(JSON.stringify(gcEventObject));\n        });\n    });\n    this.gcObserver.observe({entryTypes: ['gc']});\n  }\n\n  onNewRequest(): MiddlewareRequestHandler {\n    return new ExperimentalGarbageCollectionPerformanceMetricsMiddlewareRequestHandler();\n  }\n\n  close() {\n    this.gcObserver.disconnect();\n  }\n}\n"],"names":[],"mappings":";;;;;AAOA,MAAA;AAIA,MAAM;IAGJ,cAAc,OAA0B,EAAA;QACtC,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,kBAAkB,QAA4B,EAAA;QAC5C,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,mBACE,QAA4B,EAAA;QAE5B,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,eACE,QAAkC,EAAA;QAElC,OAAO,QAAQ,OAAO,CAAC;IACzB;IAEA,iBAAiB,MAAwB,EAAA;QACvC,OAAO,QAAQ,OAAO,CAAC;IACzB;;AAGF;;;;;;;;;;;;;;IAeA,MAAa;IAMX,YAAY,aAAmC,CAAA;QAC7C,IAAI,CAAC,MAAM,GAAG,cAAc,SAAS,CAAC,IAAI;QAE1C,IAAI,CAAC,UAAU,GAAG,IAAI,aAAA,mBAAmB,CAAC,CAAA;YACxC,MACG,UAAU,GACV,MAAM,CACL,2FAA2F;YAC3F,8FAA8F;YAC9F,+BAA+B;YAC/B,uGAAuG;YACvG,cAAc;YACd,CAAA;gBACE,IAAI,KAAK,SAAS,KAAK,MAAM;oBAC3B,OAAO;;gBAET,MAAM,eAAe,KAAK,MAAiC;gBAC3D,OACE,aAAa,IAAI,KAAK,aAAA,SAAS,CAAC,yBAAyB,IACzD,aAAa,IAAI,KAAK,aAAA,SAAS,CAAC,+BAA+B;YAEnE,GAED,OAAO,CAAC,CAAA;gBACP,MAAM,eAAe,KAAK,MAAiC;gBAC3D,MAAM,gBAAgB;oBACpB,WAAW,KAAK,SAAS;oBACzB,WAAW,KAAK,SAAS;oBACzB,UAAU,KAAK,QAAQ;oBACvB,MAAM,aAAa,IAAI;oBACvB,OAAO,aAAa,KAAK;oBACzB,WAAW,KAAK,GAAG;;gBAErB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC;YAClC;QACJ;QACA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YAAC,YAAY;gBAAC;aAAK;QAAA;IAC7C;IAEA,eAAY;QACV,OAAO,IAAI;IACb;IAEA,QAAK;QACH,IAAI,CAAC,UAAU,CAAC,UAAU;IAC5B;;AAnDF,QAAA,yDAAA,GAAA"}},
    {"offset": {"line": 2527, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2531, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/middleware/example-async-middleware.ts"],"sourcesContent":["import {\n  Middleware,\n  MiddlewareMessage,\n  MiddlewareMetadata,\n  MiddlewareRequestHandler,\n  MiddlewareStatus,\n} from './middleware';\n\nimport {MomentoLogger, MomentoLoggerFactory} from '../..';\n\nclass ExampleAsyncMiddlewareRequestHandler implements MiddlewareRequestHandler {\n  private readonly logger: MomentoLogger;\n\n  constructor(logger: MomentoLogger) {\n    this.logger = logger;\n  }\n\n  async onRequestMetadata(\n    metadata: MiddlewareMetadata\n  ): Promise<MiddlewareMetadata> {\n    this.logger.info('ExampleAsyncMiddleware.onRequestMetadata enter');\n    await delay(500);\n    this.logger.info('ExampleAsyncMiddleware.onRequestMetadata exit');\n    return metadata;\n  }\n\n  async onRequestBody(request: MiddlewareMessage): Promise<MiddlewareMessage> {\n    this.logger.info('ExampleAsyncMiddleware.onRequestBody enter');\n    await delay(500);\n    this.logger.info('ExampleAsyncMiddleware.onRequestBody exit');\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return request;\n  }\n\n  async onResponseMetadata(\n    metadata: MiddlewareMetadata\n  ): Promise<MiddlewareMetadata> {\n    this.logger.info('ExampleAsyncMiddleware.onResponseMetadata enter');\n    await delay(500);\n    this.logger.info('ExampleAsyncMiddleware.onResponseMetadata exit');\n    return metadata;\n  }\n\n  async onResponseBody(\n    response: MiddlewareMessage | null\n  ): Promise<MiddlewareMessage | null> {\n    this.logger.info('ExampleAsyncMiddleware.onResponseBody enter');\n    await delay(500);\n    this.logger.info('ExampleAsyncMiddleware.onResponseBody exit');\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return response;\n  }\n\n  async onResponseStatus(status: MiddlewareStatus): Promise<MiddlewareStatus> {\n    this.logger.info('ExampleAsyncMiddleware.onResponseStatus enter');\n    await delay(500);\n    this.logger.info('ExampleAsyncMiddleware.onResponseStatus exit');\n    return status;\n  }\n}\n\n/**\n * This class provides an example of how users can implement a Middleware that\n * requires async calls.\n */\nexport class ExampleAsyncMiddleware implements Middleware {\n  private readonly logger: MomentoLogger;\n\n  constructor(loggerFactory: MomentoLoggerFactory) {\n    this.logger = loggerFactory.getLogger(this);\n  }\n  onNewRequest(): MiddlewareRequestHandler {\n    this.logger.info('ExampleAsyncMiddleware handling new request');\n    return new ExampleAsyncMiddlewareRequestHandler(this.logger);\n  }\n}\n\nfunction delay(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"names":[],"mappings":";;;;;AAUA,MAAM;IAGJ,YAAY,MAAqB,CAAA;QAC/B,IAAI,CAAC,MAAM,GAAG;IAChB;IAEA,MAAM,kBACJ,QAA4B,EAAA;QAE5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,MAAM,MAAM;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,OAAO;IACT;IAEA,MAAM,cAAc,OAA0B,EAAA;QAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,MAAM,MAAM;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,+DAA+D;QAC/D,OAAO;IACT;IAEA,MAAM,mBACJ,QAA4B,EAAA;QAE5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,MAAM,MAAM;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,OAAO;IACT;IAEA,MAAM,eACJ,QAAkC,EAAA;QAElC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,MAAM,MAAM;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,+DAA+D;QAC/D,OAAO;IACT;IAEA,MAAM,iBAAiB,MAAwB,EAAA;QAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,MAAM,MAAM;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,OAAO;IACT;;AAGF;;;IAIA,MAAa;IAGX,YAAY,aAAmC,CAAA;QAC7C,IAAI,CAAC,MAAM,GAAG,cAAc,SAAS,CAAC,IAAI;IAC5C;IACA,eAAY;QACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,OAAO,IAAI,qCAAqC,IAAI,CAAC,MAAM;IAC7D;;AATF,QAAA,sBAAA,GAAA;AAYA,SAAS,MAAM,EAAU;IACvB,OAAO,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;AACpD"}},
    {"offset": {"line": 2589, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2593, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/middleware/experimental-middleware-factory.ts"],"sourcesContent":["// The options interface for clarity and type safety\nimport {MomentoLoggerFactory} from '@gomomento/sdk-core';\nimport {ExperimentalEventLoopPerformanceMetricsMiddleware} from './experimental-event-loop-perf-middleware';\nimport {ExperimentalMetricsLoggingMiddleware} from './experimental-metrics-logging-middleware';\nimport {ExperimentalActiveRequestCountLoggingMiddleware} from './experimental-active-request-count-middleware';\nimport {Middleware} from './middleware';\nimport {ExperimentalMetricsCsvMiddleware} from './experimental-metrics-csv-middleware';\nimport {ExperimentalGarbageCollectionPerformanceMetricsMiddleware} from './experimental-garbage-collection-middleware';\n\ninterface ExperimentalMetricsMiddlewareOptions {\n  /**\n   * Setting this to true will emit a periodic JSON log for the event loop profile of the nodeJS process.\n   */\n  eventLoopMetricsLog?: boolean;\n  /**\n   * Setting this to true will emit a JSON log during major GC events, as observed by node's perf_hooks.\n   */\n  garbageCollectionMetricsLog?: boolean;\n  /**\n   * Setting this to true will emit a JSON log for each Momento request, that includes the client-side latency\n   * among other request profile statistics.\n   */\n  perRequestMetricsLog?: boolean;\n  /**\n   * Setting this to true will emit a periodic JSON log for active Momento request count on the nodeJS process\n   * as observed when the periodic task wakes up. This can be handy with eventLoopMetricsLog to observe the event loop\n   * delay against the maximum number of concurrent connections the application is observing.\n   */\n  activeRequestCountMetricsLog?: boolean;\n  /**\n   * Setting this to true will write a CSV recrd for each Momento request, that includes the client-side latency\n   * among other request profile statistics. The path is the file path on your disk where the CSV file is stored.\n   */\n  perRequestMetricsCSVPath?: string;\n}\n\n// Static class encapsulating the factory functionality\nexport class MiddlewareFactory {\n  public static createMetricsMiddlewares(\n    loggerFactory: MomentoLoggerFactory,\n    options: ExperimentalMetricsMiddlewareOptions\n  ): Middleware[] {\n    const middlewares: Middleware[] = [];\n\n    if (options.eventLoopMetricsLog === true) {\n      middlewares.push(\n        new ExperimentalEventLoopPerformanceMetricsMiddleware(loggerFactory)\n      );\n    }\n    if (options.perRequestMetricsCSVPath !== undefined) {\n      middlewares.push(\n        new ExperimentalMetricsCsvMiddleware(\n          options.perRequestMetricsCSVPath,\n          loggerFactory\n        )\n      );\n    } else if (options.perRequestMetricsLog === true) {\n      middlewares.push(new ExperimentalMetricsLoggingMiddleware(loggerFactory));\n    }\n\n    if (options.activeRequestCountMetricsLog === true) {\n      middlewares.push(\n        new ExperimentalActiveRequestCountLoggingMiddleware(loggerFactory)\n      );\n    }\n\n    if (options.garbageCollectionMetricsLog === true) {\n      middlewares.push(\n        new ExperimentalGarbageCollectionPerformanceMetricsMiddleware(\n          loggerFactory\n        )\n      );\n    }\n\n    return middlewares;\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA;AACA,MAAA;AACA,MAAA;AAEA,MAAA;AACA,MAAA;AA6BA,uDAAuD;AACvD,MAAa;IACJ,OAAO,yBACZ,aAAmC,EACnC,OAA6C,EAAA;QAE7C,MAAM,cAA4B,EAAE;QAEpC,IAAI,QAAQ,mBAAmB,KAAK,MAAM;YACxC,YAAY,IAAI,CACd,IAAI,0CAAA,iDAAiD,CAAC;;QAG1D,IAAI,QAAQ,wBAAwB,KAAK,WAAW;YAClD,YAAY,IAAI,CACd,IAAI,sCAAA,gCAAgC,CAClC,QAAQ,wBAAwB,EAChC;eAGC,IAAI,QAAQ,oBAAoB,KAAK,MAAM;YAChD,YAAY,IAAI,CAAC,IAAI,0CAAA,oCAAoC,CAAC;;QAG5D,IAAI,QAAQ,4BAA4B,KAAK,MAAM;YACjD,YAAY,IAAI,CACd,IAAI,+CAAA,+CAA+C,CAAC;;QAIxD,IAAI,QAAQ,2BAA2B,KAAK,MAAM;YAChD,YAAY,IAAI,CACd,IAAI,6CAAA,yDAAyD,CAC3D;;QAKN,OAAO;IACT;;AAtCF,QAAA,iBAAA,GAAA"}},
    {"offset": {"line": 2625, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2629, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@gomomento/sdk/src/config/compression/compression.ts"],"sourcesContent":["import {CompressionLevel} from '@gomomento/sdk-core';\n\nexport interface ICompression {\n  compress(\n    compressionLevel: CompressionLevel,\n    value: Uint8Array\n  ): Promise<Uint8Array>;\n\n  decompressIfCompressed(value: Uint8Array): Promise<Uint8Array>;\n}\n\n/**\n * Configuration options for compression capabilities.\n */\nexport interface CompressionStrategy {\n  /**\n   * This property is used to register the compression factory from the add-on library. To use this feature,\n   * you will need to install the compression extensions library `@gomomento/sdk-nodejs-compression`, and then\n   * import and call `CompressorFactory.default()`.\n   */\n  compressorFactory: ICompression;\n\n  /**\n   * This property is used to set the default compression level for the client. The default value is `CompressionLevel.Balanced`.\n   */\n  compressionLevel?: CompressionLevel;\n\n  /**\n   * This property represents whether the SDK will decompress data returned by calls that support compression.\n   * The default value is `AutomaticDecompression.Enabled`.\n   */\n  automaticDecompression?: AutomaticDecompression;\n}\n\nexport enum AutomaticDecompression {\n  Enabled = 'Enabled',\n  Disabled = 'Disabled',\n}\n"],"names":[],"mappings":";;;;;AAkCA,IAAY;AAAZ,CAAA,SAAY,sBAAsB;IAChC,sBAAA,CAAA,UAAA,GAAA;IACA,sBAAA,CAAA,WAAA,GAAA;AACF,CAAC,EAHW,yBAAA,QAAA,sBAAsB,IAAA,CAAtB,QAAA,sBAAsB,GAAA,CAAA,CAAA"}},
    {"offset": {"line": 2639, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}