module.exports = {

"[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/headers-interceptor.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HeaderInterceptor = exports.Header = void 0;
const grpc_js_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/index.js [app-route] (ecmascript)");
class Header {
    /**
     * @param {string} name
     * @param {string} value
     */ constructor(name, value){
        this.onceOnlyHeaders = [
            'agent',
            'runtime-version'
        ];
        this.name = name;
        this.value = value;
    }
}
exports.Header = Header;
class HeaderInterceptor {
    static createHeadersInterceptor(headers) {
        const headersToAddOnce = headers.filter((header)=>header.onceOnlyHeaders.includes(header.name));
        const headersToAddEveryTime = headers.filter((header)=>!header.onceOnlyHeaders.includes(header.name));
        let areOnlyOnceHeadersSent = false;
        return (options, nextCall)=>{
            return new grpc_js_1.InterceptingCall(nextCall(options), {
                start: (metadata, listener, next)=>{
                    headersToAddEveryTime.forEach((h)=>{
                        metadata.set(h.name, h.value);
                    });
                    if (!areOnlyOnceHeadersSent) {
                        areOnlyOnceHeadersSent = true;
                        headersToAddOnce.forEach((h)=>metadata.add(h.name, h.value));
                    }
                    next(metadata, {});
                }
            });
        };
    }
}
exports.HeaderInterceptor = HeaderInterceptor; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVycy1pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbnRlcm5hbC9ncnBjL2hlYWRlcnMtaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQTREO0FBRTVELE1BQWEsTUFBTTtJQUtqQjs7O09BR0c7SUFDSCxZQUFZLElBQVksRUFBRSxLQUFhO1FBUnZCLG9CQUFlLEdBQWEsQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQVN2RSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0NBQ0Y7QUFiRCx3QkFhQztBQUVELE1BQWEsaUJBQWlCO0lBQ3JCLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxPQUFpQjtRQUN0RCxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FDL0MsTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUM3QyxDQUFDO1FBQ0YsTUFBTSxxQkFBcUIsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUMxQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUN4RCxDQUFDO1FBQ0YsSUFBSSxzQkFBc0IsR0FBRyxLQUFLLENBQUM7UUFDbkMsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUMzQixPQUFPLElBQUksMEJBQWdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUM3QyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFO29CQUNsQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQ2hDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2hDLENBQUMsQ0FBQyxDQUFDO29CQUNILElBQUksQ0FBQyxzQkFBc0IsRUFBRTt3QkFDM0Isc0JBQXNCLEdBQUcsSUFBSSxDQUFDO3dCQUM5QixnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7cUJBQzlEO29CQUNELElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3JCLENBQUM7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUF4QkQsOENBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbnRlcmNlcHRpbmdDYWxsLCBJbnRlcmNlcHRvcn0gZnJvbSAnQGdycGMvZ3JwYy1qcyc7XG5cbmV4cG9ydCBjbGFzcyBIZWFkZXIge1xuICBwdWJsaWMgcmVhZG9ubHkgb25jZU9ubHlIZWFkZXJzOiBzdHJpbmdbXSA9IFsnYWdlbnQnLCAncnVudGltZS12ZXJzaW9uJ107XG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSB2YWx1ZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBIZWFkZXJJbnRlcmNlcHRvciB7XG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlSGVhZGVyc0ludGVyY2VwdG9yKGhlYWRlcnM6IEhlYWRlcltdKTogSW50ZXJjZXB0b3Ige1xuICAgIGNvbnN0IGhlYWRlcnNUb0FkZE9uY2UgPSBoZWFkZXJzLmZpbHRlcihoZWFkZXIgPT5cbiAgICAgIGhlYWRlci5vbmNlT25seUhlYWRlcnMuaW5jbHVkZXMoaGVhZGVyLm5hbWUpXG4gICAgKTtcbiAgICBjb25zdCBoZWFkZXJzVG9BZGRFdmVyeVRpbWUgPSBoZWFkZXJzLmZpbHRlcihcbiAgICAgIGhlYWRlciA9PiAhaGVhZGVyLm9uY2VPbmx5SGVhZGVycy5pbmNsdWRlcyhoZWFkZXIubmFtZSlcbiAgICApO1xuICAgIGxldCBhcmVPbmx5T25jZUhlYWRlcnNTZW50ID0gZmFsc2U7XG4gICAgcmV0dXJuIChvcHRpb25zLCBuZXh0Q2FsbCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBJbnRlcmNlcHRpbmdDYWxsKG5leHRDYWxsKG9wdGlvbnMpLCB7XG4gICAgICAgIHN0YXJ0OiAobWV0YWRhdGEsIGxpc3RlbmVyLCBuZXh0KSA9PiB7XG4gICAgICAgICAgaGVhZGVyc1RvQWRkRXZlcnlUaW1lLmZvckVhY2goaCA9PiB7XG4gICAgICAgICAgICBtZXRhZGF0YS5zZXQoaC5uYW1lLCBoLnZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIWFyZU9ubHlPbmNlSGVhZGVyc1NlbnQpIHtcbiAgICAgICAgICAgIGFyZU9ubHlPbmNlSGVhZGVyc1NlbnQgPSB0cnVlO1xuICAgICAgICAgICAgaGVhZGVyc1RvQWRkT25jZS5mb3JFYWNoKGggPT4gbWV0YWRhdGEuYWRkKGgubmFtZSwgaC52YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0KG1ldGFkYXRhLCB7fSk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59XG4iXX0=

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/idle-grpc-client-wrapper.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IdleGrpcClientWrapper = void 0;
/**
 * This wrapper allows us to ensure that a grpc client is not re-used if it has been idle
 * for longer than a specified period of time.  This is important in some environments,
 * such as AWS Lambda, where the runtime may be paused indefinitely between invocations.
 * In such cases we have observed that while the runtime is suspended, the connection
 * may have been closed by the server. (e.g., AWS NLB has an idle timeout of 350s:
 * https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#connection-idle-timeout )
 * When the runtime resumes, it does not recognize that the connection has been closed,
 * and it may continue to attempt to send bytes to it, resulting in client-side timeouts
 * (DEADLINE_EXCEEDED).  Forcefully refreshing the client if it has been idle for too
 * long will prevent this.
 *
 * NOTE: We can't rely on keepalive pings in this scenario, because the lambda runtime
 * may be suspended in such a way that background tasks such as the keepalive pings
 * will not be able to execute.
 */ class IdleGrpcClientWrapper {
    constructor(props){
        this.logger = props.loggerFactory.getLogger(this);
        this.clientFactoryFn = props.clientFactoryFn;
        this.client = this.clientFactoryFn();
        this.maxIdleMillis = props.maxIdleMillis;
        this.lastAccessTime = Date.now();
        this.maxClientAgeMillis = props.maxClientAgeMillis;
        this.clientCreatedTime = Date.now();
    }
    getClient() {
        this.logger.trace(`Checking to see if client has been idle for more than ${this.maxIdleMillis} ms`);
        if (Date.now() - this.lastAccessTime > this.maxIdleMillis) {
            this.logger.info(`Client has been idle for more than ${this.maxIdleMillis} ms; reconnecting.`);
            this.client.close();
            this.client = this.clientFactoryFn();
        }
        if (this.maxClientAgeMillis !== undefined) {
            this.logger.trace(`Checking to see if client was created more than ${this.maxClientAgeMillis} ms`);
            if (Date.now() - this.clientCreatedTime > this.maxClientAgeMillis) {
                this.logger.info(`Client was created more than ${this.maxClientAgeMillis} millis ago; recreating as asked.`);
                this.client.close();
                this.client = this.clientFactoryFn();
                this.clientCreatedTime = Date.now();
            }
        }
        this.lastAccessTime = Date.now();
        return this.client;
    }
}
exports.IdleGrpcClientWrapper = IdleGrpcClientWrapper; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRsZS1ncnBjLWNsaWVudC13cmFwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL2dycGMvaWRsZS1ncnBjLWNsaWVudC13cmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE1BQWEscUJBQXFCO0lBYWhDLFlBQVksS0FBb0M7UUFDOUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7UUFDN0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUM7UUFDbkQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLHlEQUF5RCxJQUFJLENBQUMsYUFBYSxLQUFLLENBQ2pGLENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDekQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2Qsc0NBQXNDLElBQUksQ0FBQyxhQUFhLG9CQUFvQixDQUM3RSxDQUFDO1lBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN0QztRQUVELElBQUksSUFBSSxDQUFDLGtCQUFrQixLQUFLLFNBQVMsRUFBRTtZQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZixtREFBbUQsSUFBSSxDQUFDLGtCQUFrQixLQUFLLENBQ2hGLENBQUM7WUFDRixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixFQUFFO2dCQUNqRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDZCxnQ0FBZ0MsSUFBSSxDQUFDLGtCQUFrQixtQ0FBbUMsQ0FDM0YsQ0FBQztnQkFDRixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDckMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUNyQztTQUNGO1FBRUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDakMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Q0FDRjtBQXBERCxzREFvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Nsb3NlYWJsZUdycGNDbGllbnQsIEdycGNDbGllbnRXcmFwcGVyfSBmcm9tICcuL2dycGMtY2xpZW50LXdyYXBwZXInO1xuaW1wb3J0IHtNb21lbnRvTG9nZ2VyLCBNb21lbnRvTG9nZ2VyRmFjdG9yeX0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWRsZUdycGNDbGllbnRXcmFwcGVyUHJvcHM8VCBleHRlbmRzIENsb3NlYWJsZUdycGNDbGllbnQ+IHtcbiAgY2xpZW50RmFjdG9yeUZuOiAoKSA9PiBUO1xuICBsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeTtcbiAgbWF4SWRsZU1pbGxpczogbnVtYmVyO1xuICBtYXhDbGllbnRBZ2VNaWxsaXM/OiBudW1iZXI7XG59XG5cbi8qKlxuICogVGhpcyB3cmFwcGVyIGFsbG93cyB1cyB0byBlbnN1cmUgdGhhdCBhIGdycGMgY2xpZW50IGlzIG5vdCByZS11c2VkIGlmIGl0IGhhcyBiZWVuIGlkbGVcbiAqIGZvciBsb25nZXIgdGhhbiBhIHNwZWNpZmllZCBwZXJpb2Qgb2YgdGltZS4gIFRoaXMgaXMgaW1wb3J0YW50IGluIHNvbWUgZW52aXJvbm1lbnRzLFxuICogc3VjaCBhcyBBV1MgTGFtYmRhLCB3aGVyZSB0aGUgcnVudGltZSBtYXkgYmUgcGF1c2VkIGluZGVmaW5pdGVseSBiZXR3ZWVuIGludm9jYXRpb25zLlxuICogSW4gc3VjaCBjYXNlcyB3ZSBoYXZlIG9ic2VydmVkIHRoYXQgd2hpbGUgdGhlIHJ1bnRpbWUgaXMgc3VzcGVuZGVkLCB0aGUgY29ubmVjdGlvblxuICogbWF5IGhhdmUgYmVlbiBjbG9zZWQgYnkgdGhlIHNlcnZlci4gKGUuZy4sIEFXUyBOTEIgaGFzIGFuIGlkbGUgdGltZW91dCBvZiAzNTBzOlxuICogaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2VsYXN0aWNsb2FkYmFsYW5jaW5nL2xhdGVzdC9uZXR3b3JrL25ldHdvcmstbG9hZC1iYWxhbmNlcnMuaHRtbCNjb25uZWN0aW9uLWlkbGUtdGltZW91dCApXG4gKiBXaGVuIHRoZSBydW50aW1lIHJlc3VtZXMsIGl0IGRvZXMgbm90IHJlY29nbml6ZSB0aGF0IHRoZSBjb25uZWN0aW9uIGhhcyBiZWVuIGNsb3NlZCxcbiAqIGFuZCBpdCBtYXkgY29udGludWUgdG8gYXR0ZW1wdCB0byBzZW5kIGJ5dGVzIHRvIGl0LCByZXN1bHRpbmcgaW4gY2xpZW50LXNpZGUgdGltZW91dHNcbiAqIChERUFETElORV9FWENFRURFRCkuICBGb3JjZWZ1bGx5IHJlZnJlc2hpbmcgdGhlIGNsaWVudCBpZiBpdCBoYXMgYmVlbiBpZGxlIGZvciB0b29cbiAqIGxvbmcgd2lsbCBwcmV2ZW50IHRoaXMuXG4gKlxuICogTk9URTogV2UgY2FuJ3QgcmVseSBvbiBrZWVwYWxpdmUgcGluZ3MgaW4gdGhpcyBzY2VuYXJpbywgYmVjYXVzZSB0aGUgbGFtYmRhIHJ1bnRpbWVcbiAqIG1heSBiZSBzdXNwZW5kZWQgaW4gc3VjaCBhIHdheSB0aGF0IGJhY2tncm91bmQgdGFza3Mgc3VjaCBhcyB0aGUga2VlcGFsaXZlIHBpbmdzXG4gKiB3aWxsIG5vdCBiZSBhYmxlIHRvIGV4ZWN1dGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBJZGxlR3JwY0NsaWVudFdyYXBwZXI8VCBleHRlbmRzIENsb3NlYWJsZUdycGNDbGllbnQ+XG4gIGltcGxlbWVudHMgR3JwY0NsaWVudFdyYXBwZXI8VD5cbntcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXI6IE1vbWVudG9Mb2dnZXI7XG5cbiAgcHJpdmF0ZSBjbGllbnQ6IFQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50RmFjdG9yeUZuOiAoKSA9PiBUO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgbWF4SWRsZU1pbGxpczogbnVtYmVyO1xuICBwcml2YXRlIGxhc3RBY2Nlc3NUaW1lOiBudW1iZXI7XG4gIHByaXZhdGUgY2xpZW50Q3JlYXRlZFRpbWU6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBtYXhDbGllbnRBZ2VNaWxsaXM/OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IElkbGVHcnBjQ2xpZW50V3JhcHBlclByb3BzPFQ+KSB7XG4gICAgdGhpcy5sb2dnZXIgPSBwcm9wcy5sb2dnZXJGYWN0b3J5LmdldExvZ2dlcih0aGlzKTtcbiAgICB0aGlzLmNsaWVudEZhY3RvcnlGbiA9IHByb3BzLmNsaWVudEZhY3RvcnlGbjtcbiAgICB0aGlzLmNsaWVudCA9IHRoaXMuY2xpZW50RmFjdG9yeUZuKCk7XG4gICAgdGhpcy5tYXhJZGxlTWlsbGlzID0gcHJvcHMubWF4SWRsZU1pbGxpcztcbiAgICB0aGlzLmxhc3RBY2Nlc3NUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLm1heENsaWVudEFnZU1pbGxpcyA9IHByb3BzLm1heENsaWVudEFnZU1pbGxpcztcbiAgICB0aGlzLmNsaWVudENyZWF0ZWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfVxuXG4gIGdldENsaWVudCgpOiBUIHtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBDaGVja2luZyB0byBzZWUgaWYgY2xpZW50IGhhcyBiZWVuIGlkbGUgZm9yIG1vcmUgdGhhbiAke3RoaXMubWF4SWRsZU1pbGxpc30gbXNgXG4gICAgKTtcbiAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMubGFzdEFjY2Vzc1RpbWUgPiB0aGlzLm1heElkbGVNaWxsaXMpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmluZm8oXG4gICAgICAgIGBDbGllbnQgaGFzIGJlZW4gaWRsZSBmb3IgbW9yZSB0aGFuICR7dGhpcy5tYXhJZGxlTWlsbGlzfSBtczsgcmVjb25uZWN0aW5nLmBcbiAgICAgICk7XG4gICAgICB0aGlzLmNsaWVudC5jbG9zZSgpO1xuICAgICAgdGhpcy5jbGllbnQgPSB0aGlzLmNsaWVudEZhY3RvcnlGbigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1heENsaWVudEFnZU1pbGxpcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgICAgYENoZWNraW5nIHRvIHNlZSBpZiBjbGllbnQgd2FzIGNyZWF0ZWQgbW9yZSB0aGFuICR7dGhpcy5tYXhDbGllbnRBZ2VNaWxsaXN9IG1zYFxuICAgICAgKTtcbiAgICAgIGlmIChEYXRlLm5vdygpIC0gdGhpcy5jbGllbnRDcmVhdGVkVGltZSA+IHRoaXMubWF4Q2xpZW50QWdlTWlsbGlzKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXG4gICAgICAgICAgYENsaWVudCB3YXMgY3JlYXRlZCBtb3JlIHRoYW4gJHt0aGlzLm1heENsaWVudEFnZU1pbGxpc30gbWlsbGlzIGFnbzsgcmVjcmVhdGluZyBhcyBhc2tlZC5gXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY2xpZW50LmNsb3NlKCk7XG4gICAgICAgIHRoaXMuY2xpZW50ID0gdGhpcy5jbGllbnRGYWN0b3J5Rm4oKTtcbiAgICAgICAgdGhpcy5jbGllbnRDcmVhdGVkVGltZSA9IERhdGUubm93KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0QWNjZXNzVGltZSA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50O1xuICB9XG59XG4iXX0=

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/retry-interceptor.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RetryInterceptor = void 0;
// This is temporary work around defining our own interceptor to power re-try's
// Longer term with this proposal re-try's should be added to grpc core, and we
// can leverage by defining a retry policy.
// https://github.com/grpc/proposal/blob/master/A6-client-retries.md#grpc-retry-design
// For now we use re-try interceptor inspired by example here in interceptor proposal for nodejs grpc core
// https://github.com/grpc/proposal/blob/master/L5-node-client-interceptors.md#advanced-examples
// Main difference is that we maintain a allow list of retryable status codes vs trying all.
const grpc_js_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/index.js [app-route] (ecmascript)");
const constants_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/constants.js [app-route] (ecmascript)");
const no_retry_strategy_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/config/retry/no-retry-strategy.js [app-route] (ecmascript)");
class RetryInterceptor {
    // TODO: We need to send retry count information to the server so that we
    // will have some visibility into how often this is happening to customers:
    // https://github.com/momentohq/client-sdk-nodejs/issues/80
    static createRetryInterceptor(props) {
        var _a, _b;
        const logger = props.loggerFactory.getLogger(RetryInterceptor.name);
        const retryStrategy = (_a = props.retryStrategy) !== null && _a !== void 0 ? _a : new no_retry_strategy_1.NoRetryStrategy({
            loggerFactory: props.loggerFactory
        });
        const overallRequestTimeoutMs = props.overallRequestTimeoutMs;
        const deadlineOffset = (_b = retryStrategy.responseDataReceivedTimeoutMillis) !== null && _b !== void 0 ? _b : props.overallRequestTimeoutMs;
        logger.trace(`Creating RetryInterceptor (for ${props.clientName}); overall request timeout offset: ${overallRequestTimeoutMs} ms; retry strategy responseDataRecievedTimeoutMillis: ${String(retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.responseDataReceivedTimeoutMillis)}; deadline offset: ${deadlineOffset} ms`);
        return (options, nextCall)=>{
            logger.trace(`Entering RetryInterceptor (for ${props.clientName}); overall request timeout offset: ${overallRequestTimeoutMs} ms; deadline offset: ${String(deadlineOffset)}`);
            const overallDeadline = calculateDeadline(overallRequestTimeoutMs);
            logger.trace(`Setting initial deadline (for ${props.clientName}) based on offset: ${deadlineOffset} ms`);
            let nextDeadline = calculateDeadline(deadlineOffset);
            options.deadline = nextDeadline;
            let savedMetadata;
            let savedSendMessage;
            let savedReceiveMessage;
            let savedMessageNext;
            return new grpc_js_1.InterceptingCall(nextCall(options), {
                start: function(metadata, listener, next) {
                    savedMetadata = metadata;
                    const newListener = {
                        onReceiveMessage: function(message, next) {
                            savedReceiveMessage = message;
                            savedMessageNext = next;
                        },
                        onReceiveStatus: function(status, // NOTE: we have to use `any` here because that is what is used in the grpc-js type definitions
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        next) {
                            let attempts = 0;
                            const retry = function(message, metadata) {
                                var _a;
                                logger.debug(`Retrying request: path: ${options.method_definition.path}; deadline was: ${String((_a = options.deadline) === null || _a === void 0 ? void 0 : _a.toISOString())}, overall deadline is: ${overallDeadline.toISOString()}`);
                                if (new Date(Date.now()) >= overallDeadline) {
                                    logger.debug(`Request not eligible for retry: path: ${options.method_definition.path}; overall deadline exceeded: ${overallDeadline.toISOString()}`);
                                    savedMessageNext(savedReceiveMessage);
                                    next(status);
                                    return;
                                }
                                nextDeadline = calculateDeadline(deadlineOffset);
                                logger.debug(`Setting next deadline (via offset of ${deadlineOffset} ms) to: ${nextDeadline.toISOString()}`);
                                options.deadline = nextDeadline;
                                const newCall = nextCall(options);
                                newCall.start(metadata, {
                                    onReceiveMessage: function(message) {
                                        savedReceiveMessage = message;
                                    },
                                    onReceiveStatus: function(status) {
                                        const whenToRetry = retryStrategy.determineWhenToRetryRequest({
                                            grpcStatus: status,
                                            grpcRequest: options.method_definition,
                                            attemptNumber: attempts,
                                            requestMetadata: metadata
                                        });
                                        if (whenToRetry === null) {
                                            logger.debug(`Request not eligible for retry: path: ${options.method_definition.path}; retryable status code: ${status.code}; number of attempts (${attempts}).`);
                                            savedMessageNext(savedReceiveMessage);
                                            next(status);
                                        } else {
                                            attempts++;
                                            logger.debug(`Request eligible for retry: path: ${options.method_definition.path}; response status code: ${status.code}; number of attempts (${attempts}); will retry in ${whenToRetry}ms`);
                                            setTimeout(()=>retry(message, metadata), whenToRetry);
                                        }
                                    }
                                });
                                newCall.sendMessage(savedSendMessage);
                                newCall.halfClose();
                            };
                            if (status.code === constants_1.Status.OK) {
                                savedMessageNext(savedReceiveMessage);
                                next(status);
                            } else {
                                const whenToRetry = retryStrategy.determineWhenToRetryRequest({
                                    grpcStatus: status,
                                    grpcRequest: options.method_definition,
                                    attemptNumber: attempts,
                                    requestMetadata: metadata
                                });
                                if (whenToRetry === null) {
                                    logger.debug(`Request not eligible for retry: path: ${options.method_definition.path}; response status code: ${status.code}.`);
                                    savedMessageNext(savedReceiveMessage);
                                    next(status);
                                } else {
                                    attempts++;
                                    logger.debug(`Request eligible for retry: path: ${options.method_definition.path}; response status code: ${status.code}; number of attempts (${attempts}); will retry in ${whenToRetry}ms`);
                                    setTimeout(()=>retry(savedSendMessage, savedMetadata), whenToRetry);
                                }
                            }
                        }
                    };
                    next(metadata, newListener);
                },
                sendMessage: function(message, next) {
                    savedSendMessage = message;
                    next(message);
                }
            });
        };
    }
}
exports.RetryInterceptor = RetryInterceptor;
function calculateDeadline(offsetMillis) {
    const deadline = new Date(Date.now());
    deadline.setMilliseconds(deadline.getMilliseconds() + offsetMillis);
    return deadline;
} //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/cache-control-client.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CacheControlClient = void 0;
const generated_types_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/index.js [app-route] (ecmascript)");
var grpcControl = generated_types_1.control.control_client;
const headers_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/headers-interceptor.js [app-route] (ecmascript)");
const cache_service_error_mapper_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/errors/cache-service-error-mapper.js [app-route] (ecmascript)");
const grpc_js_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/index.js [app-route] (ecmascript)");
const __1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/index.js [app-route] (ecmascript)");
const package_json_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/package.json (json)");
const idle_grpc_client_wrapper_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/idle-grpc-client-wrapper.js [app-route] (ecmascript)");
const utils_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/index.js [app-route] (ecmascript)");
const retry_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/retry-interceptor.js [app-route] (ecmascript)");
class CacheControlClient {
    /**
     * @param {ControlClientProps} props
     */ constructor(props){
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors());
        const headers = [
            new headers_interceptor_1.Header('Authorization', props.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('agent', `nodejs:cache:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`)
        ];
        this.interceptors = [
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'CacheControlClient',
                loggerFactory: props.configuration.getLoggerFactory(),
                overallRequestTimeoutMs: CacheControlClient.REQUEST_TIMEOUT_MS
            })
        ];
        this.logger.debug(`Creating control client using endpoint: '${props.credentialProvider.getControlEndpoint()}`);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: ()=>new grpcControl.ScsControlClient(props.credentialProvider.getControlEndpoint(), props.credentialProvider.isControlEndpointSecure() ? grpc_js_1.ChannelCredentials.createSsl() : grpc_js_1.ChannelCredentials.createInsecure()),
            loggerFactory: props.configuration.getLoggerFactory(),
            maxIdleMillis: props.configuration.getTransportStrategy().getMaxIdleMillis()
        });
    }
    close() {
        this.logger.debug('Closing cache control client');
        this.clientWrapper.getClient().close();
    }
    async createCache(name) {
        try {
            (0, utils_1.validateCacheName)(name);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CreateCache.Error(err));
        }
        this.logger.debug(`Creating cache: ${name}`);
        const request = new grpcControl._CreateCacheRequest({
            cache_name: name
        });
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().CreateCache(request, {
                interceptors: this.interceptors
            }, (err, _resp)=>{
                if (err) {
                    const sdkError = this.cacheServiceErrorMapper.convertError(err);
                    if (sdkError.errorCode() === __1.MomentoErrorCode.CACHE_ALREADY_EXISTS_ERROR) {
                        resolve(new __1.CreateCache.AlreadyExists());
                    } else {
                        this.cacheServiceErrorMapper.resolveOrRejectError({
                            err: err,
                            errorResponseFactoryFn: (e)=>new __1.CreateCache.Error(e),
                            resolveFn: resolve,
                            rejectFn: reject
                        });
                    }
                } else {
                    resolve(new __1.CreateCache.Success());
                }
            });
        });
    }
    async deleteCache(name) {
        try {
            (0, utils_1.validateCacheName)(name);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.DeleteCache.Error(err));
        }
        const request = new grpcControl._DeleteCacheRequest({
            cache_name: name
        });
        this.logger.debug(`Deleting cache: ${name}`);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().DeleteCache(request, {
                interceptors: this.interceptors
            }, (err, _resp)=>{
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.DeleteCache.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new __1.DeleteCache.Success());
                }
            });
        });
    }
    async flushCache(cacheName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheFlush.Error(err));
        }
        this.logger.debug(`Flushing cache: ${cacheName}`);
        return await this.sendFlushCache(cacheName);
    }
    async sendFlushCache(cacheName) {
        const request = new grpcControl._FlushCacheRequest({
            cache_name: cacheName
        });
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().FlushCache(request, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheFlush.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheFlush.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async listCaches() {
        const request = new grpcControl._ListCachesRequest();
        request.next_token = '';
        this.logger.debug("Issuing 'listCaches' request");
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ListCaches(request, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.ListCaches.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    const caches = resp.cache.map((cache)=>{
                        var _a, _b, _c, _d, _e, _f, _g;
                        const cacheName = cache.cache_name;
                        const topicLimits = {
                            maxPublishMessageSizeKb: ((_a = cache.topic_limits) === null || _a === void 0 ? void 0 : _a.max_publish_message_size_kb) || 0,
                            maxSubscriptionCount: ((_b = cache.topic_limits) === null || _b === void 0 ? void 0 : _b.max_subscription_count) || 0,
                            maxPublishRate: ((_c = cache.topic_limits) === null || _c === void 0 ? void 0 : _c.max_publish_rate) || 0
                        };
                        const cacheLimits = {
                            maxTtlSeconds: ((_d = cache.cache_limits) === null || _d === void 0 ? void 0 : _d.max_ttl_seconds) || 0,
                            maxItemSizeKb: ((_e = cache.cache_limits) === null || _e === void 0 ? void 0 : _e.max_item_size_kb) || 0,
                            maxThroughputKbps: ((_f = cache.cache_limits) === null || _f === void 0 ? void 0 : _f.max_throughput_kbps) || 0,
                            maxTrafficRate: ((_g = cache.cache_limits) === null || _g === void 0 ? void 0 : _g.max_traffic_rate) || 0
                        };
                        return new __1.CacheInfo(cacheName, topicLimits, cacheLimits);
                    });
                    resolve(new __1.ListCaches.Success(caches));
                }
            });
        });
    }
}
exports.CacheControlClient = CacheControlClient;
CacheControlClient.REQUEST_TIMEOUT_MS = 60 * 1000; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/middlewares-interceptor.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.middlewaresInterceptor = void 0;
const grpc_js_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/index.js [app-route] (ecmascript)");
const middleware_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/config/middleware/middleware.js [app-route] (ecmascript)");
const constants_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/constants.js [app-route] (ecmascript)");
const connectivity_state_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/connectivity-state.js [app-route] (ecmascript)");
function middlewaresInterceptor(loggerFactory, middlewares, middlewareRequestContext, grpcClient = null) {
    const logger = loggerFactory.getLogger('grpc-interceptor');
    return (options, nextCall)=>{
        const middlewareRequestHandlers = middlewares.map((m)=>m.onNewRequest(middlewareRequestContext));
        // create a copy of the handlers and reverse it, because for the response life cycle actions we should call
        // the middlewares in the opposite order.
        const reversedMiddlewareRequestHandlers = [
            ...middlewareRequestHandlers
        ].reverse();
        const requester = {
            start: function(metadata, listener, next) {
                const newListener = {
                    onReceiveMetadata: function(metadata, next) {
                        applyMiddlewareHandlers('onResponseMetadata', reversedMiddlewareRequestHandlers, (h)=>(m)=>h.onResponseMetadata(m), new middleware_1.MiddlewareMetadata(metadata), (metadata)=>next(metadata._grpcMetadata));
                    },
                    onReceiveMessage: function(// unfortunately grpc uses `any` in their type defs for these
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    message, // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    next) {
                        applyMiddlewareHandlers('onResponseBody', reversedMiddlewareRequestHandlers, (h)=>(request)=>h.onResponseBody(request), new middleware_1.MiddlewareMessage(message), (msg)=>next(msg === null || msg === void 0 ? void 0 : msg._grpcMessage));
                    },
                    onReceiveStatus: function(status, next) {
                        var _a, _b;
                        if (status.code === constants_1.Status.DEADLINE_EXCEEDED) {
                            // getConnectivityState(true) will return state of connection and
                            // also try to connect if it's idle, false will just get the status
                            const connectionStatus = (_b = (_a = grpcClient === null || grpcClient === void 0 ? void 0 : grpcClient.getChannel()) === null || _a === void 0 ? void 0 : _a.getConnectivityState(false)) !== null && _b !== void 0 ? _b : null;
                            logger.warn(`Deadline Exceeded! Received status: ${status.code} ${status.details} and grpc connection status: ${connectionStatus ? connectivity_state_1.ConnectivityState[connectionStatus] : 'unable to get connection status'}`);
                        }
                        applyMiddlewareHandlers('onResponseStatus', reversedMiddlewareRequestHandlers, (h)=>(s)=>h.onResponseStatus(s), new middleware_1.MiddlewareStatus(status), (s)=>next(s._grpcStatus));
                    }
                };
                applyMiddlewareHandlers('onRequestMetadata', middlewareRequestHandlers, (h)=>(m)=>h.onRequestMetadata(m), new middleware_1.MiddlewareMetadata(metadata), (m)=>next(m._grpcMetadata, newListener));
            },
            // unfortunately grpc uses `any` in their type defs for these
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            sendMessage: function(message, next) {
                applyMiddlewareHandlers('onRequestBody', middlewareRequestHandlers, (h)=>(request)=>h.onRequestBody(request), new middleware_1.MiddlewareMessage(message), (m)=>next(m._grpcMessage));
            }
        };
        return new grpc_js_1.InterceptingCall(nextCall(options), requester);
    };
}
exports.middlewaresInterceptor = middlewaresInterceptor;
function applyMiddlewareHandlers(name, handlers, middlewareHandlerReduceFn, originalInput, nextFn) {
    let remainingHandlers = handlers;
    let middlewarePromise = Promise.resolve(originalInput);
    while(remainingHandlers.length > 0){
        const nextHandler = middlewareHandlerReduceFn(remainingHandlers[0]);
        middlewarePromise = middlewarePromise.then((newT)=>nextHandler(newT)).catch((e)=>{
            throw e;
        });
        remainingHandlers = remainingHandlers.slice(1);
    }
    middlewarePromise.then((newT)=>nextFn(newT)).catch((e)=>{
        throw e;
    });
} //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/grpc-channel-options.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.grpcChannelOptionsFromGrpcConfig = void 0;
// The default value for max_send_message_length is 4mb.  We need to increase this to 5mb in order to
// support cases where users have requested a limit increase up to our maximum item size of 5mb.
const DEFAULT_MAX_REQUEST_SIZE = 5243000;
function grpcChannelOptionsFromGrpcConfig(grpcConfig) {
    var _a, _b;
    return {
        // default value for max session memory is 10mb.  Under high load, it is easy to exceed this,
        // after which point all requests will fail with a client-side RESOURCE_EXHAUSTED exception.
        'grpc-node.max_session_memory': grpcConfig.getMaxSessionMemoryMb(),
        // This flag controls whether channels use a shared global pool of subchannels, or whether
        // each channel gets its own subchannel pool.  The default value is 0, meaning a single global
        // pool.  Setting it to 1 provides significant performance improvements when we instantiate more
        // than one grpc client.
        'grpc.use_local_subchannel_pool': 1,
        // The default value for max_send_message_length is 4mb.  We need to increase this to 5mb in order to
        // support cases where users have requested a limit increase up to our maximum item size of 5mb.
        'grpc.max_send_message_length': (_a = grpcConfig.getMaxSendMessageLength()) !== null && _a !== void 0 ? _a : DEFAULT_MAX_REQUEST_SIZE,
        'grpc.max_receive_message_length': (_b = grpcConfig.getMaxReceiveMessageLength()) !== null && _b !== void 0 ? _b : DEFAULT_MAX_REQUEST_SIZE,
        // NOTE: keep-alives are very important for long-lived server environments where there may be periods of time
        // when the connection is idle. However, they are very problematic for lambda environments where the lambda
        // runtime is continuously frozen and unfrozen, because the lambda may be frozen before the "ACK" is received
        // from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.
        // Therefore, keep-alives should be disabled in lambda and similar environments.
        'grpc.keepalive_permit_without_calls': grpcConfig.getKeepAlivePermitWithoutCalls(),
        'grpc.keepalive_time_ms': grpcConfig.getKeepAliveTimeMS(),
        'grpc.keepalive_timeout_ms': grpcConfig.getKeepAliveTimeoutMS()
    };
}
exports.grpcChannelOptionsFromGrpcConfig = grpcChannelOptionsFromGrpcConfig; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JwYy1jaGFubmVsLW9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvZ3JwYy9ncnBjLWNoYW5uZWwtb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSxxR0FBcUc7QUFDckcsZ0dBQWdHO0FBQ2hHLE1BQU0sd0JBQXdCLEdBQUcsT0FBUyxDQUFDO0FBRTNDLFNBQWdCLGdDQUFnQyxDQUM5QyxVQUE2Qjs7SUFFN0IsT0FBTztRQUNMLDZGQUE2RjtRQUM3Riw0RkFBNEY7UUFDNUYsOEJBQThCLEVBQUUsVUFBVSxDQUFDLHFCQUFxQixFQUFFO1FBRWxFLDBGQUEwRjtRQUMxRiw4RkFBOEY7UUFDOUYsZ0dBQWdHO1FBQ2hHLHdCQUF3QjtRQUN4QixnQ0FBZ0MsRUFBRSxDQUFDO1FBRW5DLHFHQUFxRztRQUNyRyxnR0FBZ0c7UUFDaEcsOEJBQThCLEVBQzVCLE1BQUEsVUFBVSxDQUFDLHVCQUF1QixFQUFFLG1DQUFJLHdCQUF3QjtRQUNsRSxpQ0FBaUMsRUFDL0IsTUFBQSxVQUFVLENBQUMsMEJBQTBCLEVBQUUsbUNBQUksd0JBQXdCO1FBRXJFLDZHQUE2RztRQUM3RywyR0FBMkc7UUFDM0csNkdBQTZHO1FBQzdHLDhHQUE4RztRQUM5RyxnRkFBZ0Y7UUFDaEYscUNBQXFDLEVBQ25DLFVBQVUsQ0FBQyw4QkFBOEIsRUFBRTtRQUM3Qyx3QkFBd0IsRUFBRSxVQUFVLENBQUMsa0JBQWtCLEVBQUU7UUFDekQsMkJBQTJCLEVBQUUsVUFBVSxDQUFDLHFCQUFxQixFQUFFO0tBQ2hFLENBQUM7QUFDSixDQUFDO0FBL0JELDRFQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7R3JwY0NvbmZpZ3VyYXRpb259IGZyb20gJy4uLy4uJztcbmltcG9ydCB7Q2hhbm5lbE9wdGlvbnN9IGZyb20gJ0BncnBjL2dycGMtanMnO1xuXG4vLyBUaGUgZGVmYXVsdCB2YWx1ZSBmb3IgbWF4X3NlbmRfbWVzc2FnZV9sZW5ndGggaXMgNG1iLiAgV2UgbmVlZCB0byBpbmNyZWFzZSB0aGlzIHRvIDVtYiBpbiBvcmRlciB0b1xuLy8gc3VwcG9ydCBjYXNlcyB3aGVyZSB1c2VycyBoYXZlIHJlcXVlc3RlZCBhIGxpbWl0IGluY3JlYXNlIHVwIHRvIG91ciBtYXhpbXVtIGl0ZW0gc2l6ZSBvZiA1bWIuXG5jb25zdCBERUZBVUxUX01BWF9SRVFVRVNUX1NJWkUgPSA1XzI0M18wMDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBncnBjQ2hhbm5lbE9wdGlvbnNGcm9tR3JwY0NvbmZpZyhcbiAgZ3JwY0NvbmZpZzogR3JwY0NvbmZpZ3VyYXRpb25cbik6IENoYW5uZWxPcHRpb25zIHtcbiAgcmV0dXJuIHtcbiAgICAvLyBkZWZhdWx0IHZhbHVlIGZvciBtYXggc2Vzc2lvbiBtZW1vcnkgaXMgMTBtYi4gIFVuZGVyIGhpZ2ggbG9hZCwgaXQgaXMgZWFzeSB0byBleGNlZWQgdGhpcyxcbiAgICAvLyBhZnRlciB3aGljaCBwb2ludCBhbGwgcmVxdWVzdHMgd2lsbCBmYWlsIHdpdGggYSBjbGllbnQtc2lkZSBSRVNPVVJDRV9FWEhBVVNURUQgZXhjZXB0aW9uLlxuICAgICdncnBjLW5vZGUubWF4X3Nlc3Npb25fbWVtb3J5JzogZ3JwY0NvbmZpZy5nZXRNYXhTZXNzaW9uTWVtb3J5TWIoKSxcblxuICAgIC8vIFRoaXMgZmxhZyBjb250cm9scyB3aGV0aGVyIGNoYW5uZWxzIHVzZSBhIHNoYXJlZCBnbG9iYWwgcG9vbCBvZiBzdWJjaGFubmVscywgb3Igd2hldGhlclxuICAgIC8vIGVhY2ggY2hhbm5lbCBnZXRzIGl0cyBvd24gc3ViY2hhbm5lbCBwb29sLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgMCwgbWVhbmluZyBhIHNpbmdsZSBnbG9iYWxcbiAgICAvLyBwb29sLiAgU2V0dGluZyBpdCB0byAxIHByb3ZpZGVzIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyB3aGVuIHdlIGluc3RhbnRpYXRlIG1vcmVcbiAgICAvLyB0aGFuIG9uZSBncnBjIGNsaWVudC5cbiAgICAnZ3JwYy51c2VfbG9jYWxfc3ViY2hhbm5lbF9wb29sJzogMSxcblxuICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIGZvciBtYXhfc2VuZF9tZXNzYWdlX2xlbmd0aCBpcyA0bWIuICBXZSBuZWVkIHRvIGluY3JlYXNlIHRoaXMgdG8gNW1iIGluIG9yZGVyIHRvXG4gICAgLy8gc3VwcG9ydCBjYXNlcyB3aGVyZSB1c2VycyBoYXZlIHJlcXVlc3RlZCBhIGxpbWl0IGluY3JlYXNlIHVwIHRvIG91ciBtYXhpbXVtIGl0ZW0gc2l6ZSBvZiA1bWIuXG4gICAgJ2dycGMubWF4X3NlbmRfbWVzc2FnZV9sZW5ndGgnOlxuICAgICAgZ3JwY0NvbmZpZy5nZXRNYXhTZW5kTWVzc2FnZUxlbmd0aCgpID8/IERFRkFVTFRfTUFYX1JFUVVFU1RfU0laRSxcbiAgICAnZ3JwYy5tYXhfcmVjZWl2ZV9tZXNzYWdlX2xlbmd0aCc6XG4gICAgICBncnBjQ29uZmlnLmdldE1heFJlY2VpdmVNZXNzYWdlTGVuZ3RoKCkgPz8gREVGQVVMVF9NQVhfUkVRVUVTVF9TSVpFLFxuXG4gICAgLy8gTk9URToga2VlcC1hbGl2ZXMgYXJlIHZlcnkgaW1wb3J0YW50IGZvciBsb25nLWxpdmVkIHNlcnZlciBlbnZpcm9ubWVudHMgd2hlcmUgdGhlcmUgbWF5IGJlIHBlcmlvZHMgb2YgdGltZVxuICAgIC8vIHdoZW4gdGhlIGNvbm5lY3Rpb24gaXMgaWRsZS4gSG93ZXZlciwgdGhleSBhcmUgdmVyeSBwcm9ibGVtYXRpYyBmb3IgbGFtYmRhIGVudmlyb25tZW50cyB3aGVyZSB0aGUgbGFtYmRhXG4gICAgLy8gcnVudGltZSBpcyBjb250aW51b3VzbHkgZnJvemVuIGFuZCB1bmZyb3plbiwgYmVjYXVzZSB0aGUgbGFtYmRhIG1heSBiZSBmcm96ZW4gYmVmb3JlIHRoZSBcIkFDS1wiIGlzIHJlY2VpdmVkXG4gICAgLy8gZnJvbSB0aGUgc2VydmVyLiBUaGlzIGNhbiBjYXVzZSB0aGUga2VlcC1hbGl2ZSB0byB0aW1lb3V0IGV2ZW4gdGhvdWdoIHRoZSBjb25uZWN0aW9uIGlzIGNvbXBsZXRlbHkgaGVhbHRoeS5cbiAgICAvLyBUaGVyZWZvcmUsIGtlZXAtYWxpdmVzIHNob3VsZCBiZSBkaXNhYmxlZCBpbiBsYW1iZGEgYW5kIHNpbWlsYXIgZW52aXJvbm1lbnRzLlxuICAgICdncnBjLmtlZXBhbGl2ZV9wZXJtaXRfd2l0aG91dF9jYWxscyc6XG4gICAgICBncnBjQ29uZmlnLmdldEtlZXBBbGl2ZVBlcm1pdFdpdGhvdXRDYWxscygpLFxuICAgICdncnBjLmtlZXBhbGl2ZV90aW1lX21zJzogZ3JwY0NvbmZpZy5nZXRLZWVwQWxpdmVUaW1lTVMoKSxcbiAgICAnZ3JwYy5rZWVwYWxpdmVfdGltZW91dF9tcyc6IGdycGNDb25maWcuZ2V0S2VlcEFsaXZlVGltZW91dE1TKCksXG4gIH07XG59XG4iXX0=

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/cache-data-client.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CacheDataClient = exports.CONNECTION_ID_KEY = void 0;
const generated_types_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/index.js [app-route] (ecmascript)");
// older versions of node don't have the global util variables https://github.com/nodejs/node/issues/20365
const util_1 = require("util");
const headers_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/headers-interceptor.js [app-route] (ecmascript)");
const retry_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/retry-interceptor.js [app-route] (ecmascript)");
const cache_service_error_mapper_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/errors/cache-service-error-mapper.js [app-route] (ecmascript)");
const grpc_js_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/index.js [app-route] (ecmascript)");
const __1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/index.js [app-route] (ecmascript)");
const package_json_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/package.json (json)");
const idle_grpc_client_wrapper_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/idle-grpc-client-wrapper.js [app-route] (ecmascript)");
const middlewares_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/middlewares-interceptor.js [app-route] (ecmascript)");
const cacheclient_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/cacheclient.js [app-route] (ecmascript)");
const utils_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/index.js [app-route] (ecmascript)");
const grpc_response_types_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/messages/responses/grpc-response-types.js [app-route] (ecmascript)");
const connectivity_state_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/connectivity-state.js [app-route] (ecmascript)");
const grpc_channel_options_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/grpc-channel-options.js [app-route] (ecmascript)");
const errors_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/errors/index.js [app-route] (ecmascript)");
const common_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/common.js [app-route] (ecmascript)");
const compression_error_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/errors/compression-error.js [app-route] (ecmascript)");
const sdk_core_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/index.js [app-route] (ecmascript)");
var grpcCache = generated_types_1.cache.cache_client;
var ECacheResult = cacheclient_1.cache_client.ECacheResult;
var _ItemGetTypeResponse = cacheclient_1.cache_client._ItemGetTypeResponse;
var _Unbounded = common_1.common._Unbounded;
var Absent = common_1.common.Absent;
var Present = common_1.common.Present;
var Equal = common_1.common.Equal;
var NotEqual = common_1.common.NotEqual;
var PresentAndNotEqual = common_1.common.PresentAndNotEqual;
var AbsentOrEqual = common_1.common.AbsentOrEqual;
exports.CONNECTION_ID_KEY = Symbol('connectionID');
class CacheDataClient {
    /**
     * @param {CacheClientProps} props
     * @param dataClientID
     * @param semaphore
     */ constructor(props, dataClientID, semaphore){
        var _a, _b;
        this.configuration = props.configuration;
        this.credentialProvider = props.credentialProvider;
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors());
        const compression = this.configuration.getCompressionStrategy();
        if (compression !== undefined) {
            this.compressionDetails = {
                valueCompressor: compression.compressorFactory,
                compressionLevel: (_a = compression.compressionLevel) !== null && _a !== void 0 ? _a : __1.CompressionLevel.Balanced,
                autoDecompressEnabled: ((_b = compression.automaticDecompression) !== null && _b !== void 0 ? _b : __1.AutomaticDecompression.Enabled) === __1.AutomaticDecompression.Enabled
            };
        } else {
            this.compressionDetails = undefined;
        }
        this.requestConcurrencySemaphore = semaphore;
        const grpcConfig = this.configuration.getTransportStrategy().getGrpcConfig();
        this.requestTimeoutMs = grpcConfig.getDeadlineMillis() || CacheDataClient.DEFAULT_REQUEST_TIMEOUT_MS;
        this.validateRequestTimeout(this.requestTimeoutMs);
        this.logger.debug(`Creating cache client using endpoint: '${this.credentialProvider.getCacheEndpoint()}'`);
        const channelOptions = (0, grpc_channel_options_1.grpcChannelOptionsFromGrpcConfig)(grpcConfig);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: ()=>{
                this.logger.debug(`Constructing channel for clientID ${dataClientID}`);
                return new grpcCache.ScsClient(this.credentialProvider.getCacheEndpoint(), this.credentialProvider.isCacheEndpointSecure() ? grpc_js_1.ChannelCredentials.createSsl() : grpc_js_1.ChannelCredentials.createInsecure(), channelOptions);
            },
            loggerFactory: this.configuration.getLoggerFactory(),
            maxIdleMillis: this.configuration.getTransportStrategy().getMaxIdleMillis(),
            maxClientAgeMillis: this.configuration.getTransportStrategy().getMaxClientAgeMillis()
        });
        this.textEncoder = new util_1.TextEncoder();
        this.defaultTtlSeconds = props.defaultTtlSeconds;
        // this context object is currently internal only but can be extended in the Configuration object is we wants clients
        // to be able to set it.
        const context = {};
        context[exports.CONNECTION_ID_KEY] = dataClientID;
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('agent', `nodejs:cache:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`)
        ];
        // Not sending a head concern header is treated the same as sending a BALANCED read concern header
        const readConcern = this.configuration.getReadConcern();
        if (readConcern !== __1.ReadConcern.BALANCED) {
            headers.push(new headers_interceptor_1.Header('read-concern', readConcern));
        }
        this.interceptors = this.initializeInterceptors(headers, this.configuration.getLoggerFactory(), this.configuration.getMiddlewares(), context);
        this.streamingInterceptors = this.initializeStreamingInterceptors(headers);
    }
    close() {
        this.logger.debug('Closing cache data client');
        this.clientWrapper.getClient().close();
    }
    connect(timeoutSeconds = 10) {
        this.logger.debug('Attempting to eagerly connect to channel');
        const deadline = new Date();
        deadline.setSeconds(deadline.getSeconds() + timeoutSeconds);
        return this.connectWithinDeadline(deadline);
    }
    connectionStateToString(state) {
        switch(state){
            case connectivity_state_1.ConnectivityState.IDLE:
                return 'IDLE';
            case connectivity_state_1.ConnectivityState.CONNECTING:
                return 'CONNECTING';
            case connectivity_state_1.ConnectivityState.READY:
                return 'READY';
            case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:
                return 'TRANSIENT_FAILURE';
            case connectivity_state_1.ConnectivityState.SHUTDOWN:
                return 'SHUTDOWN';
        }
    }
    connectWithinDeadline(deadline) {
        return new Promise((resolve, reject)=>{
            // Get the current state and initiate a connection
            const currentState = this.clientWrapper.getClient().getChannel().getConnectivityState(true);
            this.logger.debug(`Client connectivity state: ${currentState}`);
            if (currentState === connectivity_state_1.ConnectivityState.READY) {
                resolve();
                return;
            }
            const now = new Date();
            if (now >= deadline) {
                const errorMessage = 'Unable to connect to Momento: deadline exceeded.';
                this.logger.error(errorMessage);
                reject(new errors_1.ConnectionError(errorMessage));
                return;
            }
            this.clientWrapper.getClient().getChannel().watchConnectivityState(currentState, deadline, (error)=>{
                if (error) {
                    const errorMessage = `Unable to eagerly connect to Momento. Please contact Momento if this persists. currentState: ${this.connectionStateToString(currentState)}, errorName: ${error.name} : errorMessage: ${error.message}, errorStack: ${error.stack ? error.stack : 'Stack trace undefined'}`;
                    this.logger.error(errorMessage);
                    reject(new errors_1.ConnectionError(errorMessage));
                    return;
                }
                const newState = this.clientWrapper.getClient().getChannel().getConnectivityState(false);
                if (newState === connectivity_state_1.ConnectivityState.READY) {
                    this.logger.debug(`Connected! Current state: ${this.connectionStateToString(newState)}`);
                    resolve();
                } else if (newState === connectivity_state_1.ConnectivityState.CONNECTING) {
                    // The connection goes through the CONNECTING state before becoming READY,
                    // so we must watch it twice.
                    this.logger.debug(`Connecting! Current state: ${this.connectionStateToString(newState)}`);
                    this.connectWithinDeadline(deadline).then(resolve).catch(reject);
                } else {
                    const errorMessage = `Unable to connect to Momento: Unexpected connection state: ${this.connectionStateToString(newState)}., oldState: ${this.connectionStateToString(currentState)}
              Please contact Momento if this persists.`;
                    this.logger.error(errorMessage);
                    reject(new errors_1.ConnectionError(errorMessage));
                    return;
                }
            });
        });
    }
    getEndpoint() {
        const endpoint = this.credentialProvider.getCacheEndpoint();
        this.logger.debug(`Using cache endpoint: ${endpoint}`);
        return endpoint;
    }
    validateRequestTimeout(timeout) {
        this.logger.debug(`Request timeout ms: ${String(timeout)}`);
        if (timeout !== undefined && timeout <= 0) {
            throw new __1.InvalidArgumentError('request timeout must be greater than zero.');
        }
    }
    convertECacheResult(result) {
        switch(result){
            case grpcCache.ECacheResult.Hit:
                return grpc_response_types_1._ECacheResult.Hit;
            case grpcCache.ECacheResult.Invalid:
                return grpc_response_types_1._ECacheResult.Invalid;
            case grpcCache.ECacheResult.Miss:
                return grpc_response_types_1._ECacheResult.Miss;
            case grpcCache.ECacheResult.Ok:
                return grpc_response_types_1._ECacheResult.Ok;
        }
    }
    convertItemTypeResult(result) {
        switch(result){
            case _ItemGetTypeResponse.ItemType.SCALAR:
                return __1.ItemType.SCALAR;
            case _ItemGetTypeResponse.ItemType.LIST:
                return __1.ItemType.LIST;
            case _ItemGetTypeResponse.ItemType.DICTIONARY:
                return __1.ItemType.DICTIONARY;
            case _ItemGetTypeResponse.ItemType.SET:
                return __1.ItemType.SET;
            case _ItemGetTypeResponse.ItemType.SORTED_SET:
                return __1.ItemType.SORTED_SET;
        }
    }
    // If maxConcurrentRequests is set, use the semaphore to limit the number of concurrent requests.
    // Otherwise, execute the cache operation without any rate limiting.
    async rateLimited(cacheOperation) {
        try {
            if (this.requestConcurrencySemaphore !== undefined) await this.requestConcurrencySemaphore.acquire();
            return await cacheOperation();
        } finally{
            if (this.requestConcurrencySemaphore !== undefined) this.requestConcurrencySemaphore.release();
        }
    }
    async set(cacheName, key, value, options) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if ((options === null || options === void 0 ? void 0 : options.ttl) !== undefined) {
                (0, utils_1.validateTtlSeconds)(options.ttl);
            }
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSet.Error(err));
        }
        const ttlToUse = (options === null || options === void 0 ? void 0 : options.ttl) || this.defaultTtlSeconds;
        const encodedKey = this.convert(key);
        let encodedValue = this.convert(value);
        if (options === null || options === void 0 ? void 0 : options.compress) {
            this.logger.trace('CacheClient.set; compression enabled, calling value compressor');
            if (this.compressionDetails === undefined) {
                return this.cacheServiceErrorMapper.returnOrThrowError(new compression_error_1.CompressionError('CacheClient.set', 'compress'), (err)=>new __1.CacheSet.Error(err));
            }
            encodedValue = await this.compressionDetails.valueCompressor.compress(this.compressionDetails.compressionLevel, encodedValue);
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSet(cacheName, encodedKey, encodedValue, ttlToUse);
        });
    }
    async sendSet(cacheName, key, value, ttl) {
        const request = new grpcCache._SetRequest({
            cache_body: value,
            cache_key: key,
            ttl_milliseconds: ttl * 1000
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().Set(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheSet.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSet.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setFetch(cacheName, setName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetFetch.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetFetch(cacheName, this.convert(setName));
        });
    }
    async sendSetFetch(cacheName, setName) {
        const request = new grpcCache._SetFetchRequest({
            set_name: setName
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetFetch(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSetFetch.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheSetFetch.Hit(resp.found.elements));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setAddElements(cacheName, setName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetAddElements.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetAddElements(cacheName, this.convert(setName), this.convertArray(elements), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        });
    }
    async sendSetAddElements(cacheName, setName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SetUnionRequest({
            set_name: setName,
            elements: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetUnion(request, metadata, {
                interceptors: this.interceptors
            }, (err)=>{
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetAddElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new __1.CacheSetAddElements.Success());
                }
            });
        });
    }
    async setContainsElement(cacheName, setName, element) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetContainsElement.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetContainsElement(cacheName, this.convert(setName), this.convert(element));
        });
    }
    async sendSetContainsElement(cacheName, setName, element) {
        const request = new grpcCache._SetContainsRequest({
            set_name: setName,
            elements: [
                element
            ]
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetContains(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    const found_mask = resp === null || resp === void 0 ? void 0 : resp.found.contains;
                    if (found_mask === undefined || found_mask.length === 0) {
                        return reject(new __1.CacheSetContainsElement.Error(new __1.UnknownError('SetContains response missing contains mask')));
                    }
                    resolve(new __1.CacheSetContainsElement.Hit(found_mask[0]));
                } else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSetContainsElement.Miss());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetContainsElement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setContainsElements(cacheName, setName, elements) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetContainsElements.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetContainsElements(cacheName, this.convert(setName), this.convertArray(elements));
        });
    }
    async sendSetContainsElements(cacheName, setName, elements) {
        const request = new grpcCache._SetContainsRequest({
            set_name: setName,
            elements: elements
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetContains(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheSetContainsElements.Hit(elements, resp === null || resp === void 0 ? void 0 : resp.found.contains));
                } else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSetContainsElements.Miss());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetContainsElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setRemoveElements(cacheName, setName, elements) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetRemoveElements.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetRemoveElements(cacheName, this.convert(setName), this.convertArray(elements));
        });
    }
    async sendSetRemoveElements(cacheName, setName, elements) {
        const subtrahend = new grpcCache._SetDifferenceRequest._Subtrahend({
            set: new grpcCache._SetDifferenceRequest._Subtrahend._Set({
                elements: elements
            })
        });
        const request = new grpcCache._SetDifferenceRequest({
            set_name: setName,
            subtrahend: subtrahend
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetDifference(request, metadata, {
                interceptors: this.interceptors
            }, (err)=>{
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetRemoveElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new __1.CacheSetRemoveElements.Success());
                }
            });
        });
    }
    async setSample(cacheName, setName, limit) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
            (0, utils_1.validateSetSampleLimit)(limit);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetSample.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetSample(cacheName, this.convert(setName), limit);
        });
    }
    async sendSetSample(cacheName, setName, limit) {
        const request = new grpcCache._SetSampleRequest({
            set_name: setName,
            limit: limit
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetSample(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSetSample.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheSetSample.Hit(resp.found.elements));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetSample.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setPop(cacheName, setName, count) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
            (0, utils_1.validateSetPopCount)(count);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.CacheSetPop.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetPop(cacheName, this.convert(setName), count);
        });
    }
    async sendSetPop(cacheName, setName, count) {
        const request = new grpcCache._SetPopRequest({
            set_name: setName,
            count: count
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetPop(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new sdk_core_1.CacheSetPop.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new sdk_core_1.CacheSetPop.Hit(resp.found.elements));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.CacheSetPop.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setLength(cacheName, setName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.CacheSetLength.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetLength(cacheName, this.convert(setName));
        });
    }
    async sendSetLength(cacheName, setName) {
        const request = new grpcCache._SetLengthRequest({
            set_name: setName
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetLength(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new sdk_core_1.CacheSetLength.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    if (!resp.found.length) {
                        resolve(new sdk_core_1.CacheSetLength.Miss());
                    } else {
                        resolve(new sdk_core_1.CacheSetLength.Hit(resp.found.length));
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.CacheSetLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    // setIfNotExists is deprecated on the service. Here we call the new `SetIf` method with the absent field set
    // and return `CacheSetIfNotExists` responses.
    async setIfNotExists(cacheName, key, value, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetIfNotExists.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetIfNotExists(cacheName, this.convert(key), this.convert(value), ttl ? ttl * 1000 : this.defaultTtlSeconds * 1000);
        });
    }
    async sendSetIfNotExists(cacheName, key, value, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            absent: new Absent()
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    switch(resp.result){
                        case 'stored':
                            resolve(new __1.CacheSetIfNotExists.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfNotExists.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfNotExists.Error(new __1.UnknownError('SetIfNotExists responded with an unknown result')));
                            break;
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetIfNotExists.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setIfAbsent(cacheName, key, value, options) {
        const ttl = options === null || options === void 0 ? void 0 : options.ttl;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetIfAbsent.Error(err));
        }
        return await this.rateLimited(async ()=>{
            let encodedValue = this.convert(value);
            if (options === null || options === void 0 ? void 0 : options.compress) {
                this.logger.trace('CacheClient.setIfAbsent; compression enabled, calling value compressor');
                if (this.compressionDetails === undefined) {
                    return this.cacheServiceErrorMapper.returnOrThrowError(new __1.InvalidArgumentError('Compressor is not set, but `CacheClient.setIfAbsent` was called with the `compress` option; please install @gomomento/sdk-nodejs-compression and call `Configuration.withCompressionStrategy` to enable compression.'), (err)=>new __1.CacheSetIfAbsent.Error(err));
                }
                encodedValue = await this.compressionDetails.valueCompressor.compress(this.compressionDetails.compressionLevel, encodedValue);
            }
            return await this.sendSetIfAbsent(cacheName, this.convert(key), encodedValue, ttl ? ttl * 1000 : this.defaultTtlSeconds * 1000);
        });
    }
    async sendSetIfAbsent(cacheName, key, value, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            absent: new Absent()
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    switch(resp.result){
                        case 'stored':
                            resolve(new __1.CacheSetIfAbsent.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfAbsent.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfAbsent.Error(new __1.UnknownError('SetIfAbsent responded with an unknown result')));
                            break;
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetIfAbsent.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setIfPresent(cacheName, key, value, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetIfPresent.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetIfPresent(cacheName, this.convert(key), this.convert(value), ttl ? ttl * 1000 : this.defaultTtlSeconds * 1000);
        });
    }
    async sendSetIfPresent(cacheName, key, value, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            present: new Present()
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    switch(resp.result){
                        case 'stored':
                            resolve(new __1.CacheSetIfPresent.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfPresent.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfPresent.Error(new __1.UnknownError('SetIfPresent responded with an unknown result')));
                            break;
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetIfPresent.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setIfEqual(cacheName, key, value, equal, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetIfEqual.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetIfEqual(cacheName, this.convert(key), this.convert(value), this.convert(equal), ttl ? ttl * 1000 : this.defaultTtlSeconds * 1000);
        });
    }
    async sendSetIfEqual(cacheName, key, value, equal, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            equal: new Equal({
                value_to_check: equal
            })
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    switch(resp.result){
                        case 'stored':
                            resolve(new __1.CacheSetIfEqual.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfEqual.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfEqual.Error(new __1.UnknownError('SetIfEqual responded with an unknown result')));
                            break;
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetIfEqual.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setIfNotEqual(cacheName, key, value, notEqual, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetIfNotEqual.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetIfNotEqual(cacheName, this.convert(key), this.convert(value), this.convert(notEqual), ttl ? ttl * 1000 : this.defaultTtlSeconds * 1000);
        });
    }
    async sendSetIfNotEqual(cacheName, key, value, notEqual, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            not_equal: new NotEqual({
                value_to_check: notEqual
            })
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    switch(resp.result){
                        case 'stored':
                            resolve(new __1.CacheSetIfNotEqual.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfNotEqual.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfNotEqual.Error(new __1.UnknownError('SetIfNotEqual responded with an unknown result')));
                            break;
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetIfNotEqual.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setIfPresentAndNotEqual(cacheName, key, value, notEqual, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetIfPresentAndNotEqual.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetIfPresentAndNotEqual(cacheName, this.convert(key), this.convert(value), this.convert(notEqual), ttl ? ttl * 1000 : this.defaultTtlSeconds * 1000);
        });
    }
    async sendSetIfPresentAndNotEqual(cacheName, key, value, notEqual, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            present_and_not_equal: new PresentAndNotEqual({
                value_to_check: notEqual
            })
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    switch(resp.result){
                        case 'stored':
                            resolve(new __1.CacheSetIfPresentAndNotEqual.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfPresentAndNotEqual.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfPresentAndNotEqual.Error(new __1.UnknownError('SetIfPresentAndNotEqual responded with an unknown result')));
                            break;
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetIfPresentAndNotEqual.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async setIfAbsentOrEqual(cacheName, key, value, equal, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetIfAbsentOrEqual.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSetIfAbsentOrEqual(cacheName, this.convert(key), this.convert(value), this.convert(equal), ttl ? ttl * 1000 : this.defaultTtlSeconds * 1000);
        });
    }
    async sendSetIfAbsentOrEqual(cacheName, key, value, equal, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            absent_or_equal: new AbsentOrEqual({
                value_to_check: equal
            })
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    switch(resp.result){
                        case 'stored':
                            resolve(new __1.CacheSetIfAbsentOrEqual.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfAbsentOrEqual.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfAbsentOrEqual.Error(new __1.UnknownError('SetIfAbsentOrEqual responded with an unknown result')));
                            break;
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSetIfAbsentOrEqual.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async delete(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheDelete.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendDelete(cacheName, this.convert(key));
        });
    }
    async sendDelete(cacheName, key) {
        const request = new grpcCache._DeleteRequest({
            cache_key: key
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().Delete(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheDelete.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheDelete.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async get(cacheName, key, options) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheGet.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendGet(cacheName, this.convert(key), options);
        });
    }
    async sendGet(cacheName, key, options) {
        const request = new grpcCache._GetRequest({
            cache_key: key
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().Get(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                var _a, _b;
                if (resp) {
                    switch(resp.result){
                        case grpcCache.ECacheResult.Miss:
                            resolve(new __1.CacheGet.Miss());
                            break;
                        case grpcCache.ECacheResult.Hit:
                            {
                                const shouldDecompress = (_a = options === null || options === void 0 ? void 0 : options.decompress) !== null && _a !== void 0 ? _a : ((_b = this.compressionDetails) === null || _b === void 0 ? void 0 : _b.autoDecompressEnabled) === true;
                                if (!shouldDecompress) {
                                    resolve(new __1.CacheGet.Hit(resp.cache_body));
                                } else {
                                    if (this.compressionDetails === undefined) {
                                        resolve(new __1.CacheGet.Error(new compression_error_1.CompressionError('CacheClient.Get', 'decompress')));
                                    } else {
                                        this.compressionDetails.valueCompressor.decompressIfCompressed(resp.cache_body).then((v)=>resolve(new __1.CacheGet.Hit(v))).catch((e)=>resolve(// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                                            new __1.CacheGet.Error(new __1.InvalidArgumentError(`${e}`))));
                                    }
                                }
                                break;
                            }
                        case grpcCache.ECacheResult.Invalid:
                        case grpcCache.ECacheResult.Ok:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError(resp.message)));
                            break;
                        default:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError('An unknown error occurred: ' + resp.message)));
                            break;
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheGet.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async getBatch(cacheName, keys, options) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheGetBatch.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendGetBatch(cacheName, keys.map((key)=>this.convert(key)), options === null || options === void 0 ? void 0 : options.decompress);
        });
    }
    async sendGetBatch(cacheName, keys, decompress) {
        const getRequests = [];
        for (const k of keys){
            const getRequest = new grpcCache._GetRequest({
                cache_key: k
            });
            getRequests.push(getRequest);
        }
        const request = new grpcCache._GetBatchRequest({
            items: getRequests
        });
        const metadata = this.createMetadata(cacheName);
        const call = this.clientWrapper.getClient().GetBatch(request, metadata, {
            interceptors: this.streamingInterceptors
        });
        return await new Promise((resolve, reject)=>{
            const results = [];
            call.on('data', (getResponse)=>{
                const result = getResponse.result;
                switch(result){
                    case grpcCache.ECacheResult.Hit:
                        results.push(new __1.CacheGet.Hit(getResponse.cache_body));
                        break;
                    case grpcCache.ECacheResult.Miss:
                        results.push(new __1.CacheGet.Miss());
                        break;
                    default:
                        results.push(new __1.CacheGet.Error(new __1.UnknownError(getResponse.message)));
                }
            });
            call.on('end', ()=>{
                var _a;
                const shouldDecompress = decompress !== null && decompress !== void 0 ? decompress : ((_a = this.compressionDetails) === null || _a === void 0 ? void 0 : _a.autoDecompressEnabled) === true;
                if (!shouldDecompress) {
                    resolve(new __1.CacheGetBatch.Success(results, keys));
                } else {
                    if (this.compressionDetails === undefined) {
                        resolve(new __1.CacheGetBatch.Error(new compression_error_1.CompressionError('CacheClient.Get', 'decompress')));
                    } else {
                        const compressor = this.compressionDetails.valueCompressor;
                        Promise.all(results.map(async (r)=>{
                            if (r instanceof __1.CacheGet.Hit) {
                                return new __1.CacheGet.Hit(await compressor.decompressIfCompressed(r.valueUint8Array()));
                            }
                            return r;
                        })).then((decompressedResults)=>resolve(new __1.CacheGetBatch.Success(decompressedResults, keys))).catch((e)=>// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                            resolve(new __1.CacheGetBatch.Error(new __1.UnknownError(`${e}`))));
                    }
                }
            });
            call.on('error', (err)=>{
                this.cacheServiceErrorMapper.resolveOrRejectError({
                    err: err,
                    errorResponseFactoryFn: (e)=>new __1.CacheGetBatch.Error(e),
                    resolveFn: resolve,
                    rejectFn: reject
                });
            });
        });
    }
    async setBatch(cacheName, items, options) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if ((options === null || options === void 0 ? void 0 : options.ttl) !== undefined) {
                (0, utils_1.validateTtlSeconds)(options === null || options === void 0 ? void 0 : options.ttl);
            }
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSetBatch.Error(err));
        }
        const ttlToUse = (options === null || options === void 0 ? void 0 : options.ttl) || this.defaultTtlSeconds;
        return await this.rateLimited(async ()=>{
            let itemsToUse = this.convertSetBatchElements(items, ttlToUse);
            if (options === null || options === void 0 ? void 0 : options.compress) {
                this.logger.trace('CacheClient.setBatch; compression enabled, calling value compressor');
                if (this.compressionDetails === undefined) {
                    return this.cacheServiceErrorMapper.returnOrThrowError(new compression_error_1.CompressionError('CacheClient.setBatch', 'compress'), (err)=>new __1.CacheSetBatch.Error(err));
                } else {
                    const compressor = this.compressionDetails.valueCompressor;
                    const compressionLevel = this.compressionDetails.compressionLevel;
                    itemsToUse = await Promise.all(itemsToUse.map(async ([key, value, ttl])=>{
                        return [
                            key,
                            await compressor.compress(compressionLevel, value),
                            ttl
                        ];
                    }));
                }
            }
            return await this.sendSetBatch(cacheName, itemsToUse);
        });
    }
    async sendSetBatch(cacheName, items) {
        const setRequests = [];
        for (const item of items){
            const setRequest = new grpcCache._SetRequest({
                cache_key: item[0],
                cache_body: item[1],
                ttl_milliseconds: item[2] * 1000
            });
            setRequests.push(setRequest);
        }
        const request = new grpcCache._SetBatchRequest({
            items: setRequests
        });
        const metadata = this.createMetadata(cacheName);
        const call = this.clientWrapper.getClient().SetBatch(request, metadata, {
            interceptors: this.streamingInterceptors
        });
        return await new Promise((resolve, reject)=>{
            const results = [];
            call.on('data', (setResponse)=>{
                const result = setResponse.result;
                switch(result){
                    case grpcCache.ECacheResult.Ok:
                        results.push(new __1.CacheSet.Success());
                        break;
                    default:
                        results.push(new __1.CacheSet.Error(new __1.UnknownError(setResponse.message)));
                }
            });
            call.on('end', ()=>{
                resolve(new __1.CacheSetBatch.Success(results));
            });
            call.on('error', (err)=>{
                this.cacheServiceErrorMapper.resolveOrRejectError({
                    err: err,
                    errorResponseFactoryFn: (e)=>new __1.CacheSetBatch.Error(e),
                    resolveFn: resolve,
                    rejectFn: reject
                });
            });
        });
    }
    async listConcatenateBack(cacheName, listName, values, truncateFrontToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheListConcatenateBack.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendListConcatenateBack(cacheName, this.convert(listName), this.convertArray(values), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateFrontToSize);
        });
    }
    async sendListConcatenateBack(cacheName, listName, values, ttlMilliseconds, refreshTtl, truncateFrontToSize) {
        const request = new grpcCache._ListConcatenateBackRequest({
            list_name: listName,
            values: values,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_front_to_size: truncateFrontToSize
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ListConcatenateBack(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheListConcatenateBack.Success(resp.list_length));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheListConcatenateBack.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async listConcatenateFront(cacheName, listName, values, truncateBackToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheListConcatenateFront.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendListConcatenateFront(cacheName, this.convert(listName), this.convertArray(values), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateBackToSize);
        });
    }
    async sendListConcatenateFront(cacheName, listName, values, ttlMilliseconds, refreshTtl, truncateBackToSize) {
        const request = new grpcCache._ListConcatenateFrontRequest({
            list_name: listName,
            values: values,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_back_to_size: truncateBackToSize
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ListConcatenateFront(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheListConcatenateFront.Success(resp.list_length));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheListConcatenateFront.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async listFetch(cacheName, listName, startIndex, endIndex) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
            (0, utils_1.validateListSliceStartEnd)(startIndex, endIndex);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheListFetch.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendListFetch(cacheName, this.convert(listName), startIndex, endIndex);
        });
    }
    async sendListFetch(cacheName, listName, start, end) {
        const request = new grpcCache._ListFetchRequest({
            list_name: listName
        });
        if (start) {
            request.inclusive_start = start;
        } else {
            request.unbounded_start = new _Unbounded();
        }
        if (end) {
            request.exclusive_end = end;
        } else {
            request.unbounded_end = new _Unbounded();
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ListFetch(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListFetch.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListFetch.Hit(resp.found.values));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheListFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async listRetain(cacheName, listName, startIndex, endIndex, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
            (0, utils_1.validateListSliceStartEnd)(startIndex, endIndex);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheListRetain.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendListRetain(cacheName, this.convert(listName), startIndex, endIndex, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        });
    }
    async sendListRetain(cacheName, listName, start, end, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._ListRetainRequest({
            list_name: listName,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl
        });
        if (start) {
            request.inclusive_start = start;
        } else {
            request.unbounded_start = new _Unbounded();
        }
        if (end) {
            request.exclusive_end = end;
        } else {
            request.unbounded_end = new _Unbounded();
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ListRetain(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheListRetain.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheListRetain.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async listLength(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheListLength.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendListLength(cacheName, this.convert(listName));
        });
    }
    async sendListLength(cacheName, listName) {
        const request = new grpcCache._ListLengthRequest({
            list_name: listName
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ListLength(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListLength.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListLength.Hit(resp.found.length));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheListLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async listPopBack(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheListPopBack.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendListPopBack(cacheName, this.convert(listName));
        });
    }
    async sendListPopBack(cacheName, listName) {
        const request = new grpcCache._ListPopBackRequest({
            list_name: listName
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ListPopBack(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListPopBack.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListPopBack.Hit(resp.found.back));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheListPopBack.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async listPopFront(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheListPopFront.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendListPopFront(cacheName, this.convert(listName));
        });
    }
    async sendListPopFront(cacheName, listName) {
        const request = new grpcCache._ListPopFrontRequest({
            list_name: listName
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ListPopFront(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListPopFront.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListPopFront.Hit(resp.found.front));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheListPopFront.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async listPushBack(cacheName, listName, value, truncateFrontToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheListPushBack.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendListPushBack(cacheName, this.convert(listName), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateFrontToSize);
        });
    }
    async sendListPushBack(cacheName, listName, value, ttlMilliseconds, refreshTtl, truncateFrontToSize) {
        const request = new grpcCache._ListPushBackRequest({
            list_name: listName,
            value: value,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_front_to_size: truncateFrontToSize
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ListPushBack(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheListPushBack.Success(resp.list_length));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheListPushBack.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async listPushFront(cacheName, listName, value, truncateBackToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheListPushFront.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendListPushFront(cacheName, this.convert(listName), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateBackToSize);
        });
    }
    async sendListPushFront(cacheName, listName, value, ttlMilliseconds, refreshTtl, truncateBackToSize) {
        const request = new grpcCache._ListPushFrontRequest({
            list_name: listName,
            value: value,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_back_to_size: truncateBackToSize
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ListPushFront(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheListPushFront.Success(resp.list_length));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheListPushFront.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async listRemoveValue(cacheName, listName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheListRemoveValue.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendListRemoveValue(cacheName, this.convert(listName), this.convert(value));
        });
    }
    async sendListRemoveValue(cacheName, listName, value) {
        const request = new grpcCache._ListRemoveRequest({
            list_name: listName,
            all_elements_with_value: value
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ListRemove(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheListRemoveValue.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheListRemoveValue.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async dictionaryFetch(cacheName, dictionaryName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheDictionaryFetch.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendDictionaryFetch(cacheName, this.convert(dictionaryName));
        });
    }
    async sendDictionaryFetch(cacheName, dictionaryName) {
        const request = new grpcCache._DictionaryFetchRequest({
            dictionary_name: dictionaryName
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().DictionaryFetch(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheDictionaryFetch.Hit(resp.found.items));
                } else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDictionaryFetch.Miss());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheDictionaryFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async dictionarySetField(cacheName, dictionaryName, field, value, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheDictionarySetField.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendDictionarySetField(cacheName, this.convert(dictionaryName), this.convert(field), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        });
    }
    async sendDictionarySetField(cacheName, dictionaryName, field, value, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionarySetRequest({
            dictionary_name: dictionaryName,
            items: this.toSingletonFieldValuePair(field, value),
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().DictionarySet(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheDictionarySetField.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheDictionarySetField.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async dictionarySetFields(cacheName, dictionaryName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheDictionarySetFields.Error(err));
        }
        return await this.rateLimited(async ()=>{
            const dictionaryFieldValuePairs = this.convertElements(elements);
            return await this.sendDictionarySetFields(cacheName, this.convert(dictionaryName), dictionaryFieldValuePairs, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        });
    }
    async sendDictionarySetFields(cacheName, dictionaryName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionarySetRequest({
            dictionary_name: dictionaryName,
            items: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().DictionarySet(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheDictionarySetFields.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheDictionarySetFields.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async dictionaryGetField(cacheName, dictionaryName, field) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheDictionaryGetField.Error(err, this.convert(field)));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendDictionaryGetField(cacheName, this.convert(dictionaryName), this.convert(field));
        });
    }
    async sendDictionaryGetField(cacheName, dictionaryName, field) {
        const request = new grpcCache._DictionaryGetRequest({
            dictionary_name: dictionaryName,
            fields: [
                field
            ]
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().DictionaryGet(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'missing') {
                    resolve(new __1.CacheDictionaryGetField.Miss(field));
                } else if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'found') {
                    if ((resp === null || resp === void 0 ? void 0 : resp.found.items.length) === 0) {
                        resolve(new __1.CacheDictionaryGetField.Error(new __1.UnknownError('_DictionaryGetResponseResponse contained no data but was found'), field));
                    } else if ((resp === null || resp === void 0 ? void 0 : resp.found.items[0].result) === grpcCache.ECacheResult.Miss) {
                        resolve(new __1.CacheDictionaryGetField.Miss(field));
                    } else {
                        resolve(new __1.CacheDictionaryGetField.Hit(resp === null || resp === void 0 ? void 0 : resp.found.items[0].cache_body, field));
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheDictionaryGetField.Error(e, field),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async dictionaryGetFields(cacheName, dictionaryName, fields) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheDictionaryGetFields.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendDictionaryGetFields(cacheName, this.convert(dictionaryName), this.convertArray(fields));
        });
    }
    async sendDictionaryGetFields(cacheName, dictionaryName, fields) {
        const request = new grpcCache._DictionaryGetRequest({
            dictionary_name: dictionaryName,
            fields: fields
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().DictionaryGet(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'found') {
                    const items = resp.found.items.map((item)=>{
                        const result = this.convertECacheResult(item.result);
                        return new grpc_response_types_1._DictionaryGetResponsePart(result, item.cache_body);
                    });
                    resolve(new __1.CacheDictionaryGetFields.Hit(items, fields));
                } else if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'missing') {
                    resolve(new __1.CacheDictionaryGetFields.Miss());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheDictionaryGetFields.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async dictionaryRemoveField(cacheName, dictionaryName, field) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheDictionaryRemoveField.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendDictionaryRemoveField(cacheName, this.convert(dictionaryName), this.convert(field));
        });
    }
    async sendDictionaryRemoveField(cacheName, dictionaryName, field) {
        const request = new grpcCache._DictionaryDeleteRequest({
            dictionary_name: dictionaryName,
            some: new grpcCache._DictionaryDeleteRequest.Some()
        });
        request.some.fields.push(field);
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().DictionaryDelete(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheDictionaryRemoveField.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheDictionaryRemoveField.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async dictionaryRemoveFields(cacheName, dictionaryName, fields) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheDictionaryRemoveFields.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendDictionaryRemoveFields(cacheName, this.convert(dictionaryName), this.convertArray(fields));
        });
    }
    async sendDictionaryRemoveFields(cacheName, dictionaryName, fields) {
        const request = new grpcCache._DictionaryDeleteRequest({
            dictionary_name: dictionaryName,
            some: new grpcCache._DictionaryDeleteRequest.Some()
        });
        fields.forEach((field)=>request.some.fields.push(field));
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().DictionaryDelete(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheDictionaryRemoveFields.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheDictionaryRemoveFields.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async dictionaryLength(cacheName, dictionaryName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheDictionaryLength.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendDictionaryLength(cacheName, this.convert(dictionaryName));
        });
    }
    async sendDictionaryLength(cacheName, dictionaryName) {
        const request = new grpcCache._DictionaryLengthRequest({
            dictionary_name: dictionaryName
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().DictionaryLength(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDictionaryLength.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheDictionaryLength.Hit(resp.found.length));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheDictionaryLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async increment(cacheName, field, amount = 1, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheIncrement.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendIncrement(cacheName, this.convert(field), amount, (ttl || this.defaultTtlSeconds) * 1000);
        });
    }
    async sendIncrement(cacheName, field, amount = 1, ttlMilliseconds) {
        const request = new grpcCache._IncrementRequest({
            cache_key: field,
            amount,
            ttl_milliseconds: ttlMilliseconds
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().Increment(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    if (resp.value) {
                        resolve(new __1.CacheIncrement.Success(resp.value));
                    } else {
                        resolve(new __1.CacheIncrement.Success(0));
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheIncrement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async dictionaryIncrement(cacheName, dictionaryName, field, amount = 1, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheDictionaryIncrement.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendDictionaryIncrement(cacheName, this.convert(dictionaryName), this.convert(field), amount, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        });
    }
    async sendDictionaryIncrement(cacheName, dictionaryName, field, amount, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionaryIncrementRequest({
            dictionary_name: dictionaryName,
            field,
            amount,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().DictionaryIncrement(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    if (resp.value) {
                        resolve(new __1.CacheDictionaryIncrement.Success(resp.value));
                    } else {
                        resolve(new __1.CacheDictionaryIncrement.Success(0));
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheDictionaryIncrement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async sortedSetPutElement(cacheName, sortedSetName, value, score, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSortedSetPutElement.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSortedSetPutElement(cacheName, this.convert(sortedSetName), this.convert(value), score, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        });
    }
    async sendSortedSetPutElement(cacheName, sortedSetName, value, score, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetPutRequest({
            set_name: sortedSetName,
            elements: [
                new grpcCache._SortedSetElement({
                    value,
                    score
                })
            ],
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SortedSetPut(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheSortedSetPutElement.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSortedSetPutElement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async sortedSetPutElements(cacheName, sortedSetName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSortedSetPutElements.Error(err));
        }
        return await this.rateLimited(async ()=>{
            const sortedSetValueScorePairs = this.convertSortedSetMapOrRecord(elements);
            return await this.sendSortedSetPutElements(cacheName, this.convert(sortedSetName), sortedSetValueScorePairs, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        });
    }
    async sendSortedSetPutElements(cacheName, sortedSetName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetPutRequest({
            set_name: sortedSetName,
            elements: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SortedSetPut(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheSortedSetPutElements.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSortedSetPutElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async sortedSetFetchByRank(cacheName, sortedSetName, order, startRank, endRank) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetRanks)(startRank, endRank);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSortedSetFetch.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSortedSetFetchByRank(cacheName, this.convert(sortedSetName), order, startRank, endRank);
        });
    }
    async sendSortedSetFetchByRank(cacheName, sortedSetName, order, startRank, endRank) {
        const by_index = new grpcCache._SortedSetFetchRequest._ByIndex();
        if (startRank) {
            by_index.inclusive_start_index = startRank;
        } else {
            by_index.unbounded_start = new _Unbounded();
        }
        if (endRank) {
            by_index.exclusive_end_index = endRank;
        } else {
            by_index.unbounded_end = new _Unbounded();
        }
        const protoBufOrder = order === __1.SortedSetOrder.Descending ? grpcCache._SortedSetFetchRequest.Order.DESCENDING : grpcCache._SortedSetFetchRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetFetchRequest({
            set_name: sortedSetName,
            order: protoBufOrder,
            with_scores: true,
            by_index: by_index
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SortedSetFetch(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                var _a;
                if (resp) {
                    if (resp === null || resp === void 0 ? void 0 : resp.found) {
                        if ((_a = resp === null || resp === void 0 ? void 0 : resp.found) === null || _a === void 0 ? void 0 : _a.values_with_scores) {
                            resolve(new __1.CacheSortedSetFetch.Hit(resp.found.values_with_scores.elements));
                        } else {
                            resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch hit response type')));
                        }
                    } else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                        resolve(new __1.CacheSortedSetFetch.Miss());
                    } else {
                        resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch response type')));
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSortedSetFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async sortedSetFetchByScore(cacheName, sortedSetName, order, minScore, maxScore, offset, count) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetScores)(minScore, maxScore);
            if (offset !== undefined) {
                (0, utils_1.validateSortedSetOffset)(offset);
            }
            if (count !== undefined) {
                (0, utils_1.validateSortedSetCount)(count);
            }
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSortedSetFetch.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSortedSetFetchByScore(cacheName, this.convert(sortedSetName), order, minScore, maxScore, offset, count);
        });
    }
    async sendSortedSetFetchByScore(cacheName, sortedSetName, order, minScore, maxScore, offset, count) {
        const by_score = new grpcCache._SortedSetFetchRequest._ByScore();
        if (minScore !== undefined) {
            by_score.min_score = new grpcCache._SortedSetFetchRequest._ByScore._Score({
                score: minScore,
                exclusive: false
            });
        } else {
            by_score.unbounded_min = new _Unbounded();
        }
        if (maxScore !== undefined) {
            by_score.max_score = new grpcCache._SortedSetFetchRequest._ByScore._Score({
                score: maxScore,
                exclusive: false
            });
        } else {
            by_score.unbounded_max = new _Unbounded();
        }
        by_score.offset = offset !== null && offset !== void 0 ? offset : 0;
        // Note: the service reserves negative counts to mean all elements in the
        // result set.
        by_score.count = count !== null && count !== void 0 ? count : -1;
        const protoBufOrder = order === __1.SortedSetOrder.Descending ? grpcCache._SortedSetFetchRequest.Order.DESCENDING : grpcCache._SortedSetFetchRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetFetchRequest({
            set_name: sortedSetName,
            order: protoBufOrder,
            with_scores: true,
            by_score: by_score
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SortedSetFetch(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                var _a;
                if (resp) {
                    if (resp === null || resp === void 0 ? void 0 : resp.found) {
                        if ((_a = resp === null || resp === void 0 ? void 0 : resp.found) === null || _a === void 0 ? void 0 : _a.values_with_scores) {
                            resolve(new __1.CacheSortedSetFetch.Hit(resp.found.values_with_scores.elements));
                        } else {
                            resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch hit response type')));
                        }
                    } else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                        resolve(new __1.CacheSortedSetFetch.Miss());
                    } else {
                        resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch response type')));
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSortedSetFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async sortedSetGetRank(cacheName, sortedSetName, value, order) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSortedSetGetRank.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSortedSetGetRank(cacheName, this.convert(sortedSetName), this.convert(value), order);
        });
    }
    async sendSortedSetGetRank(cacheName, sortedSetName, value, order) {
        const protoBufOrder = order === __1.SortedSetOrder.Descending ? grpcCache._SortedSetGetRankRequest.Order.DESCENDING : grpcCache._SortedSetGetRankRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetGetRankRequest({
            set_name: sortedSetName,
            value: value,
            order: protoBufOrder
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SortedSetGetRank(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                var _a, _b;
                if ((resp === null || resp === void 0 ? void 0 : resp.missing) || ((_a = resp === null || resp === void 0 ? void 0 : resp.element_rank) === null || _a === void 0 ? void 0 : _a.result) === ECacheResult.Miss) {
                    resolve(new __1.CacheSortedSetGetRank.Miss());
                } else if (((_b = resp === null || resp === void 0 ? void 0 : resp.element_rank) === null || _b === void 0 ? void 0 : _b.result) === ECacheResult.Hit) {
                    if ((resp === null || resp === void 0 ? void 0 : resp.element_rank.rank) === undefined) {
                        resolve(new __1.CacheSortedSetGetRank.Miss());
                    } else {
                        resolve(new __1.CacheSortedSetGetRank.Hit(resp.element_rank.rank));
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSortedSetGetRank.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async sortedSetGetScore(cacheName, sortedSetName, value) {
        const responses = await this.sortedSetGetScores(cacheName, sortedSetName, [
            value
        ]);
        if (responses instanceof __1.CacheSortedSetGetScores.Hit) {
            return responses.responses()[0];
        } else if (responses instanceof __1.CacheSortedSetGetScores.Miss) {
            return new __1.CacheSortedSetGetScore.Miss(this.convert(value));
        } else if (responses instanceof __1.CacheSortedSetGetScores.Error) {
            return this.cacheServiceErrorMapper.returnOrThrowError(responses.innerException(), (err)=>new __1.CacheSortedSetGetScore.Error(err, this.convert(value)));
        }
        return this.cacheServiceErrorMapper.returnOrThrowError(new __1.UnknownError('Unknown response type'), (err)=>new __1.CacheSortedSetGetScore.Error(err, this.convert(value)));
    }
    async sortedSetGetScores(cacheName, sortedSetName, values) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSortedSetGetScores.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSortedSetGetScores(cacheName, this.convert(sortedSetName), values.map((value)=>this.convert(value)));
        });
    }
    async sendSortedSetGetScores(cacheName, sortedSetName, values) {
        const request = new grpcCache._SortedSetGetScoreRequest({
            set_name: sortedSetName,
            values: values
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SortedSetGetScore(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetGetScores.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    const elements = resp.found.elements.map((ele)=>{
                        const result = this.convertECacheResult(ele.result);
                        return new grpc_response_types_1._SortedSetGetScoreResponsePart(result, ele.score);
                    });
                    resolve(new __1.CacheSortedSetGetScores.Hit(elements, values));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSortedSetGetScores.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async sortedSetIncrementScore(cacheName, sortedSetName, value, amount = 1, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSortedSetIncrementScore.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSortedSetIncrementScore(cacheName, this.convert(sortedSetName), this.convert(value), amount, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        });
    }
    async sendSortedSetIncrementScore(cacheName, sortedSetName, value, amount, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetIncrementRequest({
            set_name: sortedSetName,
            value: value,
            amount: amount,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SortedSetIncrement(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    if (resp.score) {
                        resolve(new __1.CacheSortedSetIncrementScore.Success(resp.score));
                    } else {
                        resolve(new __1.CacheSortedSetIncrementScore.Success(0));
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSortedSetIncrementScore.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async sortedSetRemoveElement(cacheName, sortedSetName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSortedSetRemoveElement.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSortedSetRemoveElement(cacheName, this.convert(sortedSetName), this.convert(value));
        });
    }
    async sendSortedSetRemoveElement(cacheName, sortedSetName, value) {
        const request = new grpcCache._SortedSetRemoveRequest({
            set_name: sortedSetName,
            some: new grpcCache._SortedSetRemoveRequest._Some({
                values: [
                    value
                ]
            })
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SortedSetRemove(request, metadata, {
                interceptors: this.interceptors
            }, (err)=>{
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSortedSetRemoveElement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new __1.CacheSortedSetRemoveElement.Success());
                }
            });
        });
    }
    async sortedSetRemoveElements(cacheName, sortedSetName, values) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSortedSetRemoveElements.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSortedSetRemoveElements(cacheName, this.convert(sortedSetName), this.convertArray(values));
        });
    }
    async sendSortedSetRemoveElements(cacheName, sortedSetName, values) {
        const request = new grpcCache._SortedSetRemoveRequest({
            set_name: sortedSetName,
            some: new grpcCache._SortedSetRemoveRequest._Some({
                values: values
            })
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SortedSetRemove(request, metadata, {
                interceptors: this.interceptors
            }, (err)=>{
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSortedSetRemoveElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new __1.CacheSortedSetRemoveElements.Success());
                }
            });
        });
    }
    async sortedSetLength(cacheName, sortedSetName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSortedSetLength.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSortedSetLength(cacheName, this.convert(sortedSetName));
        });
    }
    async sendSortedSetLength(cacheName, sortedSetName) {
        const request = new grpcCache._SortedSetLengthRequest({
            set_name: sortedSetName
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SortedSetLength(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetLength.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    if (!resp.found.length) {
                        resolve(new __1.CacheSortedSetLength.Miss());
                    } else {
                        resolve(new __1.CacheSortedSetLength.Hit(resp.found.length));
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSortedSetLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async sortedSetLengthByScore(cacheName, sortedSetName, minScore, maxScore) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetScores)(minScore, maxScore);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheSortedSetLengthByScore.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendSortedSetLengthByScore(cacheName, this.convert(sortedSetName), minScore, maxScore);
        });
    }
    async sendSortedSetLengthByScore(cacheName, sortedSetName, minScore, maxScore) {
        const request = new grpcCache._SortedSetLengthByScoreRequest({
            set_name: sortedSetName
        });
        if (minScore === undefined) {
            request.unbounded_min = new _Unbounded();
        } else {
            request.inclusive_min = minScore;
        }
        if (maxScore === undefined) {
            request.unbounded_max = new _Unbounded();
        } else {
            request.inclusive_max = maxScore;
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().SortedSetLengthByScore(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetLengthByScore.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    if (!resp.found.length) {
                        resolve(new __1.CacheSortedSetLengthByScore.Miss());
                    } else {
                        resolve(new __1.CacheSortedSetLengthByScore.Hit(resp.found.length));
                    }
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheSortedSetLengthByScore.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    initializeInterceptors(headers, loggerFactory, middlewares, middlewareRequestContext) {
        return [
            (0, middlewares_interceptor_1.middlewaresInterceptor)(loggerFactory, middlewares, middlewareRequestContext, this.clientWrapper.getClient()),
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'CacheDataClient',
                loggerFactory: this.configuration.getLoggerFactory(),
                retryStrategy: this.configuration.getRetryStrategy(),
                overallRequestTimeoutMs: this.requestTimeoutMs
            })
        ];
    }
    // TODO https://github.com/momentohq/client-sdk-nodejs/issues/349
    // decide on streaming interceptors and middlewares
    initializeStreamingInterceptors(headers) {
        return [
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers)
        ];
    }
    convert(v) {
        if (typeof v === 'string') {
            return this.textEncoder.encode(v);
        }
        return v;
    }
    convertArray(v) {
        return v.map((i)=>this.convert(i));
    }
    convertElements(elements) {
        if (elements instanceof Array) {
            return this.convertElements(new Map(elements));
        } else if (elements instanceof Map) {
            return [
                ...elements.entries()
            ].map((element)=>new grpcCache._DictionaryFieldValuePair({
                    field: this.convert(element[0]),
                    value: this.convert(element[1])
                }));
        } else {
            return Object.entries(elements).map((element)=>new grpcCache._DictionaryFieldValuePair({
                    field: this.convert(element[0]),
                    value: this.convert(element[1])
                }));
        }
    }
    convertSortedSetMapOrRecord(elements) {
        if (elements instanceof Array) {
            return this.convertSortedSetMapOrRecord(new Map(elements));
        } else if (elements instanceof Map) {
            return [
                ...elements.entries()
            ].map((element)=>new grpcCache._SortedSetElement({
                    value: this.convert(element[0]),
                    score: element[1]
                }));
        } else {
            return Object.entries(elements).map((element)=>new grpcCache._SortedSetElement({
                    value: this.convert(element[0]),
                    score: element[1]
                }));
        }
    }
    convertSetBatchElements(elements, ttl) {
        if (elements instanceof Array) {
            return elements.map((element)=>{
                var _a;
                return [
                    this.convert(element.key),
                    this.convert(element.value),
                    (_a = element.ttl) !== null && _a !== void 0 ? _a : ttl
                ];
            });
        } else if (elements instanceof Map) {
            return [
                ...elements.entries()
            ].map(([k, v])=>[
                    this.convert(k),
                    this.convert(v),
                    ttl
                ]);
        } else {
            return Object.entries(elements).map((element)=>[
                    this.convert(element[0]),
                    this.convert(element[1]),
                    ttl
                ]);
        }
    }
    async itemGetType(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheItemGetType.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendItemGetType(cacheName, this.convert(key));
        });
    }
    async sendItemGetType(cacheName, key) {
        const request = new grpcCache._ItemGetTypeRequest({
            cache_key: key
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ItemGetType(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheItemGetType.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheItemGetType.Hit(this.convertItemTypeResult(resp.found.item_type)));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheItemGetType.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async itemGetTtl(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheItemGetTtl.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendItemGetTtl(cacheName, this.convert(key));
        });
    }
    async sendItemGetTtl(cacheName, key) {
        const request = new grpcCache._ItemGetTtlRequest({
            cache_key: key
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().ItemGetTtl(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheItemGetTtl.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheItemGetTtl.Hit(resp.found.remaining_ttl_millis));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheItemGetTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async keyExists(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheKeyExists.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendKeyExists(cacheName, this.convert(key));
        });
    }
    async sendKeyExists(cacheName, key) {
        const request = new grpcCache._KeysExistRequest({
            cache_keys: [
                key
            ]
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().KeysExist(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheKeyExists.Success(resp.exists));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheKeyExists.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async updateTtl(cacheName, key, ttlMilliseconds) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheUpdateTtl.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendUpdateTtl(cacheName, this.convert(key), ttlMilliseconds);
        });
    }
    async sendUpdateTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            overwrite_to_milliseconds: ttlMilliseconds
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheUpdateTtl.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheUpdateTtl.Set());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheUpdateTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async keysExist(cacheName, keys) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheKeysExist.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendKeysExist(cacheName, this.convertArray(keys));
        });
    }
    async sendKeysExist(cacheName, keys) {
        const request = new grpcCache._KeysExistRequest({
            cache_keys: keys
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().KeysExist(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.CacheKeysExist.Success(keys, resp.exists));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheKeysExist.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async increaseTtl(cacheName, key, ttlMilliseconds) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheIncreaseTtl.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendIncreaseTtl(cacheName, this.convert(key), ttlMilliseconds);
        });
    }
    async sendIncreaseTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            increase_to_milliseconds: ttlMilliseconds
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheIncreaseTtl.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheIncreaseTtl.Set());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheIncreaseTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async decreaseTtl(cacheName, key, ttlMilliseconds) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new __1.CacheDecreaseTtl.Error(err));
        }
        return await this.rateLimited(async ()=>{
            return await this.sendDecreaseTtl(cacheName, this.convert(key), ttlMilliseconds);
        });
    }
    async sendDecreaseTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            decrease_to_milliseconds: ttlMilliseconds
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDecreaseTtl.Miss());
                } else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheDecreaseTtl.Set());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.CacheDecreaseTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    createMetadata(cacheName) {
        const metadata = new grpc_js_1.Metadata();
        metadata.set('cache', cacheName);
        return metadata;
    }
    toSingletonFieldValuePair(field, value) {
        return [
            new grpcCache._DictionaryFieldValuePair({
                field: field,
                value: value
            })
        ];
    }
}
exports.CacheDataClient = CacheDataClient;
CacheDataClient.DEFAULT_REQUEST_TIMEOUT_MS = 5 * 1000; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/pubsub-client.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PubsubClient = void 0;
const generated_types_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/index.js [app-route] (ecmascript)");
var grpcPubsub = generated_types_1.pubsub.cache_client.pubsub;
// older versions of node don't have the global util variables https://github.com/nodejs/node/issues/20365
const headers_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/headers-interceptor.js [app-route] (ecmascript)");
const cache_service_error_mapper_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/errors/cache-service-error-mapper.js [app-route] (ecmascript)");
const grpc_js_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/index.js [app-route] (ecmascript)");
const package_json_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/package.json (json)");
const middlewares_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/middlewares-interceptor.js [app-route] (ecmascript)");
const __1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/index.js [app-route] (ecmascript)");
const utils_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/index.js [app-route] (ecmascript)");
const AbstractPubsubClient_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/pubsub/AbstractPubsubClient.js [app-route] (ecmascript)");
const grpc_channel_options_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/grpc-channel-options.js [app-route] (ecmascript)");
const retry_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/retry-interceptor.js [app-route] (ecmascript)");
class PubsubClient extends AbstractPubsubClient_1.AbstractPubsubClient {
    // private static readonly RST_STREAM_NO_ERROR_MESSAGE =
    //   'Received RST_STREAM with code 0';
    /**
     * @param {TopicClientProps} props
     */ constructor(props){
        super(props.configuration.getLoggerFactory(), props.configuration.getLoggerFactory().getLogger(PubsubClient.name), new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors()));
        this.credentialProvider = props.credentialProvider;
        this.unaryRequestTimeoutMs = PubsubClient.DEFAULT_REQUEST_TIMEOUT_MS;
        this.getLogger().debug(`Creating topic client using endpoint: '${this.credentialProvider.getCacheEndpoint()}'`);
        const topicGrpcConfig = props.configuration.getTransportStrategy().getGrpcConfig();
        // NOTE: This is hard-coded for now but we may want to expose it via TopicConfiguration in the
        // future, as we do with some of the other clients.
        const grpcConfig = new __1.StaticGrpcConfiguration({
            deadlineMillis: this.unaryRequestTimeoutMs,
            maxSessionMemoryMb: PubsubClient.DEFAULT_MAX_SESSION_MEMORY_MB,
            keepAlivePermitWithoutCalls: topicGrpcConfig.getKeepAlivePermitWithoutCalls(),
            keepAliveTimeMs: topicGrpcConfig.getKeepAliveTimeMS(),
            keepAliveTimeoutMs: topicGrpcConfig.getKeepAliveTimeoutMS()
        });
        const channelOptions = (0, grpc_channel_options_1.grpcChannelOptionsFromGrpcConfig)(grpcConfig);
        this.getLogger().debug(`Creating pubsub client with channel options: ${JSON.stringify(channelOptions, null, 2)}`);
        this.client = new grpcPubsub.PubsubClient(this.credentialProvider.getCacheEndpoint(), this.credentialProvider.isCacheEndpointSecure() ? grpc_js_1.ChannelCredentials.createSsl() : grpc_js_1.ChannelCredentials.createInsecure(), channelOptions);
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('agent', `nodejs:topic:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`)
        ];
        this.unaryInterceptors = PubsubClient.initializeUnaryInterceptors(headers, props.configuration, this.unaryRequestTimeoutMs);
        this.streamingInterceptors = PubsubClient.initializeStreamingInterceptors(headers);
    }
    getEndpoint() {
        const endpoint = this.credentialProvider.getCacheEndpoint();
        this.getLogger().debug(`Using cache endpoint: ${endpoint}`);
        return endpoint;
    }
    async sendPublish(cacheName, topicName, value) {
        const topicValue = new grpcPubsub._TopicValue();
        if (typeof value === 'string') {
            topicValue.text = value;
        } else {
            topicValue.binary = value;
        }
        const request = new grpcPubsub._PublishRequest({
            cache_name: cacheName,
            topic: topicName,
            value: topicValue
        });
        return await new Promise((resolve, reject)=>{
            this.client.Publish(request, {
                interceptors: this.unaryInterceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new __1.TopicPublish.Success());
                } else {
                    this.getCacheServiceErrorMapper().resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.TopicPublish.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    /**
     * @remark This method is responsible for restarting the stream if it ends unexpectedly.
     * Since we return a single subscription object to the user, we need to update it with the
     * unsubscribe function should we restart the stream. This is why we pass the subscription
     * state and subscription object to this method.
     *
     * Handling a cache not exists requires special care as well. In the most likely case,
     * when the subscription starts and the cache does not exist, we receive an error immediately.
     * We return an error from the subscribe method and do immediately unsubscribe. In a distinct,
     * unlikely but possible case, the user deletes the cache while the stream is running. In this
     * case we already returned a subscription object to the user, so we instead cancel the stream and
     * propagate an error to the user via the error handler.
     */ sendSubscribe(options) {
        const request = new grpcPubsub._SubscriptionRequest({
            cache_name: options.cacheName,
            topic: options.topicName,
            resume_at_topic_sequence_number: options.subscriptionState.resumeAtTopicSequenceNumber
        });
        this.getLogger().trace('Subscribing to topic with resume_at_topic_sequence_number: %s', options.subscriptionState.resumeAtTopicSequenceNumber);
        const call = this.client.Subscribe(request, {
            interceptors: this.streamingInterceptors
        });
        options.subscriptionState.setSubscribed();
        // Allow the caller to cancel the stream.
        // Note that because we restart the stream on error or stream end,
        // we need to ensure we keep the same subscription object. That way
        // stream restarts are transparent to the caller.
        options.subscriptionState.unsubscribeFn = ()=>{
            call.cancel();
        };
        return new Promise((resolve, _reject)=>{
            const prepareCallbackOptions = {
                ...options,
                resolve
            };
            call.on('data', this.prepareDataCallback(prepareCallbackOptions));
            call.on('error', this.prepareErrorCallback(prepareCallbackOptions));
            call.on('end', this.prepareEndCallback(prepareCallbackOptions));
        });
    }
    prepareDataCallback(options) {
        return (resp)=>{
            if (options.firstMessage) {
                options.resolve(options.subscription);
            }
            options.firstMessage = false;
            if (resp.item) {
                const sequenceNumber = resp.item.topic_sequence_number;
                options.subscriptionState.lastTopicSequenceNumber = sequenceNumber;
                this.getLogger().trace('Received an item on subscription stream; topic: %s; sequence number: %s', (0, utils_1.truncateString)(options.topicName), sequenceNumber);
                if (resp.item.value.text) {
                    options.onItem(new __1.TopicItem(resp.item.value.text, sequenceNumber, {
                        tokenId: resp.item.publisher_id
                    }));
                } else if (resp.item.value.binary) {
                    options.onItem(new __1.TopicItem(resp.item.value.binary, sequenceNumber, {
                        tokenId: resp.item.publisher_id
                    }));
                } else {
                    this.getLogger().error('Received subscription item with unknown type; topic: %s', (0, utils_1.truncateString)(options.topicName));
                    options.onError(new __1.TopicSubscribe.Error(new __1.UnknownError('Unknown item value type')), options.subscription);
                }
            } else if (resp.heartbeat) {
                this.getLogger().trace('Received heartbeat from subscription stream; topic: %s', (0, utils_1.truncateString)(options.topicName));
                options.onHeartbeat(new __1.TopicHeartbeat());
            } else if (resp.discontinuity) {
                this.getLogger().trace('Received discontinuity from subscription stream; topic: %s', (0, utils_1.truncateString)(options.topicName));
                options.onDiscontinuity(new __1.TopicDiscontinuity(resp.discontinuity.last_topic_sequence, resp.discontinuity.new_topic_sequence));
            } else {
                this.getLogger().error('Received unknown subscription item; topic: %s', (0, utils_1.truncateString)(options.topicName));
                options.onError(new __1.TopicSubscribe.Error(new __1.UnknownError('Unknown item type')), options.subscription);
            }
        };
    }
    prepareErrorCallback(options) {
        return (err)=>{
            // When the caller unsubscribes, we may get a follow on error, which we ignore.
            if (!options.subscriptionState.isSubscribed) {
                return;
            }
            const serviceError = err;
            this.getLogger().trace(`Subscription encountered an error: ${serviceError.code}: ${serviceError.message}: ${serviceError.details}`);
            const shouldReconnectSubscription = // previously, we were only attempting a reconnect on this one very specific case, but our current expectation is that
            // we should err on the side of retrying. This may become a sort of "deny list" of error types to *not* retry on
            // in the future, but for now we will be aggressive about retrying.
            // // serviceError.code === Status.INTERNAL &&
            //  // serviceError.details === PubsubClient.RST_STREAM_NO_ERROR_MESSAGE;
            true;
            const momentoError = new __1.TopicSubscribe.Error(this.getCacheServiceErrorMapper().convertError(serviceError));
            this.handleSubscribeError(options, momentoError, shouldReconnectSubscription);
        };
    }
    static initializeUnaryInterceptors(headers, configuration, requestTimeoutMs) {
        return [
            (0, middlewares_interceptor_1.middlewaresInterceptor)(configuration.getLoggerFactory(), [], {}),
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'PubSubClient',
                loggerFactory: configuration.getLoggerFactory(),
                overallRequestTimeoutMs: requestTimeoutMs
            })
        ];
    }
    // TODO https://github.com/momentohq/client-sdk-nodejs/issues/349
    // decide on streaming interceptors and middlewares
    static initializeStreamingInterceptors(headers) {
        return [
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers)
        ];
    }
}
exports.PubsubClient = PubsubClient;
PubsubClient.DEFAULT_REQUEST_TIMEOUT_MS = 5 * 1000;
PubsubClient.DEFAULT_MAX_SESSION_MEMORY_MB = 256; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/webhook-client.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebhookClient = void 0;
const generated_types_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/index.js [app-route] (ecmascript)");
var grpcWebhook = generated_types_1.webhook.webhook;
const sdk_core_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/index.js [app-route] (ecmascript)");
const grpc_js_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/index.js [app-route] (ecmascript)");
const headers_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/headers-interceptor.js [app-route] (ecmascript)");
const package_json_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/package.json (json)");
const cache_service_error_mapper_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/errors/cache-service-error-mapper.js [app-route] (ecmascript)");
const utils_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/index.js [app-route] (ecmascript)");
const retry_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/retry-interceptor.js [app-route] (ecmascript)");
class WebhookClient {
    /**
     * @param {TopicClientProps} props
     */ constructor(props){
        this.credentialProvider = props.credentialProvider;
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors());
        const headers = [
            new headers_interceptor_1.Header('Authorization', props.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('agent', `nodejs:webhook:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`)
        ];
        this.unaryInterceptors = [
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'WebhookClient',
                loggerFactory: props.configuration.getLoggerFactory(),
                overallRequestTimeoutMs: WebhookClient.DEFAULT_REQUEST_TIMEOUT_MS
            })
        ];
        this.webhookClient = new generated_types_1.webhook.webhook.WebhookClient(props.credentialProvider.getControlEndpoint(), props.credentialProvider.isControlEndpointSecure() ? grpc_js_1.ChannelCredentials.createSsl() : grpc_js_1.ChannelCredentials.createInsecure());
    }
    async deleteWebhook(id) {
        try {
            (0, utils_1.validateCacheName)(id.cacheName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.DeleteWebhook.Error(err));
        }
        const request = new grpcWebhook._DeleteWebhookRequest({
            webhook_id: new grpcWebhook._WebhookId({
                cache_name: id.cacheName,
                webhook_name: id.webhookName
            })
        });
        this.logger.debug('issuing "DeleteWebhook" request');
        return await new Promise((resolve, reject)=>{
            this.webhookClient.DeleteWebhook(request, {
                interceptors: this.unaryInterceptors
            }, (err, _resp)=>{
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.DeleteWebhook.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new sdk_core_1.DeleteWebhook.Success());
                }
            });
        });
    }
    async listWebhooks(cache) {
        try {
            (0, utils_1.validateCacheName)(cache);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.ListWebhooks.Error(err));
        }
        const request = new grpcWebhook._ListWebhookRequest({
            cache_name: cache
        });
        this.logger.debug('issuing "ListWebhooks" request');
        return await new Promise((resolve, reject)=>{
            this.webhookClient.ListWebhooks(request, {
                interceptors: this.unaryInterceptors
            }, (err, resp)=>{
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.ListWebhooks.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    const webhooks = resp.webhook.map((wh)=>{
                        const webhook = {
                            id: {
                                cacheName: wh.webhook_id.cache_name,
                                webhookName: wh.webhook_id.webhook_name
                            },
                            topicName: wh.topic_name,
                            destination: new sdk_core_1.PostUrlWebhookDestination(wh.destination.post_url)
                        };
                        return webhook;
                    });
                    resolve(new sdk_core_1.ListWebhooks.Success(webhooks));
                }
            });
        });
    }
    async putWebhook(webhook) {
        try {
            (0, utils_1.validateCacheName)(webhook.id.cacheName);
            (0, utils_1.validateTopicName)(webhook.topicName);
            (0, utils_1.validateWebhookName)(webhook.id.webhookName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.PutWebhook.Error(err));
        }
        const request = new grpcWebhook._PutWebhookRequest({
            webhook: new grpcWebhook._Webhook({
                webhook_id: new grpcWebhook._WebhookId({
                    cache_name: webhook.id.cacheName,
                    webhook_name: webhook.id.webhookName
                }),
                destination: new grpcWebhook._WebhookDestination({
                    post_url: webhook.destination.url()
                }),
                topic_name: webhook.topicName
            })
        });
        this.logger.debug('issuing "PutWebhook" request');
        return await new Promise((resolve, reject)=>{
            this.webhookClient.PutWebhook(request, {
                interceptors: this.unaryInterceptors
            }, (err, resp)=>{
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.PutWebhook.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new sdk_core_1.PutWebhook.Success(resp.secret_string));
                }
            });
        });
    }
    async getWebhookSecret(id) {
        try {
            (0, utils_1.validateCacheName)(id.cacheName);
            (0, utils_1.validateWebhookName)(id.webhookName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.GetWebhookSecret.Error(err));
        }
        const request = new grpcWebhook._GetWebhookSecretRequest({
            webhook_name: id.webhookName,
            cache_name: id.cacheName
        });
        this.logger.debug('issuing "GetWebhookSecret" request');
        return await new Promise((resolve, reject)=>{
            this.webhookClient.GetWebhookSecret(request, {
                interceptors: this.unaryInterceptors
            }, (err, resp)=>{
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.GetWebhookSecret.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new sdk_core_1.GetWebhookSecret.Success({
                        secret: resp.secret_string,
                        webhookName: resp.webhook_name,
                        cacheName: resp.cache_name
                    }));
                }
            });
        });
    }
    async rotateWebhookSecret(id) {
        try {
            (0, utils_1.validateCacheName)(id.cacheName);
            (0, utils_1.validateWebhookName)(id.webhookName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.RotateWebhookSecret.Error(err));
        }
        const webhookId = grpcWebhook._WebhookId.fromObject({
            webhook_name: id.webhookName,
            cache_name: id.cacheName
        });
        const request = new grpcWebhook._RotateWebhookSecretRequest({
            webhook_id: webhookId
        });
        this.logger.debug('issuing "RotateWebhookSecret" request');
        return await new Promise((resolve, reject)=>{
            this.webhookClient.RotateWebhookSecret(request, {
                interceptors: this.unaryInterceptors
            }, (err, resp)=>{
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.RotateWebhookSecret.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new sdk_core_1.RotateWebhookSecret.Success({
                        secret: resp.secret_string,
                        webhookName: id.webhookName,
                        cacheName: id.cacheName
                    }));
                }
            });
        });
    }
}
exports.WebhookClient = WebhookClient;
WebhookClient.DEFAULT_REQUEST_TIMEOUT_MS = 5 * 1000; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/storage-control-client.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StorageControlClient = void 0;
const generated_types_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/index.js [app-route] (ecmascript)");
var grpcControl = generated_types_1.control.control_client;
const headers_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/headers-interceptor.js [app-route] (ecmascript)");
const cache_service_error_mapper_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/errors/cache-service-error-mapper.js [app-route] (ecmascript)");
const grpc_js_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/index.js [app-route] (ecmascript)");
const __1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/index.js [app-route] (ecmascript)");
const package_json_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/package.json (json)");
const utils_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/index.js [app-route] (ecmascript)");
const sdk_core_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/index.js [app-route] (ecmascript)");
const retry_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/retry-interceptor.js [app-route] (ecmascript)");
class StorageControlClient {
    /**
     * @param {StorageClientProps} props
     */ constructor(props){
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(false);
        const headers = [
            new headers_interceptor_1.Header('Authorization', props.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('agent', `nodejs:store:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`)
        ];
        this.interceptors = [
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'StorageControlClient',
                loggerFactory: props.configuration.getLoggerFactory(),
                overallRequestTimeoutMs: StorageControlClient.REQUEST_TIMEOUT_MS
            })
        ];
        this.logger.debug(`Creating storage control client using endpoint: '${props.credentialProvider.getControlEndpoint()}`);
        this.clientWrapper = new grpcControl.ScsControlClient(props.credentialProvider.getControlEndpoint(), props.credentialProvider.isControlEndpointSecure() ? grpc_js_1.ChannelCredentials.createSsl() : grpc_js_1.ChannelCredentials.createInsecure());
    }
    close() {
        this.logger.debug('Closing storage control client');
        this.clientWrapper.close();
    }
    async createStore(name) {
        try {
            (0, utils_1.validateStoreName)(name);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.CreateStore.Error(err));
        }
        this.logger.debug(`Creating store: ${name}`);
        const request = new grpcControl._CreateStoreRequest({
            store_name: name
        });
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.CreateStore(request, {
                interceptors: this.interceptors
            }, (err, _resp)=>{
                if (err) {
                    const sdkError = this.cacheServiceErrorMapper.convertError(err);
                    if (sdkError.errorCode() === __1.MomentoErrorCode.STORE_ALREADY_EXISTS_ERROR) {
                        resolve(new sdk_core_1.CreateStore.AlreadyExists());
                    } else {
                        this.cacheServiceErrorMapper.resolveOrRejectError({
                            err: err,
                            errorResponseFactoryFn: (e)=>new sdk_core_1.CreateStore.Error(e),
                            resolveFn: resolve,
                            rejectFn: reject
                        });
                    }
                } else {
                    resolve(new sdk_core_1.CreateStore.Success());
                }
            });
        });
    }
    async deleteStore(name) {
        try {
            (0, utils_1.validateStoreName)(name);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.DeleteStore.Error(err));
        }
        const request = new grpcControl._DeleteStoreRequest({
            store_name: name
        });
        this.logger.debug(`Deleting store: ${name}`);
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.DeleteStore(request, {
                interceptors: this.interceptors
            }, (err, _resp)=>{
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.DeleteStore.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new sdk_core_1.DeleteStore.Success());
                }
            });
        });
    }
    async listStores() {
        const request = new grpcControl._ListStoresRequest();
        request.next_token = '';
        this.logger.debug("Issuing 'listStores' request");
        return await new Promise((resolve, reject)=>{
            this.clientWrapper.ListStores(request, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new __1.ListStores.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    const stores = resp.store.map((store)=>{
                        const storeName = store.store_name;
                        return new __1.StoreInfo(storeName);
                    });
                    resolve(new __1.ListStores.Success(stores));
                }
            });
        });
    }
}
exports.StorageControlClient = StorageControlClient;
StorageControlClient.REQUEST_TIMEOUT_MS = 60 * 1000; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/storage-data-client.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StorageDataClient = void 0;
const sdk_core_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/index.js [app-route] (ecmascript)");
const utils_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/index.js [app-route] (ecmascript)");
const store_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/store.js [app-route] (ecmascript)");
const headers_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/headers-interceptor.js [app-route] (ecmascript)");
const grpc_js_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/index.js [app-route] (ecmascript)");
const package_json_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/package.json (json)");
const grpc_channel_options_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/grpc-channel-options.js [app-route] (ecmascript)");
const cache_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/config/transport/cache/index.js [app-route] (ecmascript)");
const cache_service_error_mapper_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/errors/cache-service-error-mapper.js [app-route] (ecmascript)");
const retry_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/retry-interceptor.js [app-route] (ecmascript)");
class StorageDataClient {
    /**
     * @param {StorageClientAllProps} props
     */ constructor(props){
        this.configuration = props.configuration;
        this.credentialProvider = props.credentialProvider;
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(false);
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        this.requestTimeoutMs = this.configuration.getTransportStrategy().getGrpcConfig().getDeadlineMillis();
        this.validateRequestTimeout(this.requestTimeoutMs);
        this.logger.debug(`Creating storage client using endpoint: '${this.credentialProvider.getStorageEndpoint()}'`);
        // NOTE: This is hard-coded for now but we may want to expose it via StorageConfiguration in the
        // future, as we do with some of the other clients.
        const grpcConfig = new cache_1.StaticGrpcConfiguration({
            deadlineMillis: this.configuration.getTransportStrategy().getGrpcConfig().getDeadlineMillis(),
            maxSessionMemoryMb: StorageDataClient.DEFAULT_MAX_SESSION_MEMORY_MB
        });
        const channelOptions = (0, grpc_channel_options_1.grpcChannelOptionsFromGrpcConfig)(grpcConfig);
        this.client = new store_1.store.StoreClient(this.credentialProvider.getStorageEndpoint(), this.credentialProvider.isStorageEndpointSecure() ? grpc_js_1.ChannelCredentials.createSsl() : grpc_js_1.ChannelCredentials.createInsecure(), channelOptions);
        this.interceptors = this.initializeInterceptors(this.configuration.getLoggerFactory());
    }
    close() {
        this.logger.debug('Closing storage data clients');
        this.client.close();
    }
    validateRequestTimeout(timeout) {
        this.logger.debug(`Request timeout ms: ${String(timeout)}`);
        if (timeout !== undefined && timeout <= 0) {
            throw new sdk_core_1.InvalidArgumentError('request timeout must be greater than zero.');
        }
    }
    validateStoreNameOrThrowError(storeName) {
        try {
            (0, utils_1.validateStoreName)(storeName);
            return;
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.StoragePut.Error(err));
        }
    }
    initializeInterceptors(_loggerFactory) {
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('agent', `nodejs:store:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`)
        ];
        return [
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'StorageDataClient',
                loggerFactory: this.configuration.getLoggerFactory(),
                retryStrategy: this.configuration.getRetryStrategy(),
                overallRequestTimeoutMs: this.requestTimeoutMs
            })
        ];
    }
    createMetadata(storeName) {
        const metadata = new grpc_js_1.Metadata();
        metadata.set('store', storeName);
        return metadata;
    }
    async get(storeName, key) {
        try {
            (0, utils_1.validateStoreName)(storeName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.StorageGet.Error(err));
        }
        this.logger.trace(`Issuing 'get' request; store: ${storeName}, key: ${key}`);
        return await this.sendGet(storeName, key);
    }
    async sendGet(storeName, key) {
        const request = new store_1.store._StoreGetRequest({
            key: key
        });
        const metadata = this.createMetadata(storeName);
        return await new Promise((resolve, reject)=>{
            this.client.Get(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                var _a;
                const value = (_a = resp === null || resp === void 0 ? void 0 : resp.value) === null || _a === void 0 ? void 0 : _a.value;
                if (value) {
                    switch(value){
                        case 'double_value':
                            {
                                return resolve(sdk_core_1.StorageGet.Found.ofDouble(resp.value.double_value));
                            }
                        case 'string_value':
                            {
                                return resolve(sdk_core_1.StorageGet.Found.ofString(resp.value.string_value));
                            }
                        case 'bytes_value':
                            {
                                return resolve(sdk_core_1.StorageGet.Found.ofBytes(resp.value.bytes_value));
                            }
                        case 'integer_value':
                            {
                                return resolve(sdk_core_1.StorageGet.Found.ofInt(resp.value.integer_value));
                            }
                        case 'none':
                            {
                                return resolve(new sdk_core_1.StorageGet.Error(new sdk_core_1.UnknownError('StorageGet responded with an unknown result')));
                            }
                    }
                } else {
                    const sdkError = this.cacheServiceErrorMapper.convertError(err);
                    if (sdkError.errorCode() === sdk_core_1.MomentoErrorCode.STORE_ITEM_NOT_FOUND_ERROR) {
                        return resolve(new sdk_core_1.StorageGet.NotFound());
                    }
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.StorageGet.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async putInt(storeName, key, value) {
        this.validateStoreNameOrThrowError(storeName);
        this.logger.trace(`Issuing 'put' request; store: ${storeName}, key: ${key}`);
        const storeValue = new store_1.store._StoreValue({
            integer_value: value
        });
        return await this.sendPut(storeName, key, storeValue);
    }
    async putDouble(storeName, key, value) {
        this.validateStoreNameOrThrowError(storeName);
        this.logger.trace(`Issuing 'put' request; store: ${storeName}, key: ${key}`);
        const storeValue = new store_1.store._StoreValue({
            double_value: value
        });
        return await this.sendPut(storeName, key, storeValue);
    }
    async putString(storeName, key, value) {
        this.validateStoreNameOrThrowError(storeName);
        this.logger.trace(`Issuing 'put' request; store: ${storeName}, key: ${key}`);
        const storeValue = new store_1.store._StoreValue({
            string_value: value
        });
        return await this.sendPut(storeName, key, storeValue);
    }
    async putBytes(storeName, key, value) {
        this.validateStoreNameOrThrowError(storeName);
        this.logger.trace(`Issuing 'put' request; store: ${storeName}, key: ${key}`);
        const storeValue = new store_1.store._StoreValue({
            bytes_value: value
        });
        return await this.sendPut(storeName, key, storeValue);
    }
    async sendPut(storeName, key, storeValue) {
        const request = new store_1.store._StorePutRequest({
            key: key,
            value: storeValue
        });
        const metadata = this.createMetadata(storeName);
        return await new Promise((resolve, reject)=>{
            this.client.Put(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new sdk_core_1.StoragePut.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.StoragePut.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async delete(storeName, key) {
        try {
            (0, utils_1.validateStoreName)(storeName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.StorageDelete.Error(err));
        }
        this.logger.trace(`Issuing 'delete' request; store: ${storeName}, key: ${key}`);
        return await this.sendDelete(storeName, key);
    }
    async sendDelete(storeName, key) {
        const request = new store_1.store._StoreDeleteRequest({
            key: key
        });
        const metadata = this.createMetadata(storeName);
        return await new Promise((resolve, reject)=>{
            this.client.Delete(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new sdk_core_1.StorageDelete.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.StorageDelete.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
}
exports.StorageDataClient = StorageDataClient;
StorageDataClient.DEFAULT_MAX_SESSION_MEMORY_MB = 256; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/vendor/printf/printf.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

/* eslint-disable */ var util = require("util");
var tokenize = function(/*String*/ str, /*RegExp*/ re, /*Function?*/ parseDelim, /*Object?*/ instance) {
    // summary:
    //    Split a string by a regular expression with the ability to capture the delimeters
    // parseDelim:
    //    Each group (excluding the 0 group) is passed as a parameter. If the function returns
    //    a value, it's added to the list of tokens.
    // instance:
    //    Used as the "this' instance when calling parseDelim
    var tokens = [];
    var match, content, lastIndex = 0;
    while(match = re.exec(str)){
        content = str.slice(lastIndex, re.lastIndex - match[0].length);
        if (content.length) {
            tokens.push(content);
        }
        if (parseDelim) {
            var parsed = parseDelim.apply(instance, match.slice(1).concat(tokens.length));
            if (typeof parsed != 'undefined') {
                if (parsed.specifier === '%') {
                    tokens.push('%');
                } else {
                    tokens.push(parsed);
                }
            }
        }
        lastIndex = re.lastIndex;
    }
    content = str.slice(lastIndex);
    if (content.length) {
        tokens.push(content);
    }
    return tokens;
};
var Formatter = function(/*String*/ format) {
    this._mapped = false;
    this._format = format;
    this._tokens = tokenize(format, this._re, this._parseDelim, this);
};
// The old regexp `/\%(?:\(([\w_.]+)\)|([1-9]\d*)\$)?([0 +\-\#]*)(\*|\d+)?(\.)?(\*|\d+)?[hlL]?([\%bscdeEfFgGioOuxX])/` has a cubic worst-case time complexity behavior due to overlapping capture groups `([0 +\-\#]*)(\*|\d+)?(\.)?(\*|\d+)?`. And a pump string of 0 can be consumed by `([0 +\-\#]*), (\*|\d+)?, or (\*|\d+)?`.
// The solution replace the sub-regexp (\*|\d+)?(\.)?(\*|\d+)? with the sub-regexp `(\*|\d+)?(?:(\.)(\*|\d+)?)?`, see the figure in [#32](https://github.com/adaltas/node-printf/pull/32)
// There are also performance improvement, see in [#31](https://github.com/adaltas/node-printf/issues/31#issuecomment-776731490)
Formatter.prototype._re = /\%(?:\(([\w_.]+)\)|([1-9]\d*)\$)?([0 +\-\#]*)(\*|\d+)?(?:(\.)(\*|\d+)?)?[hlL]?([\%bscdeEfFgGioOuxX])/g;
Formatter.prototype._parseDelim = function(mapping, intmapping, flags, minWidth, period, precision, specifier) {
    if (mapping) {
        this._mapped = true;
    }
    return {
        mapping: mapping,
        intmapping: intmapping,
        flags: flags,
        _minWidth: minWidth,
        period: period,
        _precision: precision,
        specifier: specifier
    };
};
Formatter.prototype._specifiers = {
    b: {
        base: 2,
        isInt: true
    },
    o: {
        base: 8,
        isInt: true
    },
    x: {
        base: 16,
        isInt: true
    },
    X: {
        extend: [
            'x'
        ],
        toUpper: true
    },
    d: {
        base: 10,
        isInt: true
    },
    i: {
        extend: [
            'd'
        ]
    },
    u: {
        extend: [
            'd'
        ],
        isUnsigned: true
    },
    c: {
        setArg: function(token) {
            if (!isNaN(token.arg)) {
                var num = parseInt(token.arg);
                if (num < 0 || num > 127) {
                    throw new Error('invalid character code passed to %c in printf');
                }
                token.arg = isNaN(num) ? '' + num : String.fromCharCode(num);
            }
        }
    },
    s: {
        setMaxWidth: function(token) {
            token.maxWidth = token.period == '.' ? token.precision : -1;
        }
    },
    e: {
        isDouble: true,
        doubleNotation: 'e'
    },
    E: {
        extend: [
            'e'
        ],
        toUpper: true
    },
    f: {
        isDouble: true,
        doubleNotation: 'f'
    },
    F: {
        extend: [
            'f'
        ]
    },
    g: {
        isDouble: true,
        doubleNotation: 'g'
    },
    G: {
        extend: [
            'g'
        ],
        toUpper: true
    },
    O: {
        isObject: true
    }
};
Formatter.prototype.format = function(/*mixed...*/ filler) {
    if (this._mapped && typeof filler != 'object') {
        throw new Error('format requires a mapping');
    }
    var str = '';
    var position = 0;
    for(var i = 0, token; i < this._tokens.length; i++){
        token = this._tokens[i];
        if (typeof token == 'string') {
            str += token;
        } else {
            if (this._mapped) {
                // Identify value of property defined in `token.mapping`
                var tokens = token.mapping.split('.');
                var value = filler;
                for(var j = 0, c = tokens.length; j < c; j++){
                    value = value[tokens[j]];
                    if (typeof value === 'undefined') {
                        break;
                    }
                }
                if (typeof value == 'undefined') {
                    throw new Error('missing key \'' + token.mapping + '\'');
                }
                token.arg = value;
            } else {
                if (token.intmapping) {
                    position = parseInt(token.intmapping) - 1;
                }
                if (position >= arguments.length) {
                    throw new Error('got ' + arguments.length + ' printf arguments, insufficient for \'' + this._format + '\'');
                }
                token.arg = arguments[position++];
            }
            if (!token.compiled) {
                token.compiled = true;
                token.sign = '';
                token.zeroPad = false;
                token.rightJustify = false;
                token.alternative = false;
                var flags = {};
                for(var fi = token.flags.length; fi--;){
                    var flag = token.flags.charAt(fi);
                    flags[flag] = true;
                    switch(flag){
                        case ' ':
                            token.sign = ' ';
                            break;
                        case '+':
                            token.sign = '+';
                            break;
                        case '0':
                            token.zeroPad = flags['-'] ? false : true;
                            break;
                        case '-':
                            token.rightJustify = true;
                            token.zeroPad = false;
                            break;
                        case '#':
                            token.alternative = true;
                            break;
                        default:
                            throw Error('bad formatting flag \'' + token.flags.charAt(fi) + '\'');
                    }
                }
                token.minWidth = token._minWidth ? parseInt(token._minWidth) : 0;
                token.maxWidth = -1;
                token.toUpper = false;
                token.isUnsigned = false;
                token.isInt = false;
                token.isDouble = false;
                token.isObject = false;
                token.precision = 1;
                if (token.period == '.') {
                    if (token._precision) {
                        token.precision = parseInt(token._precision);
                    } else {
                        token.precision = 0;
                    }
                }
                var mixins = this._specifiers[token.specifier];
                if (typeof mixins == 'undefined') {
                    throw new Error('unexpected specifier \'' + token.specifier + '\'');
                }
                if (mixins.extend) {
                    var s = this._specifiers[mixins.extend];
                    for(var k in s){
                        mixins[k] = s[k];
                    }
                    delete mixins.extend;
                }
                for(var l in mixins){
                    token[l] = mixins[l];
                }
            }
            if (typeof token.setArg == 'function') {
                token.setArg(token);
            }
            if (typeof token.setMaxWidth == 'function') {
                token.setMaxWidth(token);
            }
            if (token._minWidth == '*') {
                if (this._mapped) {
                    throw new Error('* width not supported in mapped formats');
                }
                token.minWidth = parseInt(arguments[position++]);
                if (isNaN(token.minWidth)) {
                    throw new Error('the argument for * width at position ' + position + ' is not a number in ' + this._format);
                }
                // negative width means rightJustify
                if (token.minWidth < 0) {
                    token.rightJustify = true;
                    token.minWidth = -token.minWidth;
                }
            }
            if (token._precision == '*' && token.period == '.') {
                if (this._mapped) {
                    throw new Error('* precision not supported in mapped formats');
                }
                token.precision = parseInt(arguments[position++]);
                if (isNaN(token.precision)) {
                    throw Error('the argument for * precision at position ' + position + ' is not a number in ' + this._format);
                }
                // negative precision means unspecified
                if (token.precision < 0) {
                    token.precision = 1;
                    token.period = '';
                }
            }
            if (token.isInt) {
                // a specified precision means no zero padding
                if (token.period == '.') {
                    token.zeroPad = false;
                }
                this.formatInt(token);
            } else if (token.isDouble) {
                if (token.period != '.') {
                    token.precision = 6;
                }
                this.formatDouble(token);
            } else if (token.isObject) {
                this.formatObject(token);
            }
            this.fitField(token);
            str += '' + token.arg;
        }
    }
    return str;
};
Formatter.prototype._zeros10 = '0000000000';
Formatter.prototype._spaces10 = '          ';
Formatter.prototype.formatInt = function(token) {
    var i = parseInt(token.arg);
    if (!isFinite(i)) {
        // allow this only if arg is number
        if (typeof token.arg != 'number') {
            throw new Error('format argument \'' + token.arg + '\' not an integer; parseInt returned ' + i);
        }
        //return '' + i;
        i = 0;
    }
    // if not base 10, make negatives be positive
    // otherwise, (-10).toString(16) is '-a' instead of 'fffffff6'
    if (i < 0 && (token.isUnsigned || token.base != 10)) {
        i = 0xffffffff + i + 1;
    }
    if (i < 0) {
        token.arg = (-i).toString(token.base);
        this.zeroPad(token);
        token.arg = '-' + token.arg;
    } else {
        token.arg = i.toString(token.base);
        // need to make sure that argument 0 with precision==0 is formatted as ''
        if (!i && !token.precision) {
            token.arg = '';
        } else {
            this.zeroPad(token);
        }
        if (token.sign) {
            token.arg = token.sign + token.arg;
        }
    }
    if (token.base == 16) {
        if (token.alternative) {
            token.arg = '0x' + token.arg;
        }
        token.arg = token.toUpper ? token.arg.toUpperCase() : token.arg.toLowerCase();
    }
    if (token.base == 8) {
        if (token.alternative && token.arg.charAt(0) != '0') {
            token.arg = '0' + token.arg;
        }
    }
};
Formatter.prototype.formatDouble = function(token) {
    var f = parseFloat(token.arg);
    if (!isFinite(f)) {
        // allow this only if arg is number
        if (typeof token.arg != 'number') {
            throw new Error('format argument \'' + token.arg + '\' not a float; parseFloat returned ' + f);
        }
        // C99 says that for 'f':
        //   infinity -> '[-]inf' or '[-]infinity' ('[-]INF' or '[-]INFINITY' for 'F')
        //   NaN -> a string  starting with 'nan' ('NAN' for 'F')
        // this is not commonly implemented though.
        //return '' + f;
        f = 0;
    }
    switch(token.doubleNotation){
        case 'e':
            {
                token.arg = f.toExponential(token.precision);
                break;
            }
        case 'f':
            {
                token.arg = f.toFixed(token.precision);
                break;
            }
        case 'g':
            {
                // C says use 'e' notation if exponent is < -4 or is >= prec
                // ECMAScript for toPrecision says use exponential notation if exponent is >= prec,
                // though step 17 of toPrecision indicates a test for < -6 to force exponential.
                if (Math.abs(f) < 0.0001) {
                    //print('forcing exponential notation for f=' + f);
                    token.arg = f.toExponential(token.precision > 0 ? token.precision - 1 : token.precision);
                } else {
                    token.arg = f.toPrecision(token.precision);
                }
                // In C, unlike 'f', 'gG' removes trailing 0s from fractional part, unless alternative format flag ('#').
                // But ECMAScript formats toPrecision as 0.00100000. So remove trailing 0s.
                if (!token.alternative) {
                    //print('replacing trailing 0 in \'' + s + '\'');
                    token.arg = token.arg.replace(/(\..*[^0])0*e/, '$1e');
                    // if fractional part is entirely 0, remove it and decimal point
                    token.arg = token.arg.replace(/\.0*e/, 'e').replace(/\.0$/, '');
                }
                break;
            }
        default:
            throw new Error('unexpected double notation \'' + token.doubleNotation + '\'');
    }
    // C says that exponent must have at least two digits.
    // But ECMAScript does not; toExponential results in things like '1.000000e-8' and '1.000000e+8'.
    // Note that s.replace(/e([\+\-])(\d)/, 'e$10$2') won't work because of the '$10' instead of '$1'.
    // And replace(re, func) isn't supported on IE50 or Safari1.
    token.arg = token.arg.replace(/e\+(\d)$/, 'e+0$1').replace(/e\-(\d)$/, 'e-0$1');
    // if alt, ensure a decimal point
    if (token.alternative) {
        token.arg = token.arg.replace(/^(\d+)$/, '$1.');
        token.arg = token.arg.replace(/^(\d+)e/, '$1.e');
    }
    if (f >= 0 && token.sign) {
        token.arg = token.sign + token.arg;
    }
    token.arg = token.toUpper ? token.arg.toUpperCase() : token.arg.toLowerCase();
};
Formatter.prototype.formatObject = function(token) {
    // If no precision is specified, then reset it to null (infinite depth).
    var precision = token.period === '.' ? token.precision : null;
    // Historically, inspect was called with 3 options
    // token.arg = util.inspect(token.arg, !token.alternative, precision, token.sign);
    // Now using an object but not sure colors make any sense here
    token.arg = util.inspect(token.arg, {
        showHidden: !token.alternative,
        depth: precision,
        colors: token.sign,
        compact: true
    });
};
Formatter.prototype.zeroPad = function(token, /*Int*/ length) {
    length = arguments.length == 2 ? length : token.precision;
    var negative = false;
    if (typeof token.arg != "string") {
        token.arg = "" + token.arg;
    }
    if (token.arg.substr(0, 1) === '-') {
        negative = true;
        token.arg = token.arg.substr(1);
    }
    var tenless = length - 10;
    while(token.arg.length < tenless){
        token.arg = token.rightJustify ? token.arg + this._zeros10 : this._zeros10 + token.arg;
    }
    var pad = length - token.arg.length;
    token.arg = token.rightJustify ? token.arg + this._zeros10.substring(0, pad) : this._zeros10.substring(0, pad) + token.arg;
    if (negative) token.arg = '-' + token.arg;
};
Formatter.prototype.fitField = function(token) {
    if (token.maxWidth >= 0 && token.arg.length > token.maxWidth) {
        token.arg = token.arg.substring(0, token.maxWidth);
    }
    if (token.zeroPad) {
        this.zeroPad(token, token.minWidth);
        return;
    }
    this.spacePad(token);
};
Formatter.prototype.spacePad = function(token, /*Int*/ length) {
    length = arguments.length == 2 ? length : token.minWidth;
    if (typeof token.arg != 'string') {
        token.arg = '' + token.arg;
    }
    var tenless = length - 10;
    while(token.arg.length < tenless){
        token.arg = token.rightJustify ? token.arg + this._spaces10 : this._spaces10 + token.arg;
    }
    var pad = length - token.arg.length;
    token.arg = token.rightJustify ? token.arg + this._spaces10.substring(0, pad) : this._spaces10.substring(0, pad) + token.arg;
};
module.exports = function() {
    var args = Array.prototype.slice.call(arguments), stream, format;
    if (args[0] instanceof require("stream").Stream) {
        stream = args.shift();
    }
    format = args.shift();
    var formatter = new Formatter(format);
    var string = formatter.format.apply(formatter, args);
    if (stream) {
        stream.write(string);
    } else {
        return string;
    }
};
module.exports.Formatter = Formatter;

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/utils.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.convert = void 0;
function convert(v) {
    if (typeof v === 'string') {
        return new TextEncoder().encode(v);
    }
    return v;
}
exports.convert = convert; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZXJuYWwvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsU0FBZ0IsT0FBTyxDQUFDLENBQXNCO0lBQzVDLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ3pCLE9BQU8sSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEM7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFMRCwwQkFLQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0KHY6IHN0cmluZyB8IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHtcbiAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodik7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG4iXX0=

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/internal-auth-client.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.permissionsFromDisposableTokenScope = exports.permissionsFromTokenScope = exports.InternalAuthClient = void 0;
const generated_types_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/index.js [app-route] (ecmascript)");
var grpcAuth = generated_types_1.auth.auth;
const headers_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/headers-interceptor.js [app-route] (ecmascript)");
const grpc_js_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/index.js [app-route] (ecmascript)");
const package_json_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/package.json (json)");
const cache_service_error_mapper_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/errors/cache-service-error-mapper.js [app-route] (ecmascript)");
const utils_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/index.js [app-route] (ecmascript)");
var Never = grpcAuth._GenerateApiTokenRequest.Never;
var Expires = grpcAuth._GenerateApiTokenRequest.Expires;
const sdk_core_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/index.js [app-route] (ecmascript)");
const permission_scope_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/auth/tokens/permission-scope.js [app-route] (ecmascript)");
const permissionmessages_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/permissionmessages.js [app-route] (ecmascript)");
const utils_2 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/utils.js [app-route] (ecmascript)");
const disposable_token_scope_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/auth/tokens/disposable-token-scope.js [app-route] (ecmascript)");
const retry_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/retry-interceptor.js [app-route] (ecmascript)");
const index_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/index.js [app-route] (ecmascript)");
class InternalAuthClient {
    constructor(props){
        var _a, _b;
        const configuration = (_a = props.configuration) !== null && _a !== void 0 ? _a : index_1.AuthClientConfigurations.Default.latest();
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper((_b = props.throwOnErrors) !== null && _b !== void 0 ? _b : false);
        this.creds = props.credentialProvider;
        const headers = [
            new headers_interceptor_1.Header('agent', `nodejs:auth:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`)
        ];
        this.interceptors = [
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'AuthClient',
                loggerFactory: configuration.getLoggerFactory(),
                overallRequestTimeoutMs: InternalAuthClient.REQUEST_TIMEOUT_MS
            })
        ];
        this.tokenClient = new generated_types_1.token.token.TokenClient(this.creds.getTokenEndpoint(), this.creds.isTokenEndpointSecure() ? grpc_js_1.ChannelCredentials.createSsl() : grpc_js_1.ChannelCredentials.createInsecure());
        this.authClient = new grpcAuth.AuthClient(this.creds.getControlEndpoint(), this.creds.isTokenEndpointSecure() ? grpc_js_1.ChannelCredentials.createSsl() : grpc_js_1.ChannelCredentials.createInsecure());
    }
    async generateApiKey(scope, expiresIn) {
        let permissions;
        try {
            permissions = permissionsFromTokenScope(scope);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.GenerateApiKey.Error(err));
        }
        const request = new grpcAuth._GenerateApiTokenRequest({
            auth_token: this.creds.getAuthToken(),
            permissions: permissions
        });
        if (expiresIn.doesExpire()) {
            try {
                (0, utils_1.validateValidForSeconds)(expiresIn.seconds());
            } catch (err) {
                return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.GenerateApiKey.Error(err));
            }
            request.expires = new Expires({
                valid_for_seconds: expiresIn.seconds()
            });
        } else {
            request.never = new Never();
        }
        return await new Promise((resolve, reject)=>{
            this.authClient.GenerateApiToken(request, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.GenerateApiKey.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new sdk_core_1.GenerateApiKey.Success(resp.api_key, resp.refresh_token, resp.endpoint, sdk_core_1.ExpiresAt.fromEpoch(resp.valid_until)));
                }
            });
        });
    }
    /**
     * @deprecated please use `generateApiKey` instead
     */ generateAuthToken(scope, expiresIn) {
        return this.generateApiKey(scope, expiresIn);
    }
    async refreshApiKey(refreshToken) {
        const request = new grpcAuth._RefreshApiTokenRequest({
            api_key: this.creds.getAuthToken(),
            refresh_token: refreshToken
        });
        return await new Promise((resolve, reject)=>{
            this.authClient.RefreshApiToken(request, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.RefreshApiKey.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new sdk_core_1.RefreshApiKey.Success(resp.api_key, resp.refresh_token, resp.endpoint, sdk_core_1.ExpiresAt.fromEpoch(resp.valid_until)));
                }
            });
        });
    }
    /**
     * @deprecated please use `refreshApiKey` instead
     */ refreshAuthToken(refreshToken) {
        return this.refreshApiKey(refreshToken);
    }
    async generateDisposableToken(scope, expiresIn, disposableTokenProps) {
        try {
            (0, utils_1.validateDisposableTokenExpiry)(expiresIn);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.GenerateDisposableToken.Error(err));
        }
        const expires = new generated_types_1.token.token._GenerateDisposableTokenRequest.Expires({
            valid_for_seconds: expiresIn.seconds()
        });
        let permissions;
        try {
            permissions = permissionsFromDisposableTokenScope(scope);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.GenerateDisposableToken.Error(err));
        }
        const tokenId = disposableTokenProps === null || disposableTokenProps === void 0 ? void 0 : disposableTokenProps.tokenId;
        if (tokenId !== undefined) {
            try {
                (0, utils_1.validateDisposableTokenTokenID)(tokenId);
            } catch (err) {
                return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.GenerateDisposableToken.Error(err));
            }
        }
        const request = new generated_types_1.token.token._GenerateDisposableTokenRequest({
            expires: expires,
            auth_token: this.creds.getAuthToken(),
            permissions: permissions,
            token_id: tokenId
        });
        return await new Promise((resolve, reject)=>{
            this.tokenClient.GenerateDisposableToken(request, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.GenerateDisposableToken.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                } else {
                    resolve(new sdk_core_1.GenerateDisposableToken.Success(resp.api_key, resp.endpoint, sdk_core_1.ExpiresAt.fromEpoch(resp.valid_until)));
                }
            });
        });
    }
}
exports.InternalAuthClient = InternalAuthClient;
InternalAuthClient.REQUEST_TIMEOUT_MS = 60 * 1000;
function permissionsFromTokenScope(scope) {
    const result = new permissionmessages_1.permission_messages.Permissions();
    if (scope instanceof utils_1.InternalSuperUserPermissions) {
        result.super_user = permissionmessages_1.permission_messages.SuperUserPermissions.SuperUser;
        return result;
    } else if ((0, permission_scope_1.isPermissionsObject)(scope)) {
        const scopePermissions = (0, permission_scope_1.asPermissionsObject)(scope);
        const explicitPermissions = new permissionmessages_1.permission_messages.ExplicitPermissions();
        explicitPermissions.permissions = scopePermissions.permissions.map((p)=>tokenPermissionToGrpcPermission(p));
        result.explicit = explicitPermissions;
        return result;
    }
    throw new Error(`Unrecognized token scope: ${JSON.stringify(scope)}`);
}
exports.permissionsFromTokenScope = permissionsFromTokenScope;
function permissionsFromDisposableTokenScope(scope) {
    const result = new permissionmessages_1.permission_messages.Permissions();
    if (!(scope instanceof permission_scope_1.PredefinedScope) && (0, disposable_token_scope_1.isDisposableTokenPermissionsObject)(scope)) {
        const scopePermissions = (0, disposable_token_scope_1.asDisposableTokenPermissionsObject)(scope);
        const explicitPermissions = new permissionmessages_1.permission_messages.ExplicitPermissions();
        explicitPermissions.permissions = scopePermissions.permissions.map((p)=>disposableTokenPermissionToGrpcPermission(p));
        result.explicit = explicitPermissions;
        return result;
    } else if ((0, permission_scope_1.isPermissionsObject)(scope)) {
        const scopePermissions = (0, permission_scope_1.asPermissionsObject)(scope);
        const explicitPermissions = new permissionmessages_1.permission_messages.ExplicitPermissions();
        explicitPermissions.permissions = scopePermissions.permissions.map((p)=>tokenPermissionToGrpcPermission(p));
        result.explicit = explicitPermissions;
        return result;
    }
    throw new Error(`Unrecognized token scope: ${JSON.stringify(scope)}`);
}
exports.permissionsFromDisposableTokenScope = permissionsFromDisposableTokenScope;
function tokenPermissionToGrpcPermission(permission) {
    const result = new permissionmessages_1.permission_messages.PermissionsType();
    if ((0, permission_scope_1.isTopicPermission)(permission)) {
        result.topic_permissions = topicPermissionToGrpcPermission((0, permission_scope_1.asTopicPermission)(permission));
        return result;
    } else if ((0, permission_scope_1.isCachePermission)(permission)) {
        result.cache_permissions = cachePermissionToGrpcPermission((0, permission_scope_1.asCachePermission)(permission));
        return result;
    }
    throw new Error(`Unrecognized token permission: ${JSON.stringify(permission)}`);
}
function topicPermissionToGrpcPermission(permission) {
    const grpcPermission = new permissionmessages_1.permission_messages.PermissionsType.TopicPermissions();
    switch(permission.role){
        case sdk_core_1.TopicRole.PublishSubscribe:
            {
                grpcPermission.role = permissionmessages_1.permission_messages.TopicRole.TopicReadWrite;
                break;
            }
        case sdk_core_1.TopicRole.SubscribeOnly:
            {
                grpcPermission.role = permissionmessages_1.permission_messages.TopicRole.TopicReadOnly;
                break;
            }
        case sdk_core_1.TopicRole.PublishOnly:
            {
                grpcPermission.role = permissionmessages_1.permission_messages.TopicRole.TopicWriteOnly;
                break;
            }
        default:
            {
                throw new Error(`Unrecognized topic role: ${JSON.stringify(permission)}`);
            }
    }
    if (permission.cache === sdk_core_1.AllCaches) {
        grpcPermission.all_caches = new permissionmessages_1.permission_messages.PermissionsType.All();
    } else if (typeof permission.cache === 'string') {
        grpcPermission.cache_selector = new permissionmessages_1.permission_messages.PermissionsType.CacheSelector({
            cache_name: permission.cache
        });
    } else if ((0, sdk_core_1.isCacheName)(permission.cache)) {
        grpcPermission.cache_selector = new permissionmessages_1.permission_messages.PermissionsType.CacheSelector({
            cache_name: permission.cache.name
        });
    } else {
        throw new Error(`Unrecognized cache specification in topic permission: ${JSON.stringify(permission)}`);
    }
    if (permission.topic === sdk_core_1.AllTopics) {
        grpcPermission.all_topics = new permissionmessages_1.permission_messages.PermissionsType.All();
    } else if (typeof permission.topic === 'string') {
        grpcPermission.topic_selector = new permissionmessages_1.permission_messages.PermissionsType.TopicSelector({
            topic_name: permission.topic
        });
    } else if ((0, sdk_core_1.isTopicName)(permission.topic)) {
        grpcPermission.topic_selector = new permissionmessages_1.permission_messages.PermissionsType.TopicSelector({
            topic_name: permission.topic.name
        });
    } else {
        throw new Error(`Unrecognized topic specification in topic permission: ${JSON.stringify(permission)}`);
    }
    return grpcPermission;
}
function assignCacheRole(permission, grpcPermission) {
    switch(permission.role){
        case sdk_core_1.CacheRole.ReadWrite:
            {
                grpcPermission.role = permissionmessages_1.permission_messages.CacheRole.CacheReadWrite;
                break;
            }
        case sdk_core_1.CacheRole.ReadOnly:
            {
                grpcPermission.role = permissionmessages_1.permission_messages.CacheRole.CacheReadOnly;
                break;
            }
        case sdk_core_1.CacheRole.WriteOnly:
            {
                grpcPermission.role = permissionmessages_1.permission_messages.CacheRole.CacheWriteOnly;
                break;
            }
        default:
            {
                throw new Error(`Unrecognized cache role: ${JSON.stringify(permission)}`);
            }
    }
    return grpcPermission;
}
function assignCacheSelector(permission, grpcPermission) {
    if (permission.cache === sdk_core_1.AllCaches) {
        grpcPermission.all_caches = new permissionmessages_1.permission_messages.PermissionsType.All();
    } else if (typeof permission.cache === 'string') {
        grpcPermission.cache_selector = new permissionmessages_1.permission_messages.PermissionsType.CacheSelector({
            cache_name: permission.cache
        });
    } else if ((0, sdk_core_1.isCacheName)(permission.cache)) {
        grpcPermission.cache_selector = new permissionmessages_1.permission_messages.PermissionsType.CacheSelector({
            cache_name: permission.cache.name
        });
    } else {
        throw new Error(`Unrecognized cache specification in cache permission: ${JSON.stringify(permission)}`);
    }
    return grpcPermission;
}
function assignCacheItemSelector(permission, grpcPermission) {
    if (permission.item === sdk_core_1.AllCacheItems) {
        grpcPermission.all_items = new permissionmessages_1.permission_messages.PermissionsType.All();
    } else if (typeof permission.item === 'string') {
        grpcPermission.item_selector = new permissionmessages_1.permission_messages.PermissionsType.CacheItemSelector({
            key: (0, utils_2.convert)(permission.item)
        });
    } else if ((0, sdk_core_1.isCacheItemKey)(permission.item)) {
        (0, utils_1.validateCacheKeyOrPrefix)(permission.item.key);
        grpcPermission.item_selector = new permissionmessages_1.permission_messages.PermissionsType.CacheItemSelector({
            key: (0, utils_2.convert)(permission.item.key)
        });
    } else if ((0, sdk_core_1.isCacheItemKeyPrefix)(permission.item)) {
        (0, utils_1.validateCacheKeyOrPrefix)(permission.item.keyPrefix);
        grpcPermission.item_selector = new permissionmessages_1.permission_messages.PermissionsType.CacheItemSelector({
            key_prefix: (0, utils_2.convert)(permission.item.keyPrefix)
        });
    } else {
        throw new Error(`Unrecognized cache item specification in cache permission: ${JSON.stringify(permission)}`);
    }
    return grpcPermission;
}
function cachePermissionToGrpcPermission(permission) {
    let grpcPermission = new permissionmessages_1.permission_messages.PermissionsType.CachePermissions();
    grpcPermission = assignCacheRole(permission, grpcPermission);
    grpcPermission = assignCacheSelector(permission, grpcPermission);
    return grpcPermission;
}
function disposableTokenPermissionToGrpcPermission(permission) {
    const result = new permissionmessages_1.permission_messages.PermissionsType();
    if ((0, disposable_token_scope_1.isDisposableTokenCachePermission)(permission)) {
        result.cache_permissions = disposableCachePermissionToGrpcPermission((0, disposable_token_scope_1.asDisposableTokenCachePermission)(permission));
        return result;
    }
    throw new Error(`Unrecognized token permission: ${JSON.stringify(permission)}`);
}
function disposableCachePermissionToGrpcPermission(permission) {
    let grpcPermission = new permissionmessages_1.permission_messages.PermissionsType.CachePermissions();
    grpcPermission = assignCacheRole(permission, grpcPermission);
    grpcPermission = assignCacheSelector(permission, grpcPermission);
    grpcPermission = assignCacheItemSelector(permission, grpcPermission);
    return grpcPermission;
} //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/leaderboard-data-client.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LeaderboardDataClient = exports.CONNECTION_ID_KEY = void 0;
const sdk_core_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/index.js [app-route] (ecmascript)");
const utils_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/index.js [app-route] (ecmascript)");
const leaderboard_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/leaderboard.js [app-route] (ecmascript)");
var _Element = leaderboard_1.leaderboard._Element;
const idle_grpc_client_wrapper_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/idle-grpc-client-wrapper.js [app-route] (ecmascript)");
const headers_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/headers-interceptor.js [app-route] (ecmascript)");
const cache_service_error_mapper_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/errors/cache-service-error-mapper.js [app-route] (ecmascript)");
const grpc_js_1 = __turbopack_require__("[project]/node_modules/@grpc/grpc-js/build/src/index.js [app-route] (ecmascript)");
const package_json_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/package.json (json)");
const middlewares_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/middlewares-interceptor.js [app-route] (ecmascript)");
const grpc_channel_options_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/grpc-channel-options.js [app-route] (ecmascript)");
const common_1 = __turbopack_require__("[project]/node_modules/@gomomento/generated-types/dist/common.js [app-route] (ecmascript)");
const retry_interceptor_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk/dist/src/internal/grpc/retry-interceptor.js [app-route] (ecmascript)");
exports.CONNECTION_ID_KEY = Symbol('connectionID');
class LeaderboardDataClient {
    /**
     * @param {LeaderboardClientAllProps} props
     * @param dataClientID
     */ constructor(props, dataClientID){
        this.configuration = props.configuration;
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors());
        this.credentialProvider = props.credentialProvider;
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        const grpcConfig = this.configuration.getTransportStrategy().getGrpcConfig();
        this.requestTimeoutMs = grpcConfig.getDeadlineMillis();
        this.validateRequestTimeout(this.requestTimeoutMs);
        this.logger.debug(`Creating leaderboard client using endpoint: '${this.credentialProvider.getCacheEndpoint()}'`);
        const numDataClients = grpcConfig.getNumClients();
        // We round-robin the requests through all of our clients.  Since javascript
        // is single-threaded, we don't have to worry about thread safety on this
        // index variable.
        this.nextDataClientIndex = 0;
        const channelOptions = (0, grpc_channel_options_1.grpcChannelOptionsFromGrpcConfig)(grpcConfig);
        this.clientWrappers = (0, utils_1.range)(numDataClients).map(()=>new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
                clientFactoryFn: ()=>new leaderboard_1.leaderboard.LeaderboardClient(this.credentialProvider.getCacheEndpoint(), this.credentialProvider.isCacheEndpointSecure() ? grpc_js_1.ChannelCredentials.createSsl() : grpc_js_1.ChannelCredentials.createInsecure(), channelOptions),
                loggerFactory: this.configuration.getLoggerFactory(),
                maxIdleMillis: this.configuration.getTransportStrategy().getMaxIdleMillis()
            }));
        const context = {};
        context[exports.CONNECTION_ID_KEY] = dataClientID;
        this.interceptors = this.initializeInterceptors(this.configuration.getLoggerFactory(), this.configuration.getMiddlewares(), context);
    }
    close() {
        this.logger.debug('Closing leaderboard data clients');
        this.clientWrappers.map((wrapper)=>wrapper.getClient().close());
    }
    validateRequestTimeout(timeout) {
        this.logger.debug(`Request timeout ms: ${String(timeout)}`);
        if (timeout !== undefined && timeout <= 0) {
            throw new sdk_core_1.InvalidArgumentError('request timeout must be greater than zero.');
        }
    }
    initializeInterceptors(_loggerFactory, middlewares, middlewareRequestContext) {
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('agent', `nodejs:leaderboard:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`)
        ];
        return [
            (0, middlewares_interceptor_1.middlewaresInterceptor)(_loggerFactory, middlewares, middlewareRequestContext),
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'LeaderboardDataClient',
                loggerFactory: _loggerFactory,
                overallRequestTimeoutMs: this.requestTimeoutMs
            })
        ];
    }
    createMetadata(cacheName) {
        const metadata = new grpc_js_1.Metadata();
        metadata.set('cache', cacheName);
        return metadata;
    }
    convertMapOrRecordToElementsList(elements) {
        const convertedElements = [];
        if (elements instanceof Map) {
            elements.forEach((score, id)=>convertedElements.push(new _Element({
                    id: id,
                    score: score
                })));
        } else {
            Object.entries(elements).forEach((element)=>convertedElements.push(new _Element({
                    id: Number(element[0]),
                    score: element[1]
                })));
        }
        return convertedElements;
    }
    async upsert(cacheName, leaderboardName, elements) {
        const size = elements instanceof Map ? elements.size : Object.keys(elements).length;
        try {
            (0, utils_1.validateLeaderboardNumberOfElements)(size);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.LeaderboardUpsert.Error(err));
        }
        this.logger.trace(`Issuing 'upsert' request; cache: ${cacheName}, leaderboard: ${leaderboardName}, number of elements: ${size}`);
        return await this.sendUpsert(cacheName, leaderboardName, elements);
    }
    async sendUpsert(cacheName, leaderboardName, elements) {
        const request = new leaderboard_1.leaderboard._UpsertElementsRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
            elements: this.convertMapOrRecordToElementsList(elements)
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.getNextDataClient().UpsertElements(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new sdk_core_1.LeaderboardUpsert.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.LeaderboardUpsert.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async fetchByScore(cacheName, leaderboardName, minScore, maxScore, order, offset, count) {
        var _a;
        const offsetValue = offset === undefined ? 0 : offset;
        const countValue = count === undefined ? 8192 : count;
        const orderValue = order !== null && order !== void 0 ? order : sdk_core_1.LeaderboardOrder.Ascending;
        try {
            (0, utils_1.validateSortedSetScores)(minScore, maxScore);
            (0, utils_1.validateLeaderboardOffset)(offsetValue);
            (0, utils_1.validateLeaderboardCount)(countValue);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.LeaderboardFetch.Error(err));
        }
        this.logger.trace(`Issuing 'fetchByScore' request; cache: ${cacheName}, leaderboard: ${leaderboardName}, order: ${orderValue.toString()}, minScore: ${minScore !== null && minScore !== void 0 ? minScore : 'null'}, maxScore: ${(_a = maxScore === null || maxScore === void 0 ? void 0 : maxScore.toString()) !== null && _a !== void 0 ? _a : 'null'}, offset: ${offsetValue.toString()}, count: ${countValue.toString()}`);
        return await this.sendFetchByScore(cacheName, leaderboardName, orderValue, offsetValue, countValue, minScore, maxScore);
    }
    async sendFetchByScore(cacheName, leaderboardName, order, offset, count, minScore, maxScore) {
        const protoBufOrder = order === sdk_core_1.LeaderboardOrder.Descending ? leaderboard_1.leaderboard._Order.DESCENDING : leaderboard_1.leaderboard._Order.ASCENDING;
        const protoBufScoreRange = new leaderboard_1.leaderboard._ScoreRange();
        if (minScore !== undefined) {
            protoBufScoreRange.min_inclusive = minScore;
        } else {
            protoBufScoreRange.unbounded_min = new common_1.common._Unbounded();
        }
        if (maxScore !== undefined) {
            protoBufScoreRange.max_exclusive = maxScore;
        } else {
            protoBufScoreRange.unbounded_max = new common_1.common._Unbounded();
        }
        const request = new leaderboard_1.leaderboard._GetByScoreRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
            score_range: protoBufScoreRange,
            order: protoBufOrder,
            offset: offset,
            limit_elements: count
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.getNextDataClient().GetByScore(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    const foundElements = resp.elements;
                    resolve(new sdk_core_1.LeaderboardFetch.Success(foundElements));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.LeaderboardFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async fetchByRank(cacheName, leaderboardName, startRank, endRank, order) {
        const rankOrder = order !== null && order !== void 0 ? order : sdk_core_1.LeaderboardOrder.Ascending;
        try {
            (0, utils_1.validateLeaderboardRanks)(startRank, endRank);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.LeaderboardFetch.Error(err));
        }
        this.logger.trace(`Issuing 'fetchByRank' request; cache: ${cacheName}, leaderboard: ${leaderboardName}, order: ${rankOrder.toString()}, startRank: ${startRank}, endRank: ${endRank}`);
        return await this.sendFetchByRank(cacheName, leaderboardName, startRank, endRank, rankOrder);
    }
    async sendFetchByRank(cacheName, leaderboardName, startRank, endRank, order) {
        const protoBufOrder = order === sdk_core_1.LeaderboardOrder.Descending ? leaderboard_1.leaderboard._Order.DESCENDING : leaderboard_1.leaderboard._Order.ASCENDING;
        const protoBufRankRange = new leaderboard_1.leaderboard._RankRange({
            start_inclusive: startRank,
            end_exclusive: endRank
        });
        const request = new leaderboard_1.leaderboard._GetByRankRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
            rank_range: protoBufRankRange,
            order: protoBufOrder
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.getNextDataClient().GetByRank(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    const foundElements = resp.elements;
                    resolve(new sdk_core_1.LeaderboardFetch.Success(foundElements));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.LeaderboardFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async getRank(cacheName, leaderboardName, ids, order) {
        const orderValue = order !== null && order !== void 0 ? order : sdk_core_1.LeaderboardOrder.Ascending;
        this.logger.trace(`Issuing 'getRank' request; cache: ${cacheName}, leaderboard: ${leaderboardName}, order: ${orderValue.toString()}, number of ids: ${ids.length}`);
        return await this.sendGetRank(cacheName, leaderboardName, ids, orderValue);
    }
    async sendGetRank(cacheName, leaderboardName, ids, order) {
        const protoBufOrder = order === sdk_core_1.LeaderboardOrder.Descending ? leaderboard_1.leaderboard._Order.DESCENDING : leaderboard_1.leaderboard._Order.ASCENDING;
        const request = new leaderboard_1.leaderboard._GetRankRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
            ids: ids,
            order: protoBufOrder
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.getNextDataClient().GetRank(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    const foundElements = resp.elements;
                    resolve(new sdk_core_1.LeaderboardFetch.Success(foundElements));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.LeaderboardFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async length(cacheName, leaderboardName) {
        this.logger.trace(`Issuing 'length' request; cache: ${cacheName}, leaderboard: ${leaderboardName}`);
        return await this.sendLength(cacheName, leaderboardName);
    }
    async sendLength(cacheName, leaderboardName) {
        const request = new leaderboard_1.leaderboard._GetLeaderboardLengthRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.getNextDataClient().GetLeaderboardLength(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    const length = resp.count;
                    resolve(new sdk_core_1.LeaderboardLength.Success(length));
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.LeaderboardLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async removeElements(cacheName, leaderboardName, ids) {
        try {
            (0, utils_1.validateLeaderboardNumberOfElements)(ids.length);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new sdk_core_1.LeaderboardRemoveElements.Error(err));
        }
        this.logger.trace(`Issuing 'removeElements' request; cache: ${cacheName}, leaderboard: ${leaderboardName}, number of elements: ${ids.length.toString()}`);
        return await this.sendRemoveElements(cacheName, leaderboardName, ids);
    }
    async sendRemoveElements(cacheName, leaderboardName, ids) {
        const request = new leaderboard_1.leaderboard._RemoveElementsRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
            ids: ids
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.getNextDataClient().RemoveElements(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new sdk_core_1.LeaderboardRemoveElements.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.LeaderboardRemoveElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    async delete(cacheName, leaderboardName) {
        this.logger.trace(`Issuing 'delete' request; cache: ${cacheName}, leaderboard: ${leaderboardName}`);
        return await this.sendDelete(cacheName, leaderboardName);
    }
    async sendDelete(cacheName, leaderboardName) {
        const request = new leaderboard_1.leaderboard._DeleteLeaderboardRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject)=>{
            this.getNextDataClient().DeleteLeaderboard(request, metadata, {
                interceptors: this.interceptors
            }, (err, resp)=>{
                if (resp) {
                    resolve(new sdk_core_1.LeaderboardDelete.Success());
                } else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: (e)=>new sdk_core_1.LeaderboardDelete.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject
                    });
                }
            });
        });
    }
    getNextDataClient() {
        const clientWrapper = this.clientWrappers[this.nextDataClientIndex];
        this.nextDataClientIndex = (this.nextDataClientIndex + 1) % this.clientWrappers.length;
        return clientWrapper.getClient();
    }
}
exports.LeaderboardDataClient = LeaderboardDataClient; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZGVyYm9hcmQtZGF0YS1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZXJuYWwvbGVhZGVyYm9hcmQtZGF0YS1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0RBVzZCO0FBQzdCLHVFQU9xRDtBQUVyRCw2RUFBd0U7QUFDeEUsSUFBTyxRQUFRLEdBQUcseUJBQVcsQ0FBQyxRQUFRLENBQUM7QUFDdkMsOEVBQXNFO0FBRXRFLG9FQUFxRTtBQUNyRSxxRkFBNkU7QUFDN0UsMkNBS3VCO0FBQ3ZCLHFEQUEyQztBQUczQyw0RUFBc0U7QUFLdEUsc0VBQTZFO0FBQzdFLG1FQUE4RDtBQUM5RCxnRUFBMEQ7QUFFN0MsUUFBQSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFeEQsTUFBYSxxQkFBcUI7SUFVaEM7OztPQUdHO0lBQ0gsWUFBWSxLQUFnQyxFQUFFLFlBQW9CO1FBQ2hFLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUN6QyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxvREFBdUIsQ0FDeEQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUN2QyxDQUFDO1FBQ0YsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztRQUNuRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWE7YUFDbEMsb0JBQW9CLEVBQUU7YUFDdEIsYUFBYSxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZ0JB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SUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsbUJBQW1CO1lBQ3RCLENBQUMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDO1FBQzlELE9BQU8sYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ25DLENBQUM7Q0FDRjtBQXRqQkQsc0RBc2pCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENyZWRlbnRpYWxQcm92aWRlcixcbiAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gIExlYWRlcmJvYXJkRGVsZXRlLFxuICBMZWFkZXJib2FyZEZldGNoLFxuICBMZWFkZXJib2FyZExlbmd0aCxcbiAgTGVhZGVyYm9hcmRSZW1vdmVFbGVtZW50cyxcbiAgTGVhZGVyYm9hcmRVcHNlcnQsXG4gIE1vbWVudG9Mb2dnZXIsXG4gIE1vbWVudG9Mb2dnZXJGYWN0b3J5LFxuICBMZWFkZXJib2FyZE9yZGVyLFxufSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlJztcbmltcG9ydCB7XG4gIHZhbGlkYXRlTGVhZGVyYm9hcmROdW1iZXJPZkVsZW1lbnRzLFxuICB2YWxpZGF0ZVNvcnRlZFNldFNjb3JlcyxcbiAgdmFsaWRhdGVMZWFkZXJib2FyZE9mZnNldCxcbiAgdmFsaWRhdGVMZWFkZXJib2FyZENvdW50LFxuICB2YWxpZGF0ZUxlYWRlcmJvYXJkUmFua3MsXG4gIHJhbmdlLFxufSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlL2Rpc3Qvc3JjL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7TGVhZGVyYm9hcmRDb25maWd1cmF0aW9ufSBmcm9tICcuLi9jb25maWcvbGVhZGVyYm9hcmQtY29uZmlndXJhdGlvbic7XG5pbXBvcnQge2xlYWRlcmJvYXJkfSBmcm9tICdAZ29tb21lbnRvL2dlbmVyYXRlZC10eXBlcy9kaXN0L2xlYWRlcmJvYXJkJztcbmltcG9ydCBfRWxlbWVudCA9IGxlYWRlcmJvYXJkLl9FbGVtZW50O1xuaW1wb3J0IHtJZGxlR3JwY0NsaWVudFdyYXBwZXJ9IGZyb20gJy4vZ3JwYy9pZGxlLWdycGMtY2xpZW50LXdyYXBwZXInO1xuaW1wb3J0IHtHcnBjQ2xpZW50V3JhcHBlcn0gZnJvbSAnLi9ncnBjL2dycGMtY2xpZW50LXdyYXBwZXInO1xuaW1wb3J0IHtIZWFkZXIsIEhlYWRlckludGVyY2VwdG9yfSBmcm9tICcuL2dycGMvaGVhZGVycy1pbnRlcmNlcHRvcic7XG5pbXBvcnQge0NhY2hlU2VydmljZUVycm9yTWFwcGVyfSBmcm9tICcuLi9lcnJvcnMvY2FjaGUtc2VydmljZS1lcnJvci1tYXBwZXInO1xuaW1wb3J0IHtcbiAgQ2hhbm5lbENyZWRlbnRpYWxzLFxuICBJbnRlcmNlcHRvcixcbiAgTWV0YWRhdGEsXG4gIFNlcnZpY2VFcnJvcixcbn0gZnJvbSAnQGdycGMvZ3JwYy1qcyc7XG5pbXBvcnQge3ZlcnNpb259IGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XG5pbXBvcnQge0lMZWFkZXJib2FyZERhdGFDbGllbnR9IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUvZGlzdC9zcmMvaW50ZXJuYWwvY2xpZW50cy9sZWFkZXJib2FyZC9JTGVhZGVyYm9hcmREYXRhQ2xpZW50JztcbmltcG9ydCB7TGVhZGVyYm9hcmRDbGllbnRBbGxQcm9wc30gZnJvbSAnLi9sZWFkZXJib2FyZC1jbGllbnQtYWxsLXByb3BzJztcbmltcG9ydCB7bWlkZGxld2FyZXNJbnRlcmNlcHRvcn0gZnJvbSAnLi9ncnBjL21pZGRsZXdhcmVzLWludGVyY2VwdG9yJztcbmltcG9ydCB7XG4gIE1pZGRsZXdhcmUsXG4gIE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlckNvbnRleHQsXG59IGZyb20gJy4uL2NvbmZpZy9taWRkbGV3YXJlL21pZGRsZXdhcmUnO1xuaW1wb3J0IHtncnBjQ2hhbm5lbE9wdGlvbnNGcm9tR3JwY0NvbmZpZ30gZnJvbSAnLi9ncnBjL2dycGMtY2hhbm5lbC1vcHRpb25zJztcbmltcG9ydCB7Y29tbW9ufSBmcm9tICdAZ29tb21lbnRvL2dlbmVyYXRlZC10eXBlcy9kaXN0L2NvbW1vbic7XG5pbXBvcnQge1JldHJ5SW50ZXJjZXB0b3J9IGZyb20gJy4vZ3JwYy9yZXRyeS1pbnRlcmNlcHRvcic7XG5cbmV4cG9ydCBjb25zdCBDT05ORUNUSU9OX0lEX0tFWSA9IFN5bWJvbCgnY29ubmVjdGlvbklEJyk7XG5cbmV4cG9ydCBjbGFzcyBMZWFkZXJib2FyZERhdGFDbGllbnQgaW1wbGVtZW50cyBJTGVhZGVyYm9hcmREYXRhQ2xpZW50IHtcbiAgcHJpdmF0ZSByZWFkb25seSBjb25maWd1cmF0aW9uOiBMZWFkZXJib2FyZENvbmZpZ3VyYXRpb247XG4gIHByaXZhdGUgcmVhZG9ubHkgY3JlZGVudGlhbFByb3ZpZGVyOiBDcmVkZW50aWFsUHJvdmlkZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyOiBNb21lbnRvTG9nZ2VyO1xuICBwcml2YXRlIHJlYWRvbmx5IGNhY2hlU2VydmljZUVycm9yTWFwcGVyOiBDYWNoZVNlcnZpY2VFcnJvck1hcHBlcjtcbiAgcHJpdmF0ZSByZWFkb25seSByZXF1ZXN0VGltZW91dE1zOiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50V3JhcHBlcnM6IEdycGNDbGllbnRXcmFwcGVyPGxlYWRlcmJvYXJkLkxlYWRlcmJvYXJkQ2xpZW50PltdO1xuICBwcm90ZWN0ZWQgbmV4dERhdGFDbGllbnRJbmRleDogbnVtYmVyO1xuICBwcml2YXRlIHJlYWRvbmx5IGludGVyY2VwdG9yczogSW50ZXJjZXB0b3JbXTtcblxuICAvKipcbiAgICogQHBhcmFtIHtMZWFkZXJib2FyZENsaWVudEFsbFByb3BzfSBwcm9wc1xuICAgKiBAcGFyYW0gZGF0YUNsaWVudElEXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wczogTGVhZGVyYm9hcmRDbGllbnRBbGxQcm9wcywgZGF0YUNsaWVudElEOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSBwcm9wcy5jb25maWd1cmF0aW9uO1xuICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIgPSBuZXcgQ2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoXG4gICAgICBwcm9wcy5jb25maWd1cmF0aW9uLmdldFRocm93T25FcnJvcnMoKVxuICAgICk7XG4gICAgdGhpcy5jcmVkZW50aWFsUHJvdmlkZXIgPSBwcm9wcy5jcmVkZW50aWFsUHJvdmlkZXI7XG4gICAgdGhpcy5sb2dnZXIgPSB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0TG9nZ2VyRmFjdG9yeSgpLmdldExvZ2dlcih0aGlzKTtcbiAgICBjb25zdCBncnBjQ29uZmlnID0gdGhpcy5jb25maWd1cmF0aW9uXG4gICAgICAuZ2V0VHJhbnNwb3J0U3RyYXRlZ3koKVxuICAgICAgLmdldEdycGNDb25maWcoKTtcblxuICAgIHRoaXMucmVxdWVzdFRpbWVvdXRNcyA9IGdycGNDb25maWcuZ2V0RGVhZGxpbmVNaWxsaXMoKTtcbiAgICB0aGlzLnZhbGlkYXRlUmVxdWVzdFRpbWVvdXQodGhpcy5yZXF1ZXN0VGltZW91dE1zKTtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgIGBDcmVhdGluZyBsZWFkZXJib2FyZCBjbGllbnQgdXNpbmcgZW5kcG9pbnQ6ICcke3RoaXMuY3JlZGVudGlhbFByb3ZpZGVyLmdldENhY2hlRW5kcG9pbnQoKX0nYFxuICAgICk7XG5cbiAgICBjb25zdCBudW1EYXRhQ2xpZW50cyA9IGdycGNDb25maWcuZ2V0TnVtQ2xpZW50cygpO1xuXG4gICAgLy8gV2Ugcm91bmQtcm9iaW4gdGhlIHJlcXVlc3RzIHRocm91Z2ggYWxsIG9mIG91ciBjbGllbnRzLiAgU2luY2UgamF2YXNjcmlwdFxuICAgIC8vIGlzIHNpbmdsZS10aHJlYWRlZCwgd2UgZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCB0aHJlYWQgc2FmZXR5IG9uIHRoaXNcbiAgICAvLyBpbmRleCB2YXJpYWJsZS5cbiAgICB0aGlzLm5leHREYXRhQ2xpZW50SW5kZXggPSAwO1xuXG4gICAgY29uc3QgY2hhbm5lbE9wdGlvbnMgPSBncnBjQ2hhbm5lbE9wdGlvbnNGcm9tR3JwY0NvbmZpZyhncnBjQ29uZmlnKTtcblxuICAgIHRoaXMuY2xpZW50V3JhcHBlcnMgPSByYW5nZShudW1EYXRhQ2xpZW50cykubWFwKFxuICAgICAgKCkgPT5cbiAgICAgICAgbmV3IElkbGVHcnBjQ2xpZW50V3JhcHBlcih7XG4gICAgICAgICAgY2xpZW50RmFjdG9yeUZuOiAoKSA9PlxuICAgICAgICAgICAgbmV3IGxlYWRlcmJvYXJkLkxlYWRlcmJvYXJkQ2xpZW50KFxuICAgICAgICAgICAgICB0aGlzLmNyZWRlbnRpYWxQcm92aWRlci5nZXRDYWNoZUVuZHBvaW50KCksXG4gICAgICAgICAgICAgIHRoaXMuY3JlZGVudGlhbFByb3ZpZGVyLmlzQ2FjaGVFbmRwb2ludFNlY3VyZSgpXG4gICAgICAgICAgICAgICAgPyBDaGFubmVsQ3JlZGVudGlhbHMuY3JlYXRlU3NsKClcbiAgICAgICAgICAgICAgICA6IENoYW5uZWxDcmVkZW50aWFscy5jcmVhdGVJbnNlY3VyZSgpLFxuICAgICAgICAgICAgICBjaGFubmVsT3B0aW9uc1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICBsb2dnZXJGYWN0b3J5OiB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0TG9nZ2VyRmFjdG9yeSgpLFxuICAgICAgICAgIG1heElkbGVNaWxsaXM6IHRoaXMuY29uZmlndXJhdGlvblxuICAgICAgICAgICAgLmdldFRyYW5zcG9ydFN0cmF0ZWd5KClcbiAgICAgICAgICAgIC5nZXRNYXhJZGxlTWlsbGlzKCksXG4gICAgICAgIH0pXG4gICAgKTtcblxuICAgIGNvbnN0IGNvbnRleHQ6IE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlckNvbnRleHQgPSB7fTtcbiAgICBjb250ZXh0W0NPTk5FQ1RJT05fSURfS0VZXSA9IGRhdGFDbGllbnRJRDtcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHRoaXMuaW5pdGlhbGl6ZUludGVyY2VwdG9ycyhcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5nZXRMb2dnZXJGYWN0b3J5KCksXG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0TWlkZGxld2FyZXMoKSxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoJ0Nsb3NpbmcgbGVhZGVyYm9hcmQgZGF0YSBjbGllbnRzJyk7XG4gICAgdGhpcy5jbGllbnRXcmFwcGVycy5tYXAod3JhcHBlciA9PiB3cmFwcGVyLmdldENsaWVudCgpLmNsb3NlKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZVJlcXVlc3RUaW1lb3V0KHRpbWVvdXQ/OiBudW1iZXIpIHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgUmVxdWVzdCB0aW1lb3V0IG1zOiAke1N0cmluZyh0aW1lb3V0KX1gKTtcbiAgICBpZiAodGltZW91dCAhPT0gdW5kZWZpbmVkICYmIHRpbWVvdXQgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAncmVxdWVzdCB0aW1lb3V0IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVJbnRlcmNlcHRvcnMoXG4gICAgX2xvZ2dlckZhY3Rvcnk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5LFxuICAgIG1pZGRsZXdhcmVzOiBNaWRkbGV3YXJlW10sXG4gICAgbWlkZGxld2FyZVJlcXVlc3RDb250ZXh0OiBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJDb250ZXh0XG4gICk6IEludGVyY2VwdG9yW10ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBbXG4gICAgICBuZXcgSGVhZGVyKCdBdXRob3JpemF0aW9uJywgdGhpcy5jcmVkZW50aWFsUHJvdmlkZXIuZ2V0QXV0aFRva2VuKCkpLFxuICAgICAgbmV3IEhlYWRlcignYWdlbnQnLCBgbm9kZWpzOmxlYWRlcmJvYXJkOiR7dmVyc2lvbn1gKSxcbiAgICAgIG5ldyBIZWFkZXIoJ3J1bnRpbWUtdmVyc2lvbicsIGBub2RlanM6JHtwcm9jZXNzLnZlcnNpb25zLm5vZGV9YCksXG4gICAgXTtcbiAgICByZXR1cm4gW1xuICAgICAgbWlkZGxld2FyZXNJbnRlcmNlcHRvcihcbiAgICAgICAgX2xvZ2dlckZhY3RvcnksXG4gICAgICAgIG1pZGRsZXdhcmVzLFxuICAgICAgICBtaWRkbGV3YXJlUmVxdWVzdENvbnRleHRcbiAgICAgICksXG4gICAgICBIZWFkZXJJbnRlcmNlcHRvci5jcmVhdGVIZWFkZXJzSW50ZXJjZXB0b3IoaGVhZGVycyksXG4gICAgICBSZXRyeUludGVyY2VwdG9yLmNyZWF0ZVJldHJ5SW50ZXJjZXB0b3Ioe1xuICAgICAgICBjbGllbnROYW1lOiAnTGVhZGVyYm9hcmREYXRhQ2xpZW50JyxcbiAgICAgICAgbG9nZ2VyRmFjdG9yeTogX2xvZ2dlckZhY3RvcnksXG4gICAgICAgIG92ZXJhbGxSZXF1ZXN0VGltZW91dE1zOiB0aGlzLnJlcXVlc3RUaW1lb3V0TXMsXG4gICAgICB9KSxcbiAgICBdO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVNZXRhZGF0YShjYWNoZU5hbWU6IHN0cmluZyk6IE1ldGFkYXRhIHtcbiAgICBjb25zdCBtZXRhZGF0YSA9IG5ldyBNZXRhZGF0YSgpO1xuICAgIG1ldGFkYXRhLnNldCgnY2FjaGUnLCBjYWNoZU5hbWUpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydE1hcE9yUmVjb3JkVG9FbGVtZW50c0xpc3QoXG4gICAgZWxlbWVudHM6IFJlY29yZDxudW1iZXIsIG51bWJlcj4gfCBNYXA8bnVtYmVyLCBudW1iZXI+XG4gICk6IF9FbGVtZW50W10ge1xuICAgIGNvbnN0IGNvbnZlcnRlZEVsZW1lbnRzOiBfRWxlbWVudFtdID0gW107XG4gICAgaWYgKGVsZW1lbnRzIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICBlbGVtZW50cy5mb3JFYWNoKChzY29yZSwgaWQpID0+XG4gICAgICAgIGNvbnZlcnRlZEVsZW1lbnRzLnB1c2gobmV3IF9FbGVtZW50KHtpZDogaWQsIHNjb3JlOiBzY29yZX0pKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmVudHJpZXMoZWxlbWVudHMpLmZvckVhY2goZWxlbWVudCA9PlxuICAgICAgICBjb252ZXJ0ZWRFbGVtZW50cy5wdXNoKFxuICAgICAgICAgIG5ldyBfRWxlbWVudCh7aWQ6IE51bWJlcihlbGVtZW50WzBdKSwgc2NvcmU6IGVsZW1lbnRbMV19KVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY29udmVydGVkRWxlbWVudHM7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBzZXJ0KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxlYWRlcmJvYXJkTmFtZTogc3RyaW5nLFxuICAgIGVsZW1lbnRzOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXI+IHwgTWFwPG51bWJlciwgbnVtYmVyPlxuICApOiBQcm9taXNlPExlYWRlcmJvYXJkVXBzZXJ0LlJlc3BvbnNlPiB7XG4gICAgY29uc3Qgc2l6ZSA9XG4gICAgICBlbGVtZW50cyBpbnN0YW5jZW9mIE1hcCA/IGVsZW1lbnRzLnNpemUgOiBPYmplY3Qua2V5cyhlbGVtZW50cykubGVuZ3RoO1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUxlYWRlcmJvYXJkTnVtYmVyT2ZFbGVtZW50cyhzaXplKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IExlYWRlcmJvYXJkVXBzZXJ0LkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ3Vwc2VydCcgcmVxdWVzdDsgY2FjaGU6ICR7Y2FjaGVOYW1lfSwgbGVhZGVyYm9hcmQ6ICR7bGVhZGVyYm9hcmROYW1lfSwgbnVtYmVyIG9mIGVsZW1lbnRzOiAke3NpemV9YFxuICAgICk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZFVwc2VydChjYWNoZU5hbWUsIGxlYWRlcmJvYXJkTmFtZSwgZWxlbWVudHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kVXBzZXJ0KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxlYWRlcmJvYXJkTmFtZTogc3RyaW5nLFxuICAgIGVsZW1lbnRzOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXI+IHwgTWFwPG51bWJlciwgbnVtYmVyPlxuICApOiBQcm9taXNlPExlYWRlcmJvYXJkVXBzZXJ0LlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBsZWFkZXJib2FyZC5fVXBzZXJ0RWxlbWVudHNSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX25hbWU6IGNhY2hlTmFtZSxcbiAgICAgIGxlYWRlcmJvYXJkOiBsZWFkZXJib2FyZE5hbWUsXG4gICAgICBlbGVtZW50czogdGhpcy5jb252ZXJ0TWFwT3JSZWNvcmRUb0VsZW1lbnRzTGlzdChlbGVtZW50cyksXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZ2V0TmV4dERhdGFDbGllbnQoKS5VcHNlcnRFbGVtZW50cyhcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyOiBTZXJ2aWNlRXJyb3IgfCBudWxsLCByZXNwOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IExlYWRlcmJvYXJkVXBzZXJ0LlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgTGVhZGVyYm9hcmRVcHNlcnQuRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBmZXRjaEJ5U2NvcmUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGVhZGVyYm9hcmROYW1lOiBzdHJpbmcsXG4gICAgbWluU2NvcmU/OiBudW1iZXIsXG4gICAgbWF4U2NvcmU/OiBudW1iZXIsXG4gICAgb3JkZXI/OiBMZWFkZXJib2FyZE9yZGVyLFxuICAgIG9mZnNldD86IG51bWJlcixcbiAgICBjb3VudD86IG51bWJlclxuICApOiBQcm9taXNlPExlYWRlcmJvYXJkRmV0Y2guUmVzcG9uc2U+IHtcbiAgICBjb25zdCBvZmZzZXRWYWx1ZSA9IG9mZnNldCA9PT0gdW5kZWZpbmVkID8gMCA6IG9mZnNldDtcbiAgICBjb25zdCBjb3VudFZhbHVlID0gY291bnQgPT09IHVuZGVmaW5lZCA/IDgxOTIgOiBjb3VudDtcbiAgICBjb25zdCBvcmRlclZhbHVlID0gb3JkZXIgPz8gTGVhZGVyYm9hcmRPcmRlci5Bc2NlbmRpbmc7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlU29ydGVkU2V0U2NvcmVzKG1pblNjb3JlLCBtYXhTY29yZSk7XG4gICAgICB2YWxpZGF0ZUxlYWRlcmJvYXJkT2Zmc2V0KG9mZnNldFZhbHVlKTtcbiAgICAgIHZhbGlkYXRlTGVhZGVyYm9hcmRDb3VudChjb3VudFZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IExlYWRlcmJvYXJkRmV0Y2guRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAnZmV0Y2hCeVNjb3JlJyByZXF1ZXN0OyBjYWNoZTogJHtjYWNoZU5hbWV9LCBsZWFkZXJib2FyZDogJHtsZWFkZXJib2FyZE5hbWV9LCBvcmRlcjogJHtvcmRlclZhbHVlLnRvU3RyaW5nKCl9LCBtaW5TY29yZTogJHtcbiAgICAgICAgbWluU2NvcmUgPz8gJ251bGwnXG4gICAgICB9LCBtYXhTY29yZTogJHtcbiAgICAgICAgbWF4U2NvcmU/LnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgICB9LCBvZmZzZXQ6ICR7b2Zmc2V0VmFsdWUudG9TdHJpbmcoKX0sIGNvdW50OiAke2NvdW50VmFsdWUudG9TdHJpbmcoKX1gXG4gICAgKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kRmV0Y2hCeVNjb3JlKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgbGVhZGVyYm9hcmROYW1lLFxuICAgICAgb3JkZXJWYWx1ZSxcbiAgICAgIG9mZnNldFZhbHVlLFxuICAgICAgY291bnRWYWx1ZSxcbiAgICAgIG1pblNjb3JlLFxuICAgICAgbWF4U2NvcmVcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kRmV0Y2hCeVNjb3JlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxlYWRlcmJvYXJkTmFtZTogc3RyaW5nLFxuICAgIG9yZGVyOiBMZWFkZXJib2FyZE9yZGVyLFxuICAgIG9mZnNldDogbnVtYmVyLFxuICAgIGNvdW50OiBudW1iZXIsXG4gICAgbWluU2NvcmU/OiBudW1iZXIsXG4gICAgbWF4U2NvcmU/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxMZWFkZXJib2FyZEZldGNoLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcHJvdG9CdWZPcmRlciA9XG4gICAgICBvcmRlciA9PT0gTGVhZGVyYm9hcmRPcmRlci5EZXNjZW5kaW5nXG4gICAgICAgID8gbGVhZGVyYm9hcmQuX09yZGVyLkRFU0NFTkRJTkdcbiAgICAgICAgOiBsZWFkZXJib2FyZC5fT3JkZXIuQVNDRU5ESU5HO1xuXG4gICAgY29uc3QgcHJvdG9CdWZTY29yZVJhbmdlID0gbmV3IGxlYWRlcmJvYXJkLl9TY29yZVJhbmdlKCk7XG4gICAgaWYgKG1pblNjb3JlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHByb3RvQnVmU2NvcmVSYW5nZS5taW5faW5jbHVzaXZlID0gbWluU2NvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3RvQnVmU2NvcmVSYW5nZS51bmJvdW5kZWRfbWluID0gbmV3IGNvbW1vbi5fVW5ib3VuZGVkKCk7XG4gICAgfVxuICAgIGlmIChtYXhTY29yZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm90b0J1ZlNjb3JlUmFuZ2UubWF4X2V4Y2x1c2l2ZSA9IG1heFNjb3JlO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm90b0J1ZlNjb3JlUmFuZ2UudW5ib3VuZGVkX21heCA9IG5ldyBjb21tb24uX1VuYm91bmRlZCgpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgbGVhZGVyYm9hcmQuX0dldEJ5U2NvcmVSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX25hbWU6IGNhY2hlTmFtZSxcbiAgICAgIGxlYWRlcmJvYXJkOiBsZWFkZXJib2FyZE5hbWUsXG4gICAgICBzY29yZV9yYW5nZTogcHJvdG9CdWZTY29yZVJhbmdlLFxuICAgICAgb3JkZXI6IHByb3RvQnVmT3JkZXIsXG4gICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgIGxpbWl0X2VsZW1lbnRzOiBjb3VudCxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5nZXROZXh0RGF0YUNsaWVudCgpLkdldEJ5U2NvcmUoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVycjogU2VydmljZUVycm9yIHwgbnVsbCwgcmVzcDogdW5rbm93bikgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBjb25zdCBmb3VuZEVsZW1lbnRzID0gKHJlc3AgYXMgbGVhZGVyYm9hcmQuX0dldEJ5U2NvcmVSZXNwb25zZSlcbiAgICAgICAgICAgICAgLmVsZW1lbnRzO1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgTGVhZGVyYm9hcmRGZXRjaC5TdWNjZXNzKGZvdW5kRWxlbWVudHMpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBMZWFkZXJib2FyZEZldGNoLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZmV0Y2hCeVJhbmsoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGVhZGVyYm9hcmROYW1lOiBzdHJpbmcsXG4gICAgc3RhcnRSYW5rOiBudW1iZXIsXG4gICAgZW5kUmFuazogbnVtYmVyLFxuICAgIG9yZGVyPzogTGVhZGVyYm9hcmRPcmRlclxuICApOiBQcm9taXNlPExlYWRlcmJvYXJkRmV0Y2guUmVzcG9uc2U+IHtcbiAgICBjb25zdCByYW5rT3JkZXIgPSBvcmRlciA/PyBMZWFkZXJib2FyZE9yZGVyLkFzY2VuZGluZztcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVMZWFkZXJib2FyZFJhbmtzKHN0YXJ0UmFuaywgZW5kUmFuayk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBMZWFkZXJib2FyZEZldGNoLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2ZldGNoQnlSYW5rJyByZXF1ZXN0OyBjYWNoZTogJHtjYWNoZU5hbWV9LCBsZWFkZXJib2FyZDogJHtsZWFkZXJib2FyZE5hbWV9LCBvcmRlcjogJHtyYW5rT3JkZXIudG9TdHJpbmcoKX0sIHN0YXJ0UmFuazogJHtzdGFydFJhbmt9LCBlbmRSYW5rOiAke2VuZFJhbmt9YFxuICAgICk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZEZldGNoQnlSYW5rKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgbGVhZGVyYm9hcmROYW1lLFxuICAgICAgc3RhcnRSYW5rLFxuICAgICAgZW5kUmFuayxcbiAgICAgIHJhbmtPcmRlclxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRGZXRjaEJ5UmFuayhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsZWFkZXJib2FyZE5hbWU6IHN0cmluZyxcbiAgICBzdGFydFJhbms6IG51bWJlcixcbiAgICBlbmRSYW5rOiBudW1iZXIsXG4gICAgb3JkZXI6IExlYWRlcmJvYXJkT3JkZXJcbiAgKTogUHJvbWlzZTxMZWFkZXJib2FyZEZldGNoLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcHJvdG9CdWZPcmRlciA9XG4gICAgICBvcmRlciA9PT0gTGVhZGVyYm9hcmRPcmRlci5EZXNjZW5kaW5nXG4gICAgICAgID8gbGVhZGVyYm9hcmQuX09yZGVyLkRFU0NFTkRJTkdcbiAgICAgICAgOiBsZWFkZXJib2FyZC5fT3JkZXIuQVNDRU5ESU5HO1xuXG4gICAgY29uc3QgcHJvdG9CdWZSYW5rUmFuZ2UgPSBuZXcgbGVhZGVyYm9hcmQuX1JhbmtSYW5nZSh7XG4gICAgICBzdGFydF9pbmNsdXNpdmU6IHN0YXJ0UmFuayxcbiAgICAgIGVuZF9leGNsdXNpdmU6IGVuZFJhbmssXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGxlYWRlcmJvYXJkLl9HZXRCeVJhbmtSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX25hbWU6IGNhY2hlTmFtZSxcbiAgICAgIGxlYWRlcmJvYXJkOiBsZWFkZXJib2FyZE5hbWUsXG4gICAgICByYW5rX3JhbmdlOiBwcm90b0J1ZlJhbmtSYW5nZSxcbiAgICAgIG9yZGVyOiBwcm90b0J1Zk9yZGVyLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmdldE5leHREYXRhQ2xpZW50KCkuR2V0QnlSYW5rKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnI6IFNlcnZpY2VFcnJvciB8IG51bGwsIHJlc3A6IHVua25vd24pID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgY29uc3QgZm91bmRFbGVtZW50cyA9IChyZXNwIGFzIGxlYWRlcmJvYXJkLl9HZXRCeVJhbmtSZXNwb25zZSlcbiAgICAgICAgICAgICAgLmVsZW1lbnRzO1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgTGVhZGVyYm9hcmRGZXRjaC5TdWNjZXNzKGZvdW5kRWxlbWVudHMpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBMZWFkZXJib2FyZEZldGNoLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0UmFuayhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsZWFkZXJib2FyZE5hbWU6IHN0cmluZyxcbiAgICBpZHM6IEFycmF5PG51bWJlcj4sXG4gICAgb3JkZXI/OiBMZWFkZXJib2FyZE9yZGVyXG4gICk6IFByb21pc2U8TGVhZGVyYm9hcmRGZXRjaC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IG9yZGVyVmFsdWUgPSBvcmRlciA/PyBMZWFkZXJib2FyZE9yZGVyLkFzY2VuZGluZztcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdnZXRSYW5rJyByZXF1ZXN0OyBjYWNoZTogJHtjYWNoZU5hbWV9LCBsZWFkZXJib2FyZDogJHtsZWFkZXJib2FyZE5hbWV9LCBvcmRlcjogJHtvcmRlclZhbHVlLnRvU3RyaW5nKCl9LCBudW1iZXIgb2YgaWRzOiAke1xuICAgICAgICBpZHMubGVuZ3RoXG4gICAgICB9YFxuICAgICk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZEdldFJhbmsoY2FjaGVOYW1lLCBsZWFkZXJib2FyZE5hbWUsIGlkcywgb3JkZXJWYWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRHZXRSYW5rKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxlYWRlcmJvYXJkTmFtZTogc3RyaW5nLFxuICAgIGlkczogQXJyYXk8bnVtYmVyPixcbiAgICBvcmRlcjogTGVhZGVyYm9hcmRPcmRlclxuICApOiBQcm9taXNlPExlYWRlcmJvYXJkRmV0Y2guUmVzcG9uc2U+IHtcbiAgICBjb25zdCBwcm90b0J1Zk9yZGVyID1cbiAgICAgIG9yZGVyID09PSBMZWFkZXJib2FyZE9yZGVyLkRlc2NlbmRpbmdcbiAgICAgICAgPyBsZWFkZXJib2FyZC5fT3JkZXIuREVTQ0VORElOR1xuICAgICAgICA6IGxlYWRlcmJvYXJkLl9PcmRlci5BU0NFTkRJTkc7XG5cbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGxlYWRlcmJvYXJkLl9HZXRSYW5rUmVxdWVzdCh7XG4gICAgICBjYWNoZV9uYW1lOiBjYWNoZU5hbWUsXG4gICAgICBsZWFkZXJib2FyZDogbGVhZGVyYm9hcmROYW1lLFxuICAgICAgaWRzOiBpZHMsXG4gICAgICBvcmRlcjogcHJvdG9CdWZPcmRlcixcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5nZXROZXh0RGF0YUNsaWVudCgpLkdldFJhbmsoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVycjogU2VydmljZUVycm9yIHwgbnVsbCwgcmVzcDogdW5rbm93bikgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBjb25zdCBmb3VuZEVsZW1lbnRzID0gKHJlc3AgYXMgbGVhZGVyYm9hcmQuX0dldFJhbmtSZXNwb25zZSlcbiAgICAgICAgICAgICAgLmVsZW1lbnRzO1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgTGVhZGVyYm9hcmRGZXRjaC5TdWNjZXNzKGZvdW5kRWxlbWVudHMpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBMZWFkZXJib2FyZEZldGNoLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGVuZ3RoKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxlYWRlcmJvYXJkTmFtZTogc3RyaW5nXG4gICk6IFByb21pc2U8TGVhZGVyYm9hcmRMZW5ndGguUmVzcG9uc2U+IHtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdsZW5ndGgnIHJlcXVlc3Q7IGNhY2hlOiAke2NhY2hlTmFtZX0sIGxlYWRlcmJvYXJkOiAke2xlYWRlcmJvYXJkTmFtZX1gXG4gICAgKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kTGVuZ3RoKGNhY2hlTmFtZSwgbGVhZGVyYm9hcmROYW1lKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZExlbmd0aChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsZWFkZXJib2FyZE5hbWU6IHN0cmluZ1xuICApOiBQcm9taXNlPExlYWRlcmJvYXJkTGVuZ3RoLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBsZWFkZXJib2FyZC5fR2V0TGVhZGVyYm9hcmRMZW5ndGhSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX25hbWU6IGNhY2hlTmFtZSxcbiAgICAgIGxlYWRlcmJvYXJkOiBsZWFkZXJib2FyZE5hbWUsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZ2V0TmV4dERhdGFDbGllbnQoKS5HZXRMZWFkZXJib2FyZExlbmd0aChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyOiBTZXJ2aWNlRXJyb3IgfCBudWxsLCByZXNwOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IChyZXNwIGFzIGxlYWRlcmJvYXJkLl9HZXRMZWFkZXJib2FyZExlbmd0aFJlc3BvbnNlKVxuICAgICAgICAgICAgICAuY291bnQ7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBMZWFkZXJib2FyZExlbmd0aC5TdWNjZXNzKGxlbmd0aCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT4gbmV3IExlYWRlcmJvYXJkTGVuZ3RoLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVtb3ZlRWxlbWVudHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGVhZGVyYm9hcmROYW1lOiBzdHJpbmcsXG4gICAgaWRzOiBBcnJheTxudW1iZXI+XG4gICk6IFByb21pc2U8TGVhZGVyYm9hcmRSZW1vdmVFbGVtZW50cy5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUxlYWRlcmJvYXJkTnVtYmVyT2ZFbGVtZW50cyhpZHMubGVuZ3RoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IExlYWRlcmJvYXJkUmVtb3ZlRWxlbWVudHMuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAncmVtb3ZlRWxlbWVudHMnIHJlcXVlc3Q7IGNhY2hlOiAke2NhY2hlTmFtZX0sIGxlYWRlcmJvYXJkOiAke2xlYWRlcmJvYXJkTmFtZX0sIG51bWJlciBvZiBlbGVtZW50czogJHtpZHMubGVuZ3RoLnRvU3RyaW5nKCl9YFxuICAgICk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZFJlbW92ZUVsZW1lbnRzKGNhY2hlTmFtZSwgbGVhZGVyYm9hcmROYW1lLCBpZHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kUmVtb3ZlRWxlbWVudHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGVhZGVyYm9hcmROYW1lOiBzdHJpbmcsXG4gICAgaWRzOiBBcnJheTxudW1iZXI+XG4gICk6IFByb21pc2U8TGVhZGVyYm9hcmRSZW1vdmVFbGVtZW50cy5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgbGVhZGVyYm9hcmQuX1JlbW92ZUVsZW1lbnRzUmVxdWVzdCh7XG4gICAgICBjYWNoZV9uYW1lOiBjYWNoZU5hbWUsXG4gICAgICBsZWFkZXJib2FyZDogbGVhZGVyYm9hcmROYW1lLFxuICAgICAgaWRzOiBpZHMsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZ2V0TmV4dERhdGFDbGllbnQoKS5SZW1vdmVFbGVtZW50cyhcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyOiBTZXJ2aWNlRXJyb3IgfCBudWxsLCByZXNwOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IExlYWRlcmJvYXJkUmVtb3ZlRWxlbWVudHMuU3VjY2VzcygpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+XG4gICAgICAgICAgICAgICAgbmV3IExlYWRlcmJvYXJkUmVtb3ZlRWxlbWVudHMuRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZWxldGUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGVhZGVyYm9hcmROYW1lOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxMZWFkZXJib2FyZERlbGV0ZS5SZXNwb25zZT4ge1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2RlbGV0ZScgcmVxdWVzdDsgY2FjaGU6ICR7Y2FjaGVOYW1lfSwgbGVhZGVyYm9hcmQ6ICR7bGVhZGVyYm9hcmROYW1lfWBcbiAgICApO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmREZWxldGUoY2FjaGVOYW1lLCBsZWFkZXJib2FyZE5hbWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kRGVsZXRlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxlYWRlcmJvYXJkTmFtZTogc3RyaW5nXG4gICk6IFByb21pc2U8TGVhZGVyYm9hcmREZWxldGUuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGxlYWRlcmJvYXJkLl9EZWxldGVMZWFkZXJib2FyZFJlcXVlc3Qoe1xuICAgICAgY2FjaGVfbmFtZTogY2FjaGVOYW1lLFxuICAgICAgbGVhZGVyYm9hcmQ6IGxlYWRlcmJvYXJkTmFtZSxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5nZXROZXh0RGF0YUNsaWVudCgpLkRlbGV0ZUxlYWRlcmJvYXJkKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnI6IFNlcnZpY2VFcnJvciB8IG51bGwsIHJlc3A6IHVua25vd24pID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgTGVhZGVyYm9hcmREZWxldGUuU3VjY2VzcygpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBMZWFkZXJib2FyZERlbGV0ZS5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE5leHREYXRhQ2xpZW50KCk6IGxlYWRlcmJvYXJkLkxlYWRlcmJvYXJkQ2xpZW50IHtcbiAgICBjb25zdCBjbGllbnRXcmFwcGVyID0gdGhpcy5jbGllbnRXcmFwcGVyc1t0aGlzLm5leHREYXRhQ2xpZW50SW5kZXhdO1xuICAgIHRoaXMubmV4dERhdGFDbGllbnRJbmRleCA9XG4gICAgICAodGhpcy5uZXh0RGF0YUNsaWVudEluZGV4ICsgMSkgJSB0aGlzLmNsaWVudFdyYXBwZXJzLmxlbmd0aDtcbiAgICByZXR1cm4gY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKTtcbiAgfVxufVxuIl19

}.call(this) }),
"[project]/node_modules/@gomomento/sdk/dist/src/internal/leaderboard.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Leaderboard = void 0;
const sdk_core_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/index.js [app-route] (ecmascript)");
const leaderboard_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/leaderboard/index.js [app-route] (ecmascript)");
const utils_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/index.js [app-route] (ecmascript)");
class Leaderboard extends leaderboard_1.AbstractLeaderboard {
    constructor(dataClient, cacheName, leaderboardName){
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateLeaderboardName)(leaderboardName);
        } catch (err) {
            throw new sdk_core_1.InvalidArgumentError('cache name and leaderboard name must not be empty strings');
        }
        super(cacheName, leaderboardName, dataClient);
    }
}
exports.Leaderboard = Leaderboard; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZGVyYm9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZXJuYWwvbGVhZGVyYm9hcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0RBQXlEO0FBQ3pELDJGQUdtRTtBQUVuRSx1RUFHcUQ7QUFFckQsTUFBYSxXQUFZLFNBQVEsaUNBQW1CO0lBQ2xELFlBQ0UsVUFBa0MsRUFDbEMsU0FBaUIsRUFDakIsZUFBdUI7UUFFdkIsSUFBSTtZQUNGLElBQUEseUJBQWlCLEVBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0IsSUFBQSwrQkFBdUIsRUFBQyxlQUFlLENBQUMsQ0FBQztTQUMxQztRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osTUFBTSxJQUFJLCtCQUFvQixDQUM1QiwyREFBMkQsQ0FDNUQsQ0FBQztTQUNIO1FBQ0QsS0FBSyxDQUFDLFNBQVMsRUFBRSxlQUFlLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDaEQsQ0FBQztDQUNGO0FBaEJELGtDQWdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW52YWxpZEFyZ3VtZW50RXJyb3J9IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUnO1xuaW1wb3J0IHtcbiAgQWJzdHJhY3RMZWFkZXJib2FyZCxcbiAgSUxlYWRlcmJvYXJkLFxufSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlL2Rpc3Qvc3JjL2ludGVybmFsL2NsaWVudHMvbGVhZGVyYm9hcmQnO1xuaW1wb3J0IHtJTGVhZGVyYm9hcmREYXRhQ2xpZW50fSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlL2Rpc3Qvc3JjL2ludGVybmFsL2NsaWVudHMvbGVhZGVyYm9hcmQvSUxlYWRlcmJvYXJkRGF0YUNsaWVudCc7XG5pbXBvcnQge1xuICB2YWxpZGF0ZUNhY2hlTmFtZSxcbiAgdmFsaWRhdGVMZWFkZXJib2FyZE5hbWUsXG59IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUvZGlzdC9zcmMvaW50ZXJuYWwvdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgTGVhZGVyYm9hcmQgZXh0ZW5kcyBBYnN0cmFjdExlYWRlcmJvYXJkIGltcGxlbWVudHMgSUxlYWRlcmJvYXJkIHtcbiAgY29uc3RydWN0b3IoXG4gICAgZGF0YUNsaWVudDogSUxlYWRlcmJvYXJkRGF0YUNsaWVudCxcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsZWFkZXJib2FyZE5hbWU6IHN0cmluZ1xuICApIHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlTGVhZGVyYm9hcmROYW1lKGxlYWRlcmJvYXJkTmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICdjYWNoZSBuYW1lIGFuZCBsZWFkZXJib2FyZCBuYW1lIG11c3Qgbm90IGJlIGVtcHR5IHN0cmluZ3MnXG4gICAgICApO1xuICAgIH1cbiAgICBzdXBlcihjYWNoZU5hbWUsIGxlYWRlcmJvYXJkTmFtZSwgZGF0YUNsaWVudCk7XG4gIH1cbn1cbiJdfQ==

}.call(this) }),

};

//# sourceMappingURL=node_modules_%40gomomento_sdk_dist_src_internal_aa4d59._.js.map