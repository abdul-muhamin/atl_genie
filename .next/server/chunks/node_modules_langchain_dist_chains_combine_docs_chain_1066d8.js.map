{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/langchain/dist/chains/combine_docs_chain.js"],"sourcesContent":["import { PromptTemplate } from \"@langchain/core/prompts\";\nimport { BaseChain } from \"./base.js\";\nimport { LLMChain } from \"./llm_chain.js\";\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class StuffDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"StuffDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.llmChain.inputKeys].filter((key) => key !== this.documentVariableName);\n    }\n    get outputKeys() {\n        return this.llmChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        this.llmChain = fields.llmChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n    }\n    /** @ignore */\n    _prepInputs(values) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const texts = docs.map(({ pageContent }) => pageContent);\n        const text = texts.join(\"\\n\\n\");\n        return {\n            ...rest,\n            [this.documentVariableName]: text,\n        };\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const result = await this.llmChain.call(this._prepInputs(values), runManager?.getChild(\"combine_documents\"));\n        return result;\n    }\n    _chainType() {\n        return \"stuff_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        return new StuffDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by mapping a chain over them, then combining results.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class MapReduceDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"MapReduceDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.combineDocumentChain.inputKeys];\n    }\n    get outputKeys() {\n        return this.combineDocumentChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"returnIntermediateSteps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3000\n        });\n        Object.defineProperty(this, \"maxIterations\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 10\n        });\n        Object.defineProperty(this, \"ensureMapStep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"combineDocumentChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmChain = fields.llmChain;\n        this.combineDocumentChain = fields.combineDocumentChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.ensureMapStep = fields.ensureMapStep ?? this.ensureMapStep;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.maxTokens = fields.maxTokens ?? this.maxTokens;\n        this.maxIterations = fields.maxIterations ?? this.maxIterations;\n        this.returnIntermediateSteps = fields.returnIntermediateSteps ?? false;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        let currentDocs = docs;\n        let intermediateSteps = [];\n        // For each iteration, we'll use the `llmChain` to get a new result\n        for (let i = 0; i < this.maxIterations; i += 1) {\n            const inputs = currentDocs.map((d) => ({\n                [this.documentVariableName]: d.pageContent,\n                ...rest,\n            }));\n            const canSkipMapStep = i !== 0 || !this.ensureMapStep;\n            if (canSkipMapStep) {\n                // Calculate the total tokens required in the input\n                const formatted = await this.combineDocumentChain.llmChain.prompt.format(this.combineDocumentChain._prepInputs({\n                    [this.combineDocumentChain.inputKey]: currentDocs,\n                    ...rest,\n                }));\n                const length = await this.combineDocumentChain.llmChain._getNumTokens(formatted);\n                const withinTokenLimit = length < this.maxTokens;\n                // If we can skip the map step, and we're within the token limit, we don't\n                // need to run the map step, so just break out of the loop.\n                if (withinTokenLimit) {\n                    break;\n                }\n            }\n            const results = await this.llmChain.apply(inputs, \n            // If we have a runManager, then we need to create a child for each input\n            // so that we can track the progress of each input.\n            runManager\n                ? Array.from({ length: inputs.length }, (_, i) => runManager.getChild(`map_${i + 1}`))\n                : undefined);\n            const { outputKey } = this.llmChain;\n            // If the flag is set, then concat that to the intermediate steps\n            if (this.returnIntermediateSteps) {\n                intermediateSteps = intermediateSteps.concat(results.map((r) => r[outputKey]));\n            }\n            currentDocs = results.map((r) => ({\n                pageContent: r[outputKey],\n                metadata: {},\n            }));\n        }\n        // Now, with the final result of all the inputs from the `llmChain`, we can\n        // run the `combineDocumentChain` over them.\n        const newInputs = {\n            [this.combineDocumentChain.inputKey]: currentDocs,\n            ...rest,\n        };\n        const result = await this.combineDocumentChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n        // Return the intermediate steps results if the flag is set\n        if (this.returnIntermediateSteps) {\n            return { ...result, intermediateSteps };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"map_reduce_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        if (!data.combine_document_chain) {\n            throw new Error(\"Missing combine_document_chain\");\n        }\n        return new MapReduceDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n            combineDocumentChain: await StuffDocumentsChain.deserialize(data.combine_document_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            combine_document_chain: this.combineDocumentChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by doing a first pass and then refining on more documents.\n * @augments BaseChain\n * @augments RefineDocumentsChainInput\n */\nexport class RefineDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"RefineDocumentsChain\";\n    }\n    get defaultDocumentPrompt() {\n        return new PromptTemplate({\n            inputVariables: [\"page_content\"],\n            template: \"{page_content}\",\n        });\n    }\n    get inputKeys() {\n        return [\n            ...new Set([\n                this.inputKey,\n                ...this.llmChain.inputKeys,\n                ...this.refineLLMChain.inputKeys,\n            ]),\n        ].filter((key) => key !== this.documentVariableName && key !== this.initialResponseName);\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output_text\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"initialResponseName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"existing_answer\"\n        });\n        Object.defineProperty(this, \"refineLLMChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"documentPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.defaultDocumentPrompt\n        });\n        this.llmChain = fields.llmChain;\n        this.refineLLMChain = fields.refineLLMChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.documentPrompt = fields.documentPrompt ?? this.documentPrompt;\n        this.initialResponseName =\n            fields.initialResponseName ?? this.initialResponseName;\n    }\n    /** @ignore */\n    async _constructInitialInputs(doc, rest) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { ...baseInputs, ...rest };\n        return inputs;\n    }\n    /** @ignore */\n    async _constructRefineInputs(doc, res) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { [this.initialResponseName]: res, ...baseInputs };\n        return inputs;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const currentDocs = docs;\n        const initialInputs = await this._constructInitialInputs(currentDocs[0], rest);\n        let res = await this.llmChain.predict({ ...initialInputs }, runManager?.getChild(\"answer\"));\n        const refineSteps = [res];\n        for (let i = 1; i < currentDocs.length; i += 1) {\n            const refineInputs = await this._constructRefineInputs(currentDocs[i], res);\n            const inputs = { ...refineInputs, ...rest };\n            res = await this.refineLLMChain.predict({ ...inputs }, runManager?.getChild(\"refine\"));\n            refineSteps.push(res);\n        }\n        return { [this.outputKey]: res };\n    }\n    _chainType() {\n        return \"refine_documents_chain\";\n    }\n    static async deserialize(data) {\n        const SerializedLLMChain = data.llm_chain;\n        if (!SerializedLLMChain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        const SerializedRefineDocumentChain = data.refine_llm_chain;\n        if (!SerializedRefineDocumentChain) {\n            throw new Error(\"Missing refine_llm_chain\");\n        }\n        return new RefineDocumentsChain({\n            llmChain: await LLMChain.deserialize(SerializedLLMChain),\n            refineLLMChain: await LLMChain.deserialize(SerializedRefineDocumentChain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            refine_llm_chain: this.refineLLMChain.serialize(),\n        };\n    }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}