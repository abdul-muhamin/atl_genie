module.exports = {

"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/string.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.encodeToBase64 = exports.decodeFromBase64 = void 0;
const buffer_1 = require("buffer");
const decodeFromBase64 = (base64)=>{
    return buffer_1.Buffer.from(base64, 'base64').toString('utf8');
};
exports.decodeFromBase64 = decodeFromBase64;
const encodeToBase64 = (str)=>{
    return buffer_1.Buffer.from(str, 'utf-8').toString('base64');
};
exports.encodeToBase64 = encodeToBase64; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL3V0aWxzL3N0cmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBOEI7QUFFdkIsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLE1BQWMsRUFBRSxFQUFFO0lBQ2pELE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hELENBQUMsQ0FBQztBQUZXLFFBQUEsZ0JBQWdCLG9CQUUzQjtBQUVLLE1BQU0sY0FBYyxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7SUFDNUMsT0FBTyxlQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdEQsQ0FBQyxDQUFDO0FBRlcsUUFBQSxjQUFjLGtCQUV6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QnVmZmVyfSBmcm9tICdidWZmZXInO1xuXG5leHBvcnQgY29uc3QgZGVjb2RlRnJvbUJhc2U2NCA9IChiYXNlNjQ6IHN0cmluZykgPT4ge1xuICByZXR1cm4gQnVmZmVyLmZyb20oYmFzZTY0LCAnYmFzZTY0JykudG9TdHJpbmcoJ3V0ZjgnKTtcbn07XG5cbmV4cG9ydCBjb25zdCBlbmNvZGVUb0Jhc2U2NCA9IChzdHI6IHN0cmluZykgPT4ge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc3RyLCAndXRmLTgnKS50b1N0cmluZygnYmFzZTY0Jyk7XG59O1xuIl19

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/validators.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateMaxConcurrentRequests = exports.validateLeaderboardNumberOfElements = exports.validateLeaderboardCount = exports.validateLeaderboardOffset = exports.validateLeaderboardRanks = exports.validateLeaderboardName = exports.isBase64 = exports.validateDisposableTokenTokenID = exports.validateDisposableTokenExpiry = exports.validateTimeout = exports.validateValidForSeconds = exports.validateTtlSeconds = exports.validateTtlMinutes = exports.validateTopK = exports.validateNumDimensions = exports.validateIndexName = exports.validateWebhookName = exports.validateTopicName = exports.validateListSliceStartEnd = exports.validateListName = exports.validateDictionaryName = exports.validateSortedSetCount = exports.validateSortedSetOffset = exports.validateSortedSetScores = exports.validateSortedSetRanks = exports.validateSortedSetName = exports.validateSetPopCount = exports.validateSetSampleLimit = exports.validateSetName = exports.validateCacheKeyOrPrefix = exports.validateCacheName = exports.validateStoreName = void 0;
const errors_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/errors/index.js [app-route] (ecmascript)");
const string_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/string.js [app-route] (ecmascript)");
function validateStoreName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('store name must not be empty');
    }
}
exports.validateStoreName = validateStoreName;
function validateCacheName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('cache name must not be empty');
    }
}
exports.validateCacheName = validateCacheName;
function validateCacheKeyOrPrefix(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('cache key or key prefix must not be empty');
    }
}
exports.validateCacheKeyOrPrefix = validateCacheKeyOrPrefix;
function validateSetName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('set name must not be empty');
    }
}
exports.validateSetName = validateSetName;
function validateSetSampleLimit(limit) {
    if (limit < 0) {
        throw new errors_1.InvalidArgumentError('limit must be non-negative (>= 0)');
    }
}
exports.validateSetSampleLimit = validateSetSampleLimit;
function validateSetPopCount(count) {
    if (count < 1) {
        throw new errors_1.InvalidArgumentError('count must be positive (> 0)');
    }
}
exports.validateSetPopCount = validateSetPopCount;
function validateSortedSetName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('sorted set name must not be empty');
    }
}
exports.validateSortedSetName = validateSortedSetName;
function validateSortedSetRanks(start_rank, end_rank) {
    if (end_rank === undefined) {
        return;
    }
    if (start_rank > 0 && end_rank > 0 && start_rank > end_rank) {
        throw new errors_1.InvalidArgumentError('start rank must be less than end rank');
    }
    if (start_rank < 0 && end_rank < 0 && start_rank >= end_rank) {
        throw new errors_1.InvalidArgumentError('negative start rank must be less than negative end rank');
    }
}
exports.validateSortedSetRanks = validateSortedSetRanks;
function validateSortedSetScores(minScore, maxScore) {
    if (minScore === undefined) return;
    if (maxScore === undefined) return;
    if (minScore > maxScore) {
        throw new errors_1.InvalidArgumentError('minScore must be less than or equal to maxScore');
    }
}
exports.validateSortedSetScores = validateSortedSetScores;
function validateSortedSetOffset(offset) {
    if (offset < 0) {
        throw new errors_1.InvalidArgumentError('offset must be non-negative (>= 0)');
    }
}
exports.validateSortedSetOffset = validateSortedSetOffset;
function validateSortedSetCount(count) {
    if (count < 1) {
        throw new errors_1.InvalidArgumentError('count must be strictly positive (> 0)');
    }
}
exports.validateSortedSetCount = validateSortedSetCount;
function validateDictionaryName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('dictionary name must not be empty');
    }
}
exports.validateDictionaryName = validateDictionaryName;
function validateListName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('list name must not be empty');
    }
}
exports.validateListName = validateListName;
function validateListSliceStartEnd(startIndex, endIndex) {
    if (startIndex === undefined || endIndex === undefined) return;
    // can't validate bounds for start and index of either or are negative without list length
    if (startIndex > 0 || endIndex < 0) return;
    if (endIndex <= startIndex) {
        throw new errors_1.InvalidArgumentError('endIndex (exclusive) must be larger than startIndex (inclusive)');
    }
}
exports.validateListSliceStartEnd = validateListSliceStartEnd;
function validateTopicName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('topic name must not be empty');
    }
}
exports.validateTopicName = validateTopicName;
function validateWebhookName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('webhook name must not be empty');
    }
}
exports.validateWebhookName = validateWebhookName;
function validateIndexName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('index name must not be empty');
    }
}
exports.validateIndexName = validateIndexName;
function validateNumDimensions(numDimensions) {
    if (numDimensions <= 0) {
        throw new errors_1.InvalidArgumentError('numDimensions must be greater than zero');
    }
}
exports.validateNumDimensions = validateNumDimensions;
function validateTopK(topK) {
    if (topK <= 0) {
        throw new errors_1.InvalidArgumentError('topK must be greater than zero');
    }
}
exports.validateTopK = validateTopK;
function validateTtlMinutes(ttlMinutes) {
    if (ttlMinutes < 0 || !Number.isSafeInteger(ttlMinutes)) {
        throw new errors_1.InvalidArgumentError('ttlMinutes must be a positive integer');
    }
}
exports.validateTtlMinutes = validateTtlMinutes;
// Currently accepting ttl in seconds, but if someone requests support for millis,
// the validator will need to check for Number.isSafeInteger(ttl * 1000).
function validateTtlSeconds(ttl) {
    if (ttl < 0 || !Number.isSafeInteger(ttl)) {
        throw new errors_1.InvalidArgumentError(`ttl must be a positive integer, received ${ttl}`);
    }
}
exports.validateTtlSeconds = validateTtlSeconds;
function validateValidForSeconds(validForSeconds) {
    if (validForSeconds < 0) {
        throw new errors_1.InvalidArgumentError('validForSeconds must be positive');
    }
}
exports.validateValidForSeconds = validateValidForSeconds;
function validateTimeout(timeout) {
    if (timeout < 0) {
        throw new errors_1.InvalidArgumentError('timeout must be positive');
    }
}
exports.validateTimeout = validateTimeout;
function validateDisposableTokenExpiry(expiresIn) {
    if (!expiresIn.doesExpire()) {
        throw new errors_1.InvalidArgumentError('disposable tokens must have an expiry');
    }
    if (expiresIn.seconds() < 0) {
        throw new errors_1.InvalidArgumentError('disposable token expiry must be positive');
    }
    if (expiresIn.seconds() > 60 * 60) {
        // 60 seconds * 60 minutes
        throw new errors_1.InvalidArgumentError('disposable tokens must expire within 1 hour');
    }
}
exports.validateDisposableTokenExpiry = validateDisposableTokenExpiry;
function validateDisposableTokenTokenID(tokenId) {
    if (tokenId.length > 64) {
        throw new errors_1.InvalidArgumentError('TokenID must be less than or equal to 64 characters.');
    }
}
exports.validateDisposableTokenTokenID = validateDisposableTokenTokenID;
function isEmpty(str) {
    return !str.trim();
}
function isBase64(str) {
    try {
        return (0, string_1.encodeToBase64)((0, string_1.decodeFromBase64)(str)) === str;
    } catch (e) {
        return false;
    }
}
exports.isBase64 = isBase64;
function validateLeaderboardName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('leaderboard name must not be empty');
    }
}
exports.validateLeaderboardName = validateLeaderboardName;
function validateLeaderboardRanks(start_rank, end_rank) {
    if (start_rank > 0 && end_rank > 0 && start_rank >= end_rank) {
        throw new errors_1.InvalidArgumentError('start rank must be less than end rank');
    }
    if (start_rank < 0 || end_rank < 0) {
        throw new errors_1.InvalidArgumentError('ranks must be positive');
    }
}
exports.validateLeaderboardRanks = validateLeaderboardRanks;
function validateLeaderboardOffset(offset) {
    if (offset < 0) {
        throw new errors_1.InvalidArgumentError('offset must be non-negative (>= 0)');
    }
}
exports.validateLeaderboardOffset = validateLeaderboardOffset;
function validateLeaderboardCount(count) {
    if (count < 1) {
        throw new errors_1.InvalidArgumentError('count must be strictly positive (> 0)');
    }
}
exports.validateLeaderboardCount = validateLeaderboardCount;
function validateLeaderboardNumberOfElements(numElements) {
    if (numElements < 1) {
        throw new errors_1.InvalidArgumentError('must provide at least one element');
    }
}
exports.validateLeaderboardNumberOfElements = validateLeaderboardNumberOfElements;
function validateMaxConcurrentRequests(limit) {
    if (limit < 1) {
        throw new errors_1.InvalidArgumentError('concurrent requests limit must be strictly positive (> 0)');
    }
}
exports.validateMaxConcurrentRequests = validateMaxConcurrentRequests; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/auth.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InternalSuperUserPermissions = exports.decodeAuthToken = exports.populateAllEndpointsFromBaseEndpoint = void 0;
const errors_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/errors/index.js [app-route] (ecmascript)");
const jwt_decode_1 = __turbopack_require__("[project]/node_modules/jwt-decode/build/jwt-decode.esm.js [app-route] (ecmascript)");
const validators_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/validators.js [app-route] (ecmascript)");
const string_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/string.js [app-route] (ecmascript)");
const permission_scope_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/auth/tokens/permission-scope.js [app-route] (ecmascript)");
function decodeAuthTokenClaims(authToken) {
    return (0, jwt_decode_1.default)(authToken);
}
function populateAllEndpointsFromBaseEndpoint(endpointOverride) {
    let prefix = '';
    if (endpointOverride.endpointPrefix) {
        prefix = `${endpointOverride.endpointPrefix}.`;
    }
    return {
        controlEndpoint: {
            endpoint: `${prefix}control.${endpointOverride.baseEndpoint}`,
            secureConnection: endpointOverride.secureConnection
        },
        cacheEndpoint: {
            endpoint: `${prefix}cache.${endpointOverride.baseEndpoint}`,
            secureConnection: endpointOverride.secureConnection
        },
        tokenEndpoint: {
            endpoint: `${prefix}token.${endpointOverride.baseEndpoint}`,
            secureConnection: endpointOverride.secureConnection
        },
        storageEndpoint: {
            endpoint: `${prefix}storage.${endpointOverride.baseEndpoint}`,
            secureConnection: endpointOverride.secureConnection
        }
    };
}
exports.populateAllEndpointsFromBaseEndpoint = populateAllEndpointsFromBaseEndpoint;
/**
 * @param {string} token
 * @returns TokenAndEndpoints
 */ const decodeAuthToken = (token)=>{
    if (!token) {
        throw new errors_1.InvalidArgumentError('malformed auth token');
    }
    try {
        // v1 api tokens don't have an endpoint as part of their claims. Instead, when the SDK returns tokens, we
        // give it to them as a base64 encoded string of '{ "api_key": "<the key>", "endpoint": "prod.momentohq.com" }'.
        // Since in the near future, most customers are going to be using these newer tokens, we are first checking to see if
        // they are base64 encoded, which will tell us that they are our v1 api tokens. If its not, we will fall back to decoding
        // it as one of our legacy jwts.
        if ((0, validators_1.isBase64)(token)) {
            const base64DecodedToken = JSON.parse((0, string_1.decodeFromBase64)(token));
            if (!base64DecodedToken.endpoint || !base64DecodedToken.api_key) {
                throw new errors_1.InvalidArgumentError('failed to parse token');
            }
            const endpoints = populateAllEndpointsFromBaseEndpoint({
                baseEndpoint: base64DecodedToken.endpoint
            });
            return {
                controlEndpoint: endpoints.controlEndpoint.endpoint,
                cacheEndpoint: endpoints.cacheEndpoint.endpoint,
                tokenEndpoint: endpoints.tokenEndpoint.endpoint,
                storageEndpoint: endpoints.storageEndpoint.endpoint,
                authToken: base64DecodedToken.api_key
            };
        } else {
            // This decode function uses generics to advertise that we will usually expect to find the LegacyClaims.  However,
            // if the token is a valid JWT but not actually one of our legacy tokens, the endpoint claims will be undefined,
            // which is why the return type for this function specifies that the controlEndpoint/cacheEndpoint may be undefined.
            const decodedLegacyToken = decodeAuthTokenClaims(token);
            return {
                controlEndpoint: decodedLegacyToken.cp,
                cacheEndpoint: decodedLegacyToken.c,
                tokenEndpoint: decodedLegacyToken.c,
                storageEndpoint: decodedLegacyToken.c,
                authToken: token
            };
        }
    } catch (e) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        throw new errors_1.InvalidArgumentError(`failed to parse token: ${e}`);
    }
};
exports.decodeAuthToken = decodeAuthToken;
class InternalSuperUserPermissions extends permission_scope_1.PredefinedScope {
}
exports.InternalSuperUserPermissions = InternalSuperUserPermissions; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/collections.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.range = void 0;
function range(n) {
    return [
        ...Array(n).keys()
    ];
}
exports.range = range; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvdXRpbHMvY29sbGVjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsU0FBZ0IsS0FBSyxDQUFDLENBQVM7SUFDN0IsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUZELHNCQUVDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHJhbmdlKG46IG51bWJlcik6IEFycmF5PG51bWJlcj4ge1xuICByZXR1cm4gWy4uLkFycmF5KG4pLmtleXMoKV07XG59XG4iXX0=

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/display.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
// Utility functions related to displaying things to the user.
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.truncateStringArray = exports.truncateString = void 0;
function truncateString(value, maxLength = 32) {
    if (value.length > maxLength) {
        return value.substring(0, maxLength) + '...';
    } else {
        return value;
    }
}
exports.truncateString = truncateString;
const DISPLAY_SIZE_LIMIT = 5;
function truncateStringArrayToSize(stringArray, length) {
    if (stringArray.length <= length) {
        return stringArray;
    } else {
        return stringArray.slice(0, length).concat([
            '...'
        ]);
    }
}
function truncateStringArray(stringArray, length = DISPLAY_SIZE_LIMIT) {
    const truncatedStringArray = truncateStringArrayToSize(stringArray, length);
    return truncatedStringArray.map((s)=>{
        return truncateString(s);
    });
}
exports.truncateStringArray = truncateStringArray; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbnRlcm5hbC91dGlscy9kaXNwbGF5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw4REFBOEQ7OztBQUU5RCxTQUFnQixjQUFjLENBQUMsS0FBYSxFQUFFLFNBQVMsR0FBRyxFQUFFO0lBQzFELElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxTQUFTLEVBQUU7UUFDNUIsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUM7S0FDOUM7U0FBTTtRQUNMLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7QUFDSCxDQUFDO0FBTkQsd0NBTUM7QUFFRCxNQUFNLGtCQUFrQixHQUFHLENBQUMsQ0FBQztBQUU3QixTQUFTLHlCQUF5QixDQUNoQyxXQUFxQixFQUNyQixNQUFjO0lBRWQsSUFBSSxXQUFXLENBQUMsTUFBTSxJQUFJLE1BQU0sRUFBRTtRQUNoQyxPQUFPLFdBQVcsQ0FBQztLQUNwQjtTQUFNO1FBQ0wsT0FBTyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQ3JEO0FBQ0gsQ0FBQztBQUVELFNBQWdCLG1CQUFtQixDQUNqQyxXQUFxQixFQUNyQixTQUFpQixrQkFBa0I7SUFFbkMsTUFBTSxvQkFBb0IsR0FBRyx5QkFBeUIsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUUsT0FBTyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDbEMsT0FBTyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBUkQsa0RBUUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBVdGlsaXR5IGZ1bmN0aW9ucyByZWxhdGVkIHRvIGRpc3BsYXlpbmcgdGhpbmdzIHRvIHRoZSB1c2VyLlxuXG5leHBvcnQgZnVuY3Rpb24gdHJ1bmNhdGVTdHJpbmcodmFsdWU6IHN0cmluZywgbWF4TGVuZ3RoID0gMzIpIHtcbiAgaWYgKHZhbHVlLmxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoMCwgbWF4TGVuZ3RoKSArICcuLi4nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5jb25zdCBESVNQTEFZX1NJWkVfTElNSVQgPSA1O1xuXG5mdW5jdGlvbiB0cnVuY2F0ZVN0cmluZ0FycmF5VG9TaXplKFxuICBzdHJpbmdBcnJheTogc3RyaW5nW10sXG4gIGxlbmd0aDogbnVtYmVyXG4pOiBzdHJpbmdbXSB7XG4gIGlmIChzdHJpbmdBcnJheS5sZW5ndGggPD0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHN0cmluZ0FycmF5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHJpbmdBcnJheS5zbGljZSgwLCBsZW5ndGgpLmNvbmNhdChbJy4uLiddKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJ1bmNhdGVTdHJpbmdBcnJheShcbiAgc3RyaW5nQXJyYXk6IHN0cmluZ1tdLFxuICBsZW5ndGg6IG51bWJlciA9IERJU1BMQVlfU0laRV9MSU1JVFxuKTogc3RyaW5nW10ge1xuICBjb25zdCB0cnVuY2F0ZWRTdHJpbmdBcnJheSA9IHRydW5jYXRlU3RyaW5nQXJyYXlUb1NpemUoc3RyaW5nQXJyYXksIGxlbmd0aCk7XG4gIHJldHVybiB0cnVuY2F0ZWRTdHJpbmdBcnJheS5tYXAocyA9PiB7XG4gICAgcmV0dXJuIHRydW5jYXRlU3RyaW5nKHMpO1xuICB9KTtcbn1cbiJdfQ==

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/object.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fromEntries = void 0;
function fromEntries(entries) {
    return entries.reduce((acc, [key, value])=>({
            ...acc,
            [key]: value
        }), {});
}
exports.fromEntries = fromEntries; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL3V0aWxzL29iamVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxTQUFnQixXQUFXLENBQUMsT0FBNEI7SUFDdEQsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFGRCxrQ0FFQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBmcm9tRW50cmllcyhlbnRyaWVzOiBbc3RyaW5nLCB1bmtub3duXVtdKTogb2JqZWN0IHtcbiAgcmV0dXJuIGVudHJpZXMucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4gKHsuLi5hY2MsIFtrZXldOiB2YWx1ZX0pLCB7fSk7XG59XG4iXX0=

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/sleep.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sleep = void 0;
const sleep = (ms)=>new Promise((r)=>setTimeout(r, ms));
exports.sleep = sleep; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xlZXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvdXRpbHMvc2xlZXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQU8sTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFVLEVBQUUsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQTVELFFBQUEsS0FBSyxTQUF1RCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBzbGVlcCA9IChtczogbnVtYmVyKSA9PiBuZXcgUHJvbWlzZShyID0+IHNldFRpbWVvdXQociwgbXMpKTtcbiJdfQ==

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/semaphore.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
// Source: https://gist.github.com/gregkorossy/e33be1f201cf242197d9c4d0a1fa7335
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Semaphore = void 0;
class Semaphore {
    constructor(max){
        this.counter = 0;
        this.waiting = [];
        this.max = max;
    }
    take() {
        if (this.waiting.length > 0 && this.counter < this.max) {
            this.counter += 1;
            const promise = this.waiting.shift();
            if (promise) {
                promise.resolve();
            }
        }
    }
    acquire() {
        if (this.counter < this.max) {
            this.counter += 1;
            return new Promise((resolve)=>{
                resolve(undefined);
            });
        }
        return new Promise((resolve, err)=>{
            this.waiting.push({
                resolve,
                err
            });
        });
    }
    release() {
        this.counter -= 1;
        this.take();
    }
    purge() {
        const unresolved = this.waiting.length;
        for(let i = 0; i < unresolved; i += 1){
            this.waiting[i].err('Task has been purged.');
        }
        this.counter = 0;
        this.waiting = [];
        return unresolved;
    }
}
exports.Semaphore = Semaphore; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VtYXBob3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL3V0aWxzL3NlbWFwaG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0VBQStFOzs7QUFFL0UsTUFBYSxTQUFTO0lBUXBCLFlBQVksR0FBVztRQVBmLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDWixZQUFPLEdBR1QsRUFBRSxDQUFDO1FBSVAsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakIsQ0FBQztJQUVNLElBQUk7UUFDVCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDdEQsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUM7WUFDbEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNyQyxJQUFJLE9BQU8sRUFBRTtnQkFDWCxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDbkI7U0FDRjtJQUNILENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUM7WUFDbEIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDM0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFTSxLQUFLO1FBQ1YsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFFdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDOUM7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUVsQixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0NBQ0Y7QUFuREQsOEJBbURDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU291cmNlOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9ncmVna29yb3NzeS9lMzNiZTFmMjAxY2YyNDIxOTdkOWM0ZDBhMWZhNzMzNVxuXG5leHBvcnQgY2xhc3MgU2VtYXBob3JlIHtcbiAgcHJpdmF0ZSBjb3VudGVyID0gMDtcbiAgcHJpdmF0ZSB3YWl0aW5nOiB7XG4gICAgcmVzb2x2ZTogKHZhbHVlPzogdW5rbm93bikgPT4gdm9pZDtcbiAgICBlcnI6IChyZWFzb24/OiBzdHJpbmcpID0+IHZvaWQ7XG4gIH1bXSA9IFtdO1xuICBwcml2YXRlIG1heDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKG1heDogbnVtYmVyKSB7XG4gICAgdGhpcy5tYXggPSBtYXg7XG4gIH1cblxuICBwdWJsaWMgdGFrZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy53YWl0aW5nLmxlbmd0aCA+IDAgJiYgdGhpcy5jb3VudGVyIDwgdGhpcy5tYXgpIHtcbiAgICAgIHRoaXMuY291bnRlciArPSAxO1xuICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMud2FpdGluZy5zaGlmdCgpO1xuICAgICAgaWYgKHByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFjcXVpcmUoKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgaWYgKHRoaXMuY291bnRlciA8IHRoaXMubWF4KSB7XG4gICAgICB0aGlzLmNvdW50ZXIgKz0gMTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgZXJyKSA9PiB7XG4gICAgICB0aGlzLndhaXRpbmcucHVzaCh7cmVzb2x2ZSwgZXJyfSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLmNvdW50ZXIgLT0gMTtcbiAgICB0aGlzLnRha2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBwdXJnZSgpOiBudW1iZXIge1xuICAgIGNvbnN0IHVucmVzb2x2ZWQgPSB0aGlzLndhaXRpbmcubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bnJlc29sdmVkOyBpICs9IDEpIHtcbiAgICAgIHRoaXMud2FpdGluZ1tpXS5lcnIoJ1Rhc2sgaGFzIGJlZW4gcHVyZ2VkLicpO1xuICAgIH1cblxuICAgIHRoaXMuY291bnRlciA9IDA7XG4gICAgdGhpcy53YWl0aW5nID0gW107XG5cbiAgICByZXR1cm4gdW5yZXNvbHZlZDtcbiAgfVxufVxuIl19

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/index.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/auth.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/collections.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/display.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/object.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/sleep.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/string.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/validators.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/semaphore.js [app-route] (ecmascript)"), exports); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHlDQUF1QjtBQUN2QixnREFBOEI7QUFDOUIsNENBQTBCO0FBQzFCLDJDQUF5QjtBQUN6QiwwQ0FBd0I7QUFDeEIsMkNBQXlCO0FBQ3pCLCtDQUE2QjtBQUM3Qiw4Q0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2F1dGgnO1xuZXhwb3J0ICogZnJvbSAnLi9jb2xsZWN0aW9ucyc7XG5leHBvcnQgKiBmcm9tICcuL2Rpc3BsYXknO1xuZXhwb3J0ICogZnJvbSAnLi9vYmplY3QnO1xuZXhwb3J0ICogZnJvbSAnLi9zbGVlcCc7XG5leHBvcnQgKiBmcm9tICcuL3N0cmluZyc7XG5leHBvcnQgKiBmcm9tICcuL3ZhbGlkYXRvcnMnO1xuZXhwb3J0ICogZnJvbSAnLi9zZW1hcGhvcmUnO1xuIl19

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/momento-cache.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MomentoCache = void 0;
class MomentoCache {
    constructor(cacheClient, cacheName){
        this.cacheClient = cacheClient;
        this.cacheName = cacheName;
    }
    get(key) {
        return this.cacheClient.get(this.cacheName, key);
    }
    set(key, value, options) {
        return this.cacheClient.set(this.cacheName, key, value, options);
    }
    delete(key) {
        return this.cacheClient.delete(this.cacheName, key);
    }
    increment(field, amount, options) {
        return this.cacheClient.increment(this.cacheName, field, amount, options);
    }
    setIfNotExists(key, field, options) {
        return this.cacheClient.setIfNotExists(this.cacheName, key, field, options);
    }
    setIfAbsent(key, field, options) {
        return this.cacheClient.setIfAbsent(this.cacheName, key, field, options);
    }
    setIfPresent(key, value, options) {
        return this.cacheClient.setIfPresent(this.cacheName, key, value, options);
    }
    setIfEqual(key, value, equal, options) {
        return this.cacheClient.setIfEqual(this.cacheName, key, value, equal, options);
    }
    setIfNotEqual(key, value, notEqual, options) {
        return this.cacheClient.setIfNotEqual(this.cacheName, key, value, notEqual, options);
    }
    setIfPresentAndNotEqual(key, value, notEqual, options) {
        return this.cacheClient.setIfPresentAndNotEqual(this.cacheName, key, value, notEqual, options);
    }
    setIfAbsentOrEqual(key, value, equal, options) {
        return this.cacheClient.setIfAbsentOrEqual(this.cacheName, key, value, equal, options);
    }
    getBatch(keys) {
        return this.cacheClient.getBatch(this.cacheName, keys);
    }
    setBatch(items, options) {
        return this.cacheClient.setBatch(this.cacheName, items, options);
    }
    setFetch(setName) {
        return this.cacheClient.setFetch(this.cacheName, setName);
    }
    setAddElement(setName, element, options) {
        return this.cacheClient.setAddElement(this.cacheName, setName, element, options);
    }
    setAddElements(setName, elements, options) {
        return this.cacheClient.setAddElements(this.cacheName, setName, elements, options);
    }
    setContainsElement(setName, element) {
        return this.cacheClient.setContainsElement(this.cacheName, setName, element);
    }
    setContainsElements(setName, elements) {
        return this.cacheClient.setContainsElements(this.cacheName, setName, elements);
    }
    setRemoveElement(setName, element) {
        return this.cacheClient.setRemoveElement(this.cacheName, setName, element);
    }
    setRemoveElements(setName, elements) {
        return this.cacheClient.setRemoveElements(this.cacheName, setName, elements);
    }
    setSample(setName, limit) {
        return this.cacheClient.setSample(this.cacheName, setName, limit);
    }
    setPop(setName, count) {
        return this.cacheClient.setPop(this.cacheName, setName, count);
    }
    setLength(setName) {
        return this.cacheClient.setLength(this.cacheName, setName);
    }
    listFetch(listName, options) {
        return this.cacheClient.listFetch(this.cacheName, listName, options);
    }
    listLength(listName) {
        return this.cacheClient.listLength(this.cacheName, listName);
    }
    listPushFront(listName, value, options) {
        return this.cacheClient.listPushFront(this.cacheName, listName, value, options);
    }
    listPushBack(listName, value, options) {
        return this.cacheClient.listPushBack(this.cacheName, listName, value, options);
    }
    listConcatenateBack(listName, values, options) {
        return this.cacheClient.listConcatenateBack(this.cacheName, listName, values, options);
    }
    listConcatenateFront(listName, values, options) {
        return this.cacheClient.listConcatenateFront(this.cacheName, listName, values, options);
    }
    listPopBack(listName) {
        return this.cacheClient.listPopBack(this.cacheName, listName);
    }
    listPopFront(listName) {
        return this.cacheClient.listPopFront(this.cacheName, listName);
    }
    listRemoveValue(listName, value) {
        return this.cacheClient.listRemoveValue(this.cacheName, listName, value);
    }
    listRetain(listName, options) {
        return this.cacheClient.listRetain(this.cacheName, listName, options);
    }
    dictionarySetField(dictionaryName, field, value, options) {
        return this.cacheClient.dictionarySetField(this.cacheName, dictionaryName, field, value, options);
    }
    dictionarySetFields(dictionaryName, elements, options) {
        return this.cacheClient.dictionarySetFields(this.cacheName, dictionaryName, elements, options);
    }
    dictionaryGetField(dictionaryName, field) {
        return this.cacheClient.dictionaryGetField(this.cacheName, dictionaryName, field);
    }
    dictionaryGetFields(dictionaryName, fields) {
        return this.cacheClient.dictionaryGetFields(this.cacheName, dictionaryName, fields);
    }
    dictionaryFetch(dictionaryName) {
        return this.cacheClient.dictionaryFetch(this.cacheName, dictionaryName);
    }
    dictionaryIncrement(dictionaryName, field, amount, options) {
        return this.cacheClient.dictionaryIncrement(this.cacheName, dictionaryName, field, amount, options);
    }
    dictionaryRemoveField(dictionaryName, field) {
        return this.cacheClient.dictionaryRemoveField(this.cacheName, dictionaryName, field);
    }
    dictionaryRemoveFields(dictionaryName, fields) {
        return this.cacheClient.dictionaryRemoveFields(this.cacheName, dictionaryName, fields);
    }
    dictionaryLength(dictionaryName) {
        return this.cacheClient.dictionaryLength(this.cacheName, dictionaryName);
    }
    sortedSetFetchByRank(sortedSetName, options) {
        return this.cacheClient.sortedSetFetchByRank(this.cacheName, sortedSetName, options);
    }
    sortedSetFetchByScore(sortedSetName, options) {
        return this.cacheClient.sortedSetFetchByScore(this.cacheName, sortedSetName, options);
    }
    sortedSetPutElement(sortedSetName, value, score, options) {
        return this.cacheClient.sortedSetPutElement(this.cacheName, sortedSetName, value, score, options);
    }
    sortedSetPutElements(sortedSetName, elements, options) {
        return this.cacheClient.sortedSetPutElements(this.cacheName, sortedSetName, elements, options);
    }
    sortedSetGetRank(sortedSetName, value) {
        return this.cacheClient.sortedSetGetRank(this.cacheName, sortedSetName, value);
    }
    sortedSetGetScore(sortedSetName, value) {
        return this.cacheClient.sortedSetGetScore(this.cacheName, sortedSetName, value);
    }
    sortedSetGetScores(sortedSetName, values) {
        return this.cacheClient.sortedSetGetScores(this.cacheName, sortedSetName, values);
    }
    sortedSetIncrementScore(sortedSetName, value, amount, options) {
        return this.cacheClient.sortedSetIncrementScore(this.cacheName, sortedSetName, value, amount, options);
    }
    sortedSetRemoveElement(sortedSetName, value) {
        return this.cacheClient.sortedSetRemoveElement(this.cacheName, sortedSetName, value);
    }
    sortedSetRemoveElements(sortedSetName, values) {
        return this.cacheClient.sortedSetRemoveElements(this.cacheName, sortedSetName, values);
    }
    sortedSetLength(sortedSetName) {
        return this.cacheClient.sortedSetLength(this.cacheName, sortedSetName);
    }
    sortedSetLengthByScore(sortedSetName, options) {
        return this.cacheClient.sortedSetLengthByScore(this.cacheName, sortedSetName, options);
    }
    itemGetType(key) {
        return this.cacheClient.itemGetType(this.cacheName, key);
    }
    itemGetTtl(key) {
        return this.cacheClient.itemGetTtl(this.cacheName, key);
    }
    keyExists(key) {
        return this.cacheClient.keyExists(this.cacheName, key);
    }
    keysExist(keys) {
        return this.cacheClient.keysExist(this.cacheName, keys);
    }
    updateTtl(key, ttlMilliseconds) {
        return this.cacheClient.updateTtl(this.cacheName, key, ttlMilliseconds);
    }
    increaseTtl(key, ttlMilliseconds) {
        return this.cacheClient.increaseTtl(this.cacheName, key, ttlMilliseconds);
    }
    decreaseTtl(key, ttlMilliseconds) {
        return this.cacheClient.decreaseTtl(this.cacheName, key, ttlMilliseconds);
    }
    close() {
        this.cacheClient.close();
    }
}
exports.MomentoCache = MomentoCache; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/AbstractCacheClient.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AbstractCacheClient = void 0;
const index_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/index.js [app-route] (ecmascript)");
const momento_cache_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/momento-cache.js [app-route] (ecmascript)");
class AbstractCacheClient {
    constructor(controlClient, dataClients, pingClient){
        this.controlClient = controlClient;
        this.dataClients = dataClients;
        this.pingClient = pingClient;
        // We round-robin the requests through all of our clients.  Since javascript
        // is single-threaded, we don't have to worry about thread safety on this
        // index variable.
        this.nextDataClientIndex = 0;
    }
    cache(cacheName) {
        return new momento_cache_1.MomentoCache(this, cacheName);
    }
    /**
     * Ping the service to verify it is up and running
     */ async ping() {
        var _a;
        return await ((_a = this.pingClient) === null || _a === void 0 ? void 0 : _a.ping());
    }
    /**
     * Creates a cache if it does not exist.
     *
     * @param {string} cacheName - The cache to be created.
     * @returns {Promise<CreateCache.Response>} -
     * {@link CreateCache.Success} on success.
     * {@link CreateCache.AlreadyExists} if the cache already exists.
     * {@link CreateCache.Error} on failure.
     */ async createCache(cacheName) {
        return await this.controlClient.createCache(cacheName);
    }
    /**
     * Deletes a cache and all items stored in it.
     *
     * @param {string} cacheName - The cache to delete.
     * @returns {Promise<DeleteCache.Response>} -
     * {@link DeleteCache.Success} on success.
     * {@link DeleteCache.Error} on failure.
     */ async deleteCache(cacheName) {
        return await this.controlClient.deleteCache(cacheName);
    }
    /**
     * Lists all caches.
     *
     * @returns {Promise<ListCaches.Response>} -
     * {@link ListCaches.Success} containing the list on success.
     * {@link ListCaches.Error} on failure.
     */ async listCaches() {
        return await this.controlClient.listCaches();
    }
    /**
     * Gets the value stored for the given key.
     *
     * @param {string} cacheName - The cache to perform the lookup in.
     * @param {string | Uint8Array} key - The key to look up.
     * @param {GetOptions} [options]
     * @param {decompress} [options.decompress=false] - Whether to decompress the value. Overrides the client-wide
     * automatic decompression setting.
     * @returns {Promise<CacheGet.Response>} -
     * {@link CacheGet.Hit} containing the value if one is found.
     * {@link CacheGet.Miss} if the key does not exist.
     * {@link CacheGet.Error} on failure.
     */ async get(cacheName, key, options) {
        return await this.getNextDataClient().get(cacheName, key, options);
    }
    /**
     * Associates the given key with the given value. If a value for the key is
     * already present it is replaced with the new value.
     *
     * @param {string} cacheName - The cache to store the value in.
     * @param {string | Uint8Array} key - The key to set.
     * @param {string | Uint8Array} value - The value to be stored.
     * @param {SetOptions} [options]
     * @param {number} [options.ttl] - The time to live for the item in the cache.
     * Uses the client's default TTL if this is not supplied.
     * @param {boolean} [options.compress=false] - Whether to compress the value. Defaults to false.
     * @returns {Promise<CacheSet.Response>} -
     * {@link CacheSet.Success} on success.
     * {@link CacheSet.Error} on failure.
     */ async set(cacheName, key, value, options) {
        // this typeof check wouldn't be necessary in TS, but it can help catch bugs in JS code at runtime.
        if (typeof options === 'number') {
            throw new index_1.InvalidArgumentError('Options must be an object with a ttl property.');
        }
        const client = this.getNextDataClient();
        return await client.set(cacheName, key, value, options);
    }
    /**
     * Removes the given key from the cache. The key can represent a single value
     * or a collection.
     *
     * @param {string} cacheName - The cache to delete from.
     * @param {string | Uint8Array} key - The key to delete.
     * @returns {Promise<CacheDelete.Response>} -
     * {@link CacheDelete.Success} on success.
     * {@link CacheDelete.Error} on failure.
     */ async delete(cacheName, key) {
        const client = this.getNextDataClient();
        return await client.delete(cacheName, key);
    }
    /**
     * Gets the value stored for the given keys.
     *
     * @param {string} cacheName - The cache to perform the lookup in.
     * @param {string[] | Uint8Array[]} keys - The list of keys to look up.
     * @param {GetBatchOptions} [options]
     * @param {decompress} [options.decompress=false] - Whether to decompress the value. Overrides the client-wide
     * automatic decompression setting.
     * @returns {Promise<CacheGetBatch.Response>} -
     * {@link CacheGetBatch.Success} containing the values if they were found.
     * {@link CacheGetBatch.Error} on failure.
     */ async getBatch(cacheName, keys, options) {
        return await this.getNextDataClient().getBatch(cacheName, keys, options);
    }
    /**
     * Associates the given keys with the given values. If a value for the key is
     * already present it is replaced with the new value.
     *
     * @param {string} cacheName - The cache to store the values in.
     * @param {Record<string, string | Uint8Array | SetBatchItem> | Map<string | Uint8Array, string | Uint8Array | SetBatchItem>} items - The key-value pairs to be stored, with the option to set a TTL per item.
     * @param {SetBatchOptions} [options]
     * @param {number} [options.ttl] - The time to live for the items in the cache.
     * Uses the client's default TTL if this is not supplied.
     * @param {boolean} [options.compress=false] - Whether to compress the value. Defaults to false.
     * @returns {Promise<CacheSetBatch.Response>} -
     * {@link CacheSetBatch.Success} on success.
     * {@link CacheSetBatch.Error} on failure.
     */ async setBatch(cacheName, items, options) {
        const client = this.getNextDataClient();
        return await client.setBatch(cacheName, items, options);
    }
    /**
     * Adds multiple elements to the back of the given list. Creates the list if
     * it does not already exist.
     *
     * @param {string} cacheName - The cache to store the list in.
     * @param {string} listName - The list to add to.
     * @param {string[] | Uint8Array[]} values - The elements to add to the list.
     * @param {ListConcatenateBackOptions} [options]
     * @param {number} [options.truncateFrontToSize] - If the list exceeds this
     * length, remove excess from the front of the list. Must be positive.
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the list's TTL using the client's default if this is not
     * supplied.
     * @returns {Promise<CacheListConcatenateBack.Response>} -
     * {@link CacheListConcatenateBack.Success} on success.
     * {@link CacheListConcatenateBack.Error} on failure.
     */ async listConcatenateBack(cacheName, listName, values, options) {
        const client = this.getNextDataClient();
        return await client.listConcatenateBack(cacheName, listName, values, options === null || options === void 0 ? void 0 : options.truncateFrontToSize, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Adds multiple elements to the front of the given list. Creates the list if
     * it does not already exist.
     *
     * @param {string} cacheName - The cache to store the list in.
     * @param {string} listName - The list to add to.
     * @param {string[] | Uint8Array[]} values - The elements to add to the list.
     * @param {ListConcatenateFrontOptions} [options]
     * @param {number} [options.truncateBackToSize] - If the list exceeds this
     * length, remove excess from the back of the list. Must be positive.
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the list's TTL using the client's default if this is not
     * supplied.
     * @returns {Promise<CacheListConcatenateFront.Response>} -
     * {@link CacheListConcatenateFront.Success} on success.
     * {@link CacheListConcatenateFront.Error} on failure.
     */ async listConcatenateFront(cacheName, listName, values, options) {
        const client = this.getNextDataClient();
        return await client.listConcatenateFront(cacheName, listName, values, options === null || options === void 0 ? void 0 : options.truncateBackToSize, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Fetches all elements of the given list.
     *
     * @param {string} cacheName - The cache containing the list.
     * @param {string} listName - The list to fetch.
     * @param {ListFetchCallOptions} [options]
     * @param {number} [options.startIndex] - Start inclusive index for fetch operation.
     * @param {number} [options.endIndex] - End exclusive index for fetch operation.
     * @returns {Promise<CacheListFetch.Response>} -
     * {@link CacheListFetch.Hit} containing the list elements if the list exists.
     * {@link CacheListFetch.Miss} if the list does not exist.
     * {@link CacheListFetch.Error} on failure.
     */ async listFetch(cacheName, listName, options) {
        const client = this.getNextDataClient();
        return await client.listFetch(cacheName, listName, options === null || options === void 0 ? void 0 : options.startIndex, options === null || options === void 0 ? void 0 : options.endIndex);
    }
    /**
     * Gets the number of elements in the given list.
     *
     * @param {string} cacheName - The cache containing the list.
     * @param {string} listName - The list to get the length of.
     * @returns {Promise<CacheListLength.Response>} -
     * {@link CacheListLength.Hit} containing the length if the list exists.
     * {@link CacheListLength.Miss} if the list does not exist.
     * {@link CacheListLength.Error} on failure.
     */ async listLength(cacheName, listName) {
        const client = this.getNextDataClient();
        return await client.listLength(cacheName, listName);
    }
    /**
     * Gets and removes the last value from the given list.
     *
     * @param {string} cacheName - The cache containing the list.
     * @param {string} listName - The list to pop.
     * @returns {Promise<CacheListPopBack.Response>} -
     * {@link CacheListPopBack.Hit} containing the element if the list exists.
     * {@link CacheListPopBack.Miss} if the list does not exist.
     * {@link CacheListPopBack.Error} on failure.
     */ async listPopBack(cacheName, listName) {
        const client = this.getNextDataClient();
        return await client.listPopBack(cacheName, listName);
    }
    /**
     * Gets and removes the first value from the given list.
     *
     * @param {string} cacheName - The cache containing the list.
     * @param {string} listName - The list to pop.
     * @returns {Promise<CacheListPopFront.Response>} -
     * {@link CacheListPopFront.Hit} containing the element if the list exists.
     * {@link CacheListPopFront.Miss} if the list does not exist.
     * {@link CacheListPopFront.Error} on failure.
     */ async listPopFront(cacheName, listName) {
        const client = this.getNextDataClient();
        return await client.listPopFront(cacheName, listName);
    }
    /**
     * Adds an element to the back of the given list. Creates the list if
     * it does not already exist.
     *
     * @param {string} cacheName - The cache to store the list in.
     * @param {string} listName - The list to push to.
     * @param {string | Uint8Array} value - The value to push.
     * @param {ListPushBackOptions} [options]
     * @param {number} [options.truncateFrontToSize] - If the list exceeds this
     * length, remove excess from the front of the list. Must be positive.
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the list's TTL using the client's default if this is not
     * supplied.
     * @returns {Promise<CacheListPushBack.Response>} -
     * {@link CacheListPushBack.Success} containing the list's new length on
     * success.
     * {@link CacheListPushBack.Error} on failure.
     */ async listPushBack(cacheName, listName, value, options) {
        const client = this.getNextDataClient();
        return await client.listPushBack(cacheName, listName, value, options === null || options === void 0 ? void 0 : options.truncateFrontToSize, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Adds an element to the front of the given list. Creates the list if
     * it does not already exist.
     *
     * @param {string} cacheName - The cache to store the list in.
     * @param {string} listName - The list to push to.
     * @param {string | Uint8Array} value - The value to push.
     * @param {ListPushFrontOptions} [options]
     * @param {number} [options.truncateBackToSize] - If the list exceeds this
     * length, remove excess from the end of the list. Must be positive.
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the list's TTL using the client's default if this is not
     * supplied.
     * @returns {Promise<CacheListPushFront.Response>} -
     * {@link CacheListPushFront.Success} containing the list's new length on
     * success.
     * {@link CacheListPushFront.Error} on failure.
     */ async listPushFront(cacheName, listName, value, options) {
        const client = this.getNextDataClient();
        return await client.listPushFront(cacheName, listName, value, options === null || options === void 0 ? void 0 : options.truncateBackToSize, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Removes all elements from the given list equal to the given value.
     *
     * @param {string} cacheName - The cache containing the list.
     * @param {string} listName - The list to remove from.
     * @param {string | Uint8Array} value - The value to remove.
     * @returns {Promise<CacheListRemoveValue.Response>} -
     * {@link CacheListRemoveValue.Success} on success. Removing an element that
     * does not occur in the list or removing from a non-existent list counts as a
     * success.
     * {@link CacheListRemoveValue.Error} on failure.
     */ async listRemoveValue(cacheName, listName, value) {
        const client = this.getNextDataClient();
        return await client.listRemoveValue(cacheName, listName, value);
    }
    /**
     * Retains slice of elements of a given list, deletes the rest of the list
     * that isn't being retained. Returns a Success or Error.
     *
     * @param {string} cacheName - The cache containing the list.
     * @param {string} listName - The list to retain a slice of.
     * @param {ListRetainCallOptions} [options]
     * @param {number} [options.startIndex] - Start inclusive index for fetch
     * operation. Defaults to start of array if not given, 0.
     * @param {number} [options.endIndex] - End exclusive index for fetch
     * operation. Defaults to end of array if not given.
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the list's TTL using the client's default if this is not
     * supplied.
     * @returns {Promise<CacheListRetain.Response>} -
     * {@link CacheListRetain.Success} on success.
     * {@link CacheListRetain.Error} on failure.
     */ async listRetain(cacheName, listName, options) {
        const client = this.getNextDataClient();
        return await client.listRetain(cacheName, listName, options === null || options === void 0 ? void 0 : options.startIndex, options === null || options === void 0 ? void 0 : options.endIndex, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Fetches all elements of the given set
     *
     * @param {string} cacheName - The cache containing the set.
     * @param {string} setName - The set to fetch.
     * @returns {Promise<CacheSetFetch.Response>} -
     * {@link CacheSetFetch.Hit} containing the set elements if the set exists.
     * {@link CacheSetFetch.Miss} if the set does not exist.
     * {@link CacheSetFetch.Error} on failure.
     */ async setFetch(cacheName, setName) {
        const client = this.getNextDataClient();
        return await client.setFetch(cacheName, setName);
    }
    /**
     * Adds an element to the given set. Creates the set if it does not already
     * exist.
     *
     * @remarks
     * After this operation the set will contain the union of the element passed
     * in and the original elements of the set.
     *
     * @param {string} cacheName - The cache to store the set in.
     * @param {string} setName - The set to add to.
     * @param {string | Uint8Array} element - The element to add.
     * @param {SetAddElementOptions} options
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the set's TTL using the client's default if this is not supplied.
     * @returns {Promise<CacheSetAddElement.Response>} -
     * {@link CacheSetAddElement.Success} on success.
     * {@link CacheSetAddElement.Error} on failure.
     */ async setAddElement(cacheName, setName, element, options) {
        return (await this.setAddElements(cacheName, setName, [
            element
        ], options)).toSingularResponse();
    }
    /**
     * Adds multiple elements to the given set. Creates the set if it does not
     * already exist.
     *
     * @remarks
     * After this operation, the set will contain the union of the elements passed
     * in and the original elements of the set.
     *
     * @param {string} cacheName - The cache to store the set in.
     * @param {string} setName - The set to add to.
     * @param {string[] | Uint8Array[]} elements - The elements to add.
     * @param {SetAddElementsOptions} options
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the set's TTL using the client's default if this is not supplied.
     * @returns {Promise<CacheSetAddElements.Response>} -
     * {@link CacheSetAddElements.Success} on success.
     * {@link CacheSetAddElements.Error} on failure.
     */ async setAddElements(cacheName, setName, elements, options) {
        const client = this.getNextDataClient();
        return await client.setAddElements(cacheName, setName, elements, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Tests if the given set contains the given element.
     * @param cacheName - The cache containing the set.
     * @param setName - The set to check.
     * @param element - The element to check for.
     * @returns {Promise<CacheSetContainsElement.Response>} -
     * {@link CacheSetContainsElement.Hit} if the set exists and contains the element.
     * {@link CacheSetContainsElement.Miss} if the set does not contain the element.
     * {@link CacheSetContainsElement.Error} on failure.
     */ async setContainsElement(cacheName, setName, element) {
        const client = this.getNextDataClient();
        return await client.setContainsElement(cacheName, setName, element);
    }
    /**
     * Tests if the given set contains the given elements.
     * @param cacheName - The cache containing the set.
     * @param setName - The set to check.
     * @param elements - The elements to check for.
     * @returns {Promise<CacheSetContainsElements.Response>} -
     * {@link CacheSetContainsElements.Hit} containing the elements to their presence in the cache.
     * {@link CacheSetContainsElements.Miss} if the set does not contain the elements.
     * {@link CacheSetContainsElements.Error} on failure.
     */ async setContainsElements(cacheName, setName, elements) {
        const client = this.getNextDataClient();
        return await client.setContainsElements(cacheName, setName, elements);
    }
    /**
     * Removes an element from the given set.
     *
     * @param {string} cacheName - The cache containing the set.
     * @param {string} setName - The set to remove from.
     * @param {string | Uint8Array} element - The element to remove.
     * @returns {Promise<CacheSetRemoveElement.Response>} -
     * {@link CacheSetRemoveElement.Success} on success. Removing an element that
     * does not occur in the set or removing from a non-existent set counts as a
     * success.
     * {@link CacheSetRemoveElement.Error} on failure.
     */ async setRemoveElement(cacheName, setName, element) {
        return (await this.setRemoveElements(cacheName, setName, [
            element
        ])).toSingularResponse();
    }
    /**
     * Removes multiple elements from the given set.
     *
     * @param {string} cacheName - The cache containing the set.
     * @param {string} setName - The set to remove from.
     * @param {string[] | Uint8Array[]} elements - The elements to remove.
     * @returns {Promise<CacheSetRemoveElements.Response>} -
     * {@link CacheSetRemoveElements.Success} on success. Removing elements that
     * do not occur in the set or removing from a non-existent set counts as a
     * success.
     * {@link CacheSetRemoveElements.Error} on failure.
     */ async setRemoveElements(cacheName, setName, elements) {
        const client = this.getNextDataClient();
        return await client.setRemoveElements(cacheName, setName, elements);
    }
    /**
     * Fetch a random sample of elements from the set.
     * Returns a different random sample for each call.
     *
     * @param {string} cacheName - The cache containing the set.
     * @param {string} setName - The set to remove from.
     * @param {number} limit - The maximum number of elements to return.
     * If the set contains fewer than 'limit' elements, the entire set will be returned.
     * @returns {Promise<CacheSetSample.Response>} -
     * {@link CacheSetSample.Hit} containing the set elements if the set exists.
     * {@link CacheSetSample.Miss} if the set does not exist.
     * {@link CacheSetSample.Error} on failure.
     */ async setSample(cacheName, setName, limit) {
        const client = this.getNextDataClient();
        return await client.setSample(cacheName, setName, limit);
    }
    /**
     * Pops a random sample of elements from the set.
     *
     * @param {string} cacheName - The cache containing the set.
     * @param {string} setName - The set to remove from.
     * @param {number} count - The maximum number of elements to return.
     * If the set contains fewer than 'limit' elements, the entire set will be returned.
     * @returns {Promise<CacheSetPop.Response>} -
     * {@link CacheSetPop.Hit} containing the set elements if the set exists.
     * {@link CacheSetPop.Miss} if the set does not exist.
     * {@link CacheSetPop.Error} on failure.
     */ async setPop(cacheName, setName, count) {
        const client = this.getNextDataClient();
        return await client.setPop(cacheName, setName, count);
    }
    /**
     * Get the number of elements in the set.
     *
     * @param {string} cacheName - The cache containing the set.
     * @param {string} setName - The set to remove from.
     * @returns {Promise<CacheSetLength.Response>} -
     * {@link CacheSetLength.Hit} containing the set elements if the set exists.
     * {@link CacheSetLength.Miss} if the set does not exist.
     * {@link CacheSetLength.Error} on failure.
     */ async setLength(cacheName, setName) {
        const client = this.getNextDataClient();
        return await client.setLength(cacheName, setName);
    }
    /**
     * Associates the given key with the given value if key is not already present in the cache.
     *
     * @deprecated Use setIfAbsent instead.
     * @param {string} cacheName - The cache to store the value in.
     * @param {string | Uint8Array} key - The key to set.
     * @param {string | Uint8Array} field - The value to be stored.
     * @param {SetIfNotExistsOptions} [options]
     * @param {number} [options.ttl] - The time to live for the item in the cache.
     * Uses the client's default TTL if this is not supplied.
     * @returns {Promise<CacheSetIfNotExists.Response>} -
     * {@link CacheSetIfNotExists.Stored} on storing the new value.
     * {@link CacheSetIfNotExists.NotStored} on not storing the new value.
     * {@link CacheSetIfNotExists.Error} on failure.
     */ async setIfNotExists(cacheName, key, field, options) {
        const client = this.getNextDataClient();
        return await client.setIfNotExists(cacheName, key, field, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Associates the given key with the given value if key is not already present in the cache.
     *
     * @param {string} cacheName - The cache to store the value in.
     * @param {string | Uint8Array} key - The key to set.
     * @param {string | Uint8Array} field - The value to be stored.
     * @param {SetIfAbsentOptions} [options]
     * @param {number} [options.ttl] - The time to live for the item in the cache.
     * Uses the client's default TTL if this is not supplied.
     * @param {boolean} [options.compress=false] - Whether to compress the value. Defaults to false.
     * @returns {Promise<CacheSetIfAbsent.Response>} -
     * {@link CacheSetIfAbsent.Stored} on storing the new value.
     * {@link CacheSetIfAbsent.NotStored} on not storing the new value.
     * {@link CacheSetIfAbsent.Error} on failure.
     */ async setIfAbsent(cacheName, key, field, options) {
        const client = this.getNextDataClient();
        return await client.setIfAbsent(cacheName, key, field, options);
    }
    /**
     * Associates the given key with the given value if the key is present in the cache.
     *
     * @param {string} cacheName - The cache to store the value in.
     * @param {string | Uint8Array} key - The key to set.
     * @param {string | Uint8Array} field - The value to be stored.
     * @param {SetIfPresentOptions} [options]
     * @param {number} [options.ttl] - The time to live for the item in the cache.
     * Uses the client's default TTL if this is not supplied.
     * @returns {Promise<CacheSetIfPresent.Response>} -
     * {@link CacheSetIfPresent.Stored} on storing the new value.
     * {@link CacheSetIfPresent.NotStored} on not storing the new value.
     * {@link CacheSetIfPresent.Error} on failure.
     */ async setIfPresent(cacheName, key, field, options) {
        const client = this.getNextDataClient();
        return await client.setIfPresent(cacheName, key, field, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Associates the given key with the given value if the key is present in the cache
     * and its value is equal to the supplied `equal` value.
     *
     * @param {string} cacheName - The cache to store the value in.
     * @param {string | Uint8Array} key - The key to set.
     * @param {string | Uint8Array} field - The value to be stored.
     * @param {string | Uint8Array} equal - The value to compare to the cached value.
     * @param {SetIfEqualOptions} [options]
     * @param {number} [options.ttl] - The time to live for the item in the cache.
     * Uses the client's default TTL if this is not supplied.
     * @returns {Promise<CacheSetIfEqual.Response>} -
     * {@link CacheSetIfEqual.Stored} on storing the new value.
     * {@link CacheSetIfEqual.NotStored} on not storing the new value.
     * {@link CacheSetIfEqual.Error} on failure.
     */ async setIfEqual(cacheName, key, field, equal, options) {
        const client = this.getNextDataClient();
        return await client.setIfEqual(cacheName, key, field, equal, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Associates the given key with the given value if the key does not exist in the cache or
     * if the value for the key is not equal to the supplied `notEqual` parameter.
     *
     * @param {string} cacheName - The cache to store the value in.
     * @param {string | Uint8Array} key - The key to set.
     * @param {string | Uint8Array} field - The value to be stored.
     * @param {string | Uint8Array} notEqual - The value to compare to the cached value.
     * @param {SetIfNotEqualOptions} [options]
     * @param {number} [options.ttl] - The time to live for the item in the cache.
     * Uses the client's default TTL if this is not supplied.
     * @returns {Promise<CacheSetIfNotEqual.Response>} -
     * {@link CacheSetIfNotEqual.Stored} on storing the new value.
     * {@link CacheSetIfNotEqual.NotStored} on not storing the new value.
     * {@link CacheSetIfNotEqual.Error} on failure.
     */ async setIfNotEqual(cacheName, key, field, notEqual, options) {
        const client = this.getNextDataClient();
        return await client.setIfNotEqual(cacheName, key, field, notEqual, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Associates the given key with the given value if key is present in the cache
     * and its value is not equal to the supplied `notEqual` value.
     *
     * @param {string} cacheName - The cache to store the value in.
     * @param {string | Uint8Array} key - The key to set.
     * @param {string | Uint8Array} field - The value to be stored.
     * @param {string | Uint8Array} notEqual - The value to compare to the cached value.
     * @param {SetIfAbsentOptions} [options]
     * @param {number} [options.ttl] - The time to live for the item in the cache.
     * Uses the client's default TTL if this is not supplied.
     * @returns {Promise<CacheSetIfPresentAndNotEqual.Response>} -
     * {@link CacheSetIfPresentAndNotEqual.Stored} on storing the new value.
     * {@link CacheSetIfPresentAndNotEqual.NotStored} on not storing the new value.
     * {@link CacheSetIfPresentAndNotEqual.Error} on failure.
     */ async setIfPresentAndNotEqual(cacheName, key, field, notEqual, options) {
        const client = this.getNextDataClient();
        return await client.setIfPresentAndNotEqual(cacheName, key, field, notEqual, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Associates the given key with the given value if key is absent or if the key is
     * present and its value is equal to the given value.
     *
     * @param {string} cacheName - The cache to store the value in.
     * @param {string | Uint8Array} key - The key to set.
     * @param {string | Uint8Array} field - The value to be stored.
     * @param {string | Uint8Array} equal - The value to compare to the cached value.
     * @param {SetIfAbsentOrEqualOptions} [options]
     * @param {number} [options.ttl] - The time to live for the item in the cache.
     * Uses the client's default TTL if this is not supplied.
     * @returns {Promise<CacheSetIfAbsentOrEqual.Response>} -
     * {@link CacheSetIfAbsentOrEqual.Stored} on storing the new value.
     * {@link CacheSetIfAbsentOrEqual.NotStored} on not storing the new value.
     * {@link CacheSetIfAbsentOrEqual.Error} on failure.
     */ async setIfAbsentOrEqual(cacheName, key, field, equal, options) {
        const client = this.getNextDataClient();
        return await client.setIfAbsentOrEqual(cacheName, key, field, equal, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Flushes / clears all the items of the given cache
     *
     * @param {string} cacheName - The cache to be flushed.
     * @returns {Promise<CacheFlush.Response>} -
     * {@link CacheFlush.Success} on success.
     * {@link CacheFlush.Error} on failure.
     */ async flushCache(cacheName) {
        return await this.controlClient.flushCache(cacheName);
    }
    /**
     * Fetches all elements of the given dictionary.
     *
     * @param {string} cacheName - The cache to perform the lookup in.
     * @param {string} dictionaryName - The dictionary to fetch.
     * @returns {Promise<CacheDictionaryFetch.Response>} -
     * {@link CacheDictionaryFetch.Hit} containing the dictionary elements if the
     * dictionary exists.
     * {@link CacheDictionaryFetch.Miss} if the dictionary does not exist.
     * {@link CacheDictionaryFetch.Error} on failure.
     */ async dictionaryFetch(cacheName, dictionaryName) {
        const client = this.getNextDataClient();
        return await client.dictionaryFetch(cacheName, dictionaryName);
    }
    /**
     * Adds an integer quantity to a field value.
     *
     * @remarks
     * Incrementing the value of a missing field sets the value to amount.
     *
     * @param {string} cacheName - The cache containing the field.
     * @param {string | Uint8Array} field - The field to increment.
     * @param {number} amount - The quantity to add to the value. May be positive,
     * negative, or zero. Defaults to 1.
     * @param {IncrementOptions} options
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * @returns {Promise<CacheIncrement>} -
     * {@link CacheIncrement.Success} containing the incremented value
     * on success.
     * {@link CacheIncrement.Error} on failure. Incrementing a value
     * that was not set using this method or is not the string representation of
     * an integer results in a failure with a FailedPreconditionException error.
     */ async increment(cacheName, field, amount = 1, options) {
        const client = this.getNextDataClient();
        return await client.increment(cacheName, field, amount, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Adds an element to the given dictionary. Creates the dictionary if it does
     * not already exist.
     *
     * @param {string} cacheName - The cache to store the dictionary in.
     * @param {string} dictionaryName - The dictionary to add to.
     * @param {string | Uint8Array} field - The field to set.
     * @param {string | Uint8Array} value - The value to store.
     * @param {DictionarySetFieldOptions} options
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the dictionary's TTL using the client's default if this is not
     * supplied.
     * @returns {Promise<CacheDictionarySetField.Response>} -
     * {@link CacheDictionarySetField.Success} on success.
     * {@link CacheDictionarySetField.Error} on failure.
     */ async dictionarySetField(cacheName, dictionaryName, field, value, options) {
        const client = this.getNextDataClient();
        return await client.dictionarySetField(cacheName, dictionaryName, field, value, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Adds multiple elements to the given dictionary. Creates the dictionary if
     * it does not already exist.
     *
     * @param {string} cacheName - The cache to store the dictionary in.
     * @param {string} dictionaryName - The dictionary to add to.
     * @param {Map<string | Uint8Array, string | Uint8Array>} elements - The
     * elements to set.
     * @param {DictionarySetFieldsOptions} options
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the dictionary's TTL using the client's default if this is not
     * supplied.
     * @returns {Promise<CacheDictionarySetFields.Response>} -
     * {@link CacheDictionarySetFields.Success} on success.
     * {@link CacheDictionarySetFields.Error} on failure.
     */ async dictionarySetFields(cacheName, dictionaryName, elements, options) {
        const client = this.getNextDataClient();
        return await client.dictionarySetFields(cacheName, dictionaryName, elements, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Gets the value stored for the given dictionary and field.
     *
     * @param {string} cacheName - The cache containing the dictionary.
     * @param {string} dictionaryName - The dictionary to look up.
     * @param {string | Uint8Array} field - The field to look up.
     * @returns {Promise<CacheDictionaryGetField.Response>} -
     * {@link CacheDictionaryGetField.Hit} containing the dictionary element if
     * one is found.
     * {@link CacheDictionaryGetField.Miss} if the dictionary does not exist.
     * {@link CacheDictionaryGetField.Error} on failure.
     */ async dictionaryGetField(cacheName, dictionaryName, field) {
        const client = this.getNextDataClient();
        return await client.dictionaryGetField(cacheName, dictionaryName, field);
    }
    /**
     * Gets multiple values from the given dictionary.
     *
     * @param {string} cacheName - The cache containing the dictionary.
     * @param {string} dictionaryName - The dictionary to look up.
     * @param {string[] | Uint8Array[]} fields - The fields to look up.
     * @returns {Promise<CacheDictionaryGetFields.Response>} -
     * {@link CacheDictionaryGetFields.Hit} containing the dictionary elements if
     * the dictionary exists.
     * {@link CacheDictionaryGetFields.Miss} if the dictionary does not exist.
     * {@link CacheDictionaryGetFields.Error} on failure.
     */ async dictionaryGetFields(cacheName, dictionaryName, fields) {
        const client = this.getNextDataClient();
        return await client.dictionaryGetFields(cacheName, dictionaryName, fields);
    }
    /**
     * Removes an element from the given dictionary.
     *
     * @remarks
     * Performs a no-op if the dictionary or field does not exist.
     *
     * @param {string} cacheName - The cache containing the dictionary.
     * @param {string} dictionaryName - The dictionary to remove from.
     * @param {string | Uint8Array} field - The field to remove.
     * @returns {Promise<CacheDictionaryRemoveField.Response>} -
     * {@link CacheDictionaryRemoveField.Success} on success.
     * {@link CacheDictionaryRemoveField.Error} on failure.
     */ async dictionaryRemoveField(cacheName, dictionaryName, field) {
        const client = this.getNextDataClient();
        return await client.dictionaryRemoveField(cacheName, dictionaryName, field);
    }
    /**
     * Removes multiple fields from the given dictionary.
     *
     * @remarks
     * Performs a no-op if the dictionary or fields do not exist.
     *
     * @param {string} cacheName - The cache containing the dictionary.
     * @param {string} dictionaryName - The dictionary to remove from.
     * @param {string[] | Uint8Array[]} fields - The fields to remove.
     * @returns {Promise<CacheDictionaryRemoveFields.Response>} -
     * {@link CacheDictionaryRemoveFields.Success} on success.
     * {@link CacheDictionaryRemoveFields.Error} on failure.
     */ async dictionaryRemoveFields(cacheName, dictionaryName, fields) {
        const client = this.getNextDataClient();
        return await client.dictionaryRemoveFields(cacheName, dictionaryName, fields);
    }
    /**
     * Adds an integer quantity to a dictionary value.
     *
     * @remarks
     * Incrementing the value of a missing field sets the value to amount.
     *
     * @param {string} cacheName - The cache containing the dictionary.
     * @param {string} dictionaryName - The dictionary to set.
     * @param {string | Uint8Array} field - The field to increment.
     * @param {number} amount - The quantity to add to the value. May be positive,
     * negative, or zero. Defaults to 1.
     * @param {DictionaryIncrementOptions} options
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the dictionary's TTL using the client's default if this is not
     * supplied.
     * @returns {Promise<CacheDictionaryIncrement.Response>} -
     * {@link CacheDictionaryIncrement.Success} containing the incremented value
     * on success.
     * {@link CacheDictionaryIncrement.Error} on failure. Incrementing a value
     * that was not set using this method or is not the string representation of
     * an integer results in a failure with a FailedPreconditionException error.
     */ async dictionaryIncrement(cacheName, dictionaryName, field, amount = 1, options) {
        const client = this.getNextDataClient();
        return await client.dictionaryIncrement(cacheName, dictionaryName, field, amount, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Gets the number of elements in the given dictionary.
     *
     * @param {string} cacheName - The cache containing the dictionary.
     * @param {string} dictionaryName - The dictionary to get the length of.
     * @returns {Promise<CacheDictionaryLength.Response>} -
     * {@link CacheDictionaryLength.Hit} containing the length if the dictionary exists.
     * {@link CacheDictionaryLength.Miss} if the dictionary does not exist.
     * {@link CacheDictionaryLength.Error} on failure.
     */ async dictionaryLength(cacheName, dictionaryName) {
        const client = this.getNextDataClient();
        return await client.dictionaryLength(cacheName, dictionaryName);
    }
    /**
     * Adds an element to the given sorted set. If the element already exists, its
     * score is updated. Creates the sorted set if it does not exist.
     *
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set to add to.
     * @param {string | Uint8Array} value - The value to add.
     * @param {number} score - The score to assign to the value.
     * @param {SortedSetPutElementOptions} options
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the sorted set's TTL using the client's default if this is not
     * supplied.
     * @returns {Promise<CacheSortedSetPutElement.Response>} -
     * {@link CacheSortedSetPutElement.Success} on success.
     * {@link CacheSortedSetPutElement.Error} on failure.
     * @returns
     */ async sortedSetPutElement(cacheName, sortedSetName, value, score, options) {
        const client = this.getNextDataClient();
        return await client.sortedSetPutElement(cacheName, sortedSetName, value, score, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Adds elements to the given sorted set. For any values that already exist, it
     * the score is updated. Creates the sorted set if it does not exist.
     *
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set to add to.
     * @param {Map<string | Uint8Array, number>| Record<string, number>} elements - The value->score pairs to add to the sorted set.
     * @param {SortedSetPutElementOptions} options
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the sorted set's TTL using the client's default if this is not
     * supplied.
     * @returns {Promise<CacheSortedSetPutElements.Response>} -
     * {@link CacheSortedSetPutElements.Success} on success.
     * {@link CacheSortedSetPutElements.Error} on failure.
     * @returns
     */ async sortedSetPutElements(cacheName, sortedSetName, elements, options) {
        const client = this.getNextDataClient();
        return await client.sortedSetPutElements(cacheName, sortedSetName, elements, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Fetch the elements in the given sorted set by index (rank).
     *
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set to fetch from.
     * @param {SortedSetFetchByRankOptions} options
     * @param {number} [options.startRank] - The rank of the first element to
     * fetch. Defaults to 0. This rank is inclusive, ie the element at this rank
     * will be fetched.
     * @param {number} [options.endRank] - The rank of the last element to fetch.
     * This rank is exclusive, ie the element at this rank will not be fetched.
     * Defaults to null, which fetches up until and including the last element.
     * @param {SortedSetOrder} [options.order] - The order to fetch the elements in.
     * Defaults to ascending.
     * @returns {Promise<CacheSortedSetFetch.Response>}
     * {@link CacheSortedSetFetch.Hit} containing the requested elements when found.
     * {@link CacheSortedSetFetch.Miss} when the sorted set does not exist.
     * {@link CacheSortedSetFetch.Error} on failure.
     */ async sortedSetFetchByRank(cacheName, sortedSetName, options) {
        var _a, _b;
        const client = this.getNextDataClient();
        return await client.sortedSetFetchByRank(cacheName, sortedSetName, (_a = options === null || options === void 0 ? void 0 : options.order) !== null && _a !== void 0 ? _a : index_1.SortedSetOrder.Ascending, (_b = options === null || options === void 0 ? void 0 : options.startRank) !== null && _b !== void 0 ? _b : 0, options === null || options === void 0 ? void 0 : options.endRank);
    }
    /**
     * Fetch the elements in the given sorted set by score.
     *
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set to fetch from.
     * @param {SortedSetFetchByScoreOptions} options
     * @param {number} [options.minScore] - The minimum score (inclusive) of the
     * elements to fetch. Defaults to negative infinity.
     * @param {number} [options.maxScore] - The maximum score (inclusive) of the
     * elements to fetch. Defaults to positive infinity.
     * @param {SortedSetOrder} [options.order] - The order to fetch the elements in.
     * Defaults to ascending.
     * @param {number} [options.offset] - The number of elements to skip before
     * returning the first element. Defaults to 0. Note: this is not the rank of
     * the first element to return, but the number of elements of the result set
     * to skip before returning the first element.
     * @param {number} [options.count] - The maximum number of elements to return.
     * Defaults to undefined, which returns all elements.
     * @returns {Promise<CacheSortedSetFetch.Response>} -
     * {@link CacheSortedSetFetch.Hit} containing the requested elements when found.
     * {@link CacheSortedSetFetch.Miss} when the sorted set does not exist.
     * {@link CacheSortedSetFetch.Error} on failure.
     */ async sortedSetFetchByScore(cacheName, sortedSetName, options) {
        var _a;
        const client = this.getNextDataClient();
        return await client.sortedSetFetchByScore(cacheName, sortedSetName, (_a = options === null || options === void 0 ? void 0 : options.order) !== null && _a !== void 0 ? _a : index_1.SortedSetOrder.Ascending, options === null || options === void 0 ? void 0 : options.minScore, options === null || options === void 0 ? void 0 : options.maxScore, options === null || options === void 0 ? void 0 : options.offset, options === null || options === void 0 ? void 0 : options.count);
    }
    /**
     * Look up the rank of an element in the sorted set, by the value of the element.
     *
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set to fetch from.
     * @param {string | Uint8Array} value - The value of the element whose rank we are retrieving.
     * @param {SortedSetGetRankOptions} options
     * @param {SortedSetOrder} [options.order] - The order in which sorted set will be sorted to determine the rank.
     * Defaults to ascending.
     * @returns {Promise<CacheSortedSetGetRank.Response>}
     * {@link CacheSortedSetGetRank.Hit} containing the rank of the requested elements when found.
     * {@link CacheSortedSetGetRank.Miss} when the element does not exist.
     * {@link CacheSortedSetGetRank.Error} on failure.
     */ async sortedSetGetRank(cacheName, sortedSetName, value, options) {
        const client = this.getNextDataClient();
        return await client.sortedSetGetRank(cacheName, sortedSetName, value, options === null || options === void 0 ? void 0 : options.order);
    }
    /**
     * Look up the score of an element in the sorted set, by the value of the element.
     *
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set to fetch from.
     * @param {string | Uint8Array} value - The value of the element whose score we are retrieving.
     * @returns {Promise<CacheSortedSetGetScore.Response>}
     * {@link CacheSortedSetGetScore.Hit} containing the score of the requested element when found.
     * {@link CacheSortedSetGetScore.Miss} when the element or collection does not exist.
     * {@link CacheSortedSetGetScore.Error} on failure.
     */ async sortedSetGetScore(cacheName, sortedSetName, value) {
        const client = this.getNextDataClient();
        return await client.sortedSetGetScore(cacheName, sortedSetName, value);
    }
    /**
     * Look up the scores of multiple elements in the sorted set, by the value of the elements.
     *
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set to fetch from.
     * @param {string[] | Uint8Array[]} values - The values of the elements whose scores we are retrieving.
     * @returns {Promise<CacheSortedSetGetScores.Response>}
     * {@link CacheSortedSetGetScores.Hit} containing the scores of the requested elements when found.
     * {@link CacheSortedSetGetScores.Miss} when the element or collection does not exist.
     * {@link CacheSortedSetGetScores.Error} on failure.
     */ async sortedSetGetScores(cacheName, sortedSetName, values) {
        const client = this.getNextDataClient();
        return await client.sortedSetGetScores(cacheName, sortedSetName, values);
    }
    /**
     * Increment the score of an element in the sorted set.
     *
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set to fetch from.
     * @param {string | Uint8Array} value - The value of the element whose score we are incrementing.
     * @param {number} amount - The quantity to add to the score. May be positive,
     * negative, or zero. Defaults to 1.
     * @param {SortedSetIncrementOptions} options
     * @param {CollectionTtl} [options.ttl] - How the TTL should be managed.
     * Refreshes the sorted set's TTL using the client's default if this is not
     * supplied.
     * @returns {Promise<CacheSortedSetIncrementScore.Response>} -
     * {@link CacheSortedSetIncrementScore.Success} containing the incremented score
     * on success.
     * {@link CacheSortedSetIncrementScore.Error} on failure. Incrementing a score
     * that was not set using this method or is not the string representation of
     * an integer results in a failure with a FailedPreconditionException error.
     */ async sortedSetIncrementScore(cacheName, sortedSetName, value, amount, options) {
        const client = this.getNextDataClient();
        return await client.sortedSetIncrementScore(cacheName, sortedSetName, value, amount || 1, options === null || options === void 0 ? void 0 : options.ttl);
    }
    /**
     * Remove an element from the sorted set
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set to remove from.
     * @param {string | Uint8Array} value - The value of the element to remove from the set.
     * @returns {Promise<CacheSortedSetRemoveElement.Response>}
     * {@link CacheSortedSetRemoveElement.Success} if the element was successfully removed
     * {@link CacheSortedSetIncrementScore.Error} on failure
     */ async sortedSetRemoveElement(cacheName, sortedSetName, value) {
        const client = this.getNextDataClient();
        return await client.sortedSetRemoveElement(cacheName, sortedSetName, value);
    }
    /**
     * Remove multiple elements from the sorted set
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set to remove from.
     * @param {string | Uint8Array} values - The values of the elements to remove from the set.
     * @returns {Promise<CacheSortedSetRemoveElement.Response>}
     * {@link CacheSortedSetRemoveElement.Success} if the elements were successfully removed
     * {@link CacheSortedSetIncrementScore.Error} on failure
     */ async sortedSetRemoveElements(cacheName, sortedSetName, values) {
        const client = this.getNextDataClient();
        return await client.sortedSetRemoveElements(cacheName, sortedSetName, values);
    }
    /**
     * Fetch length (number of items) of sorted set
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set name.
     * @returns {Promise<CacheSortedSetLength.Response>}
     * {@link CacheSortedSetLength.Hit} containing the length if the sorted set exists.
     * {@link CacheSortedSetLength.Miss} if the sorted set does not exist.
     * {@link CacheSortedSetLength.Error} on failure.
     */ async sortedSetLength(cacheName, sortedSetName) {
        const client = this.getNextDataClient();
        return await client.sortedSetLength(cacheName, sortedSetName);
    }
    /**
     * Fetch length (number of items) of sorted set within the provided score range
     * @param {string} cacheName - The cache containing the sorted set.
     * @param {string} sortedSetName - The sorted set name.
     * @param {SortedSetLengthByScoreOptions} options - Optional parameter for specifying the score range to search in.
     * @param {number} [options.minScore] - The lower bound on the score range to search in.
     * @param {number} [options.maxScore] - The upper bound on the score range to search in.
     * @returns {Promise<CacheSortedSetLengthByScore.Response>}
     * {@link CacheSortedSetLengthByScore.Hit} containing the length if the sorted set exists.
     * {@link CacheSortedSetLengthByScore.Miss} if the sorted set does not exist.
     * {@link CacheSortedSetLengthByScore.Error} on failure.
     */ async sortedSetLengthByScore(cacheName, sortedSetName, options) {
        const client = this.getNextDataClient();
        return await client.sortedSetLengthByScore(cacheName, sortedSetName, options === null || options === void 0 ? void 0 : options.minScore, options === null || options === void 0 ? void 0 : options.maxScore);
    }
    /**
     * Return the type of the key in the cache
     * @param {string} cacheName - The cache containing the key.
     * @param {string} key - The key for which type is requested.
     * @returns {Promise<CacheItemGetType.Response>}
     * {@link CacheItemGetType.Hit} containing type of key when found.
     * {@link CacheItemGetType.Miss} when the key does not exist.
     * {@link CacheItemGetType.Error} on failure.
     */ async itemGetType(cacheName, key) {
        const client = this.getNextDataClient();
        return await client.itemGetType(cacheName, key);
    }
    /**
     * Return the remaining ttl of the key in the cache in milliseconds.
     * @param {string} cacheName - The cache containing the key.
     * @param {string} key - The key for which the ttl remaining is requested.
     * @returns {Promise<CacheItemGetTtl.Response>}
     * {@link CacheItemGetTtl.Hit} containing ttl remaining of key when found.
     * {@link CacheItemGetTtl.Miss} when the key does not exist.
     * {@link CacheItemGetTtl.Error} on failure.
     */ async itemGetTtl(cacheName, key) {
        const client = this.getNextDataClient();
        return await client.itemGetTtl(cacheName, key);
    }
    /**
     * Check if the provided key exists in the cache
     * @param {string} cacheName - The cache to look in.
     * @param {string | Uint8Array} key - The key to look up.
     * @returns {Promise<CacheKeyExists.Response>}
     * {@link CacheKeyExists.Success} returns boolean indicating whether the key was found.
     * {@link CacheKeyExists.Error} on failure.
     */ async keyExists(cacheName, key) {
        const client = this.getNextDataClient();
        return await client.keyExists(cacheName, key);
    }
    /**
     * Check if the provided keys exist in the cache
     * @param {string} cacheName - The cache to look in.
     * @param {string[] | Uint8Array[]} keys - The keys to look up.
     * @returns {Promise<CacheKeysExist.Response>}
     * {@link CacheKeysExist.Success} returns list of booleans indicating whether each key was found.
     * {@link CacheKeysExist.Error} on failure.
     */ async keysExist(cacheName, keys) {
        const client = this.getNextDataClient();
        return await client.keysExist(cacheName, keys);
    }
    /**
     * Update the ttl of the key in the cache in milliseconds.
     * @param {string} cacheName - The cache containing the key.
     * @param {string} key - The key for which the ttl remaining is requested.
     * @param {number} ttlMilliseconds - The ttl in milliseconds that should overwrite the current ttl.
     * @returns {Promise<CacheUpdateTtl.Response>}
     * {@link CacheUpdateTtl.Set} when the ttl was successfully overwritten.
     * {@link CacheUpdateTtl.Miss} when the key does not exist.
     * {@link CacheUpdateTtl.Error} on failure.
     */ async updateTtl(cacheName, key, ttlMilliseconds) {
        const client = this.getNextDataClient();
        return await client.updateTtl(cacheName, key, ttlMilliseconds);
    }
    /**
     * Increase the ttl of the key in the cache in milliseconds.
     * @param {string} cacheName - The cache containing the key.
     * @param {string} key - The key for which the ttl remaining is requested.
     * @param {number} ttlMilliseconds - The ttl in milliseconds that should
     * overwrite the current ttl. Should be greater than the current ttl.
     * @returns {Promise<CacheIncreaseTtl.Response>}
     * {@link CacheIncreaseTtl.Set} when the ttl was successfully increased.
     * {@link CacheIncreaseTtl.Miss} when the key does not exist.
     * {@link CacheIncreaseTtl.Error} on failure.
     */ async increaseTtl(cacheName, key, ttlMilliseconds) {
        const client = this.getNextDataClient();
        return await client.increaseTtl(cacheName, key, ttlMilliseconds);
    }
    /**
     * Decrease the ttl of the key in the cache in milliseconds.
     * @param {string} cacheName - The cache containing the key.
     * @param {string} key - The key for which the ttl remaining is requested.
     * @param {number} ttlMilliseconds - The ttl in milliseconds that should
     * overwrite the current ttl. Should be less than the current ttl.
     * @returns {Promise<CacheDecreaseTtl.Response>}
     * {@link CacheDecreaseTtl.Set} when the ttl was successfully decreased.
     * {@link CacheDecreaseTtl.Miss} when the key does not exist.
     * {@link CacheDecreaseTtl.Error} on failure.
     */ async decreaseTtl(cacheName, key, ttlMilliseconds) {
        const client = this.getNextDataClient();
        return await client.decreaseTtl(cacheName, key, ttlMilliseconds);
    }
    getNextDataClient() {
        const client = this.dataClients[this.nextDataClientIndex];
        this.nextDataClientIndex = (this.nextDataClientIndex + 1) % this.dataClients.length;
        return client;
    }
}
exports.AbstractCacheClient = AbstractCacheClient; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/pubsub/AbstractTopicClient.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AbstractTopicClient = void 0;
const index_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/index.js [app-route] (ecmascript)");
class AbstractTopicClient {
    constructor(logger, pubsubClients, webhookClient){
        this.nextPubsubClientIndex = 0;
        this.logger = logger;
        this.pubsubClients = pubsubClients;
        this.webhookClient = webhookClient;
    }
    /**
     * Publishes a value to a topic.
     *
     * @param {string} cacheName - The name of the cache to containing the topic to publish to.
     * @param {string} topicName - The name of the topic to publish to.
     * @param {string | Uint8Array} value - The value to publish.
     * @returns {Promise<TopicPublish.Response>} -
     * {@link TopicPublish.Success} on success.
     * {@link TopicPublish.Error} on failure.
     */ async publish(cacheName, topicName, value) {
        return await this.getNextPubsubClient().publish(cacheName, topicName, value);
    }
    /**
     * Subscribes to a topic.
     *
     * @param {string} cacheName - The name of the cache to containing the topic to subscribe to.
     * @param {string} topicName - The name of the topic to subscribe to.
     * @param {SubscribeCallOptions} options - The options for the subscription. Defaults to no-op handlers.
     * @param {function} options.onItem - The callback to invoke when data is received. Defaults to no-op.
     * @param {function} options.onError - The callback to invoke when an error is received. Defaults to no-op.
     * @returns {Promise<TopicSubscribe.Response>} -
     * {@link TopicSubscribe.Subscription} on success.
     * {@link TopicSubscribe.Error} on failure.
     */ async subscribe(cacheName, topicName, options) {
        return await this.getNextPubsubClient().subscribe(cacheName, topicName, options);
    }
    /**
     * Deletes a webhook
     *
     * @param {string} cacheName - The name of the cache associated with the webhook
     * @param {string} webhookName - The name of the webhook
     * @returns {Promise<DeleteWebhook.Response>} -
     * {@link DeleteWebhook.Success} on success.
     * {@link DeleteWebhook.Error} on failure.
     */ async deleteWebhook(cacheName, webhookName) {
        return await this.webhookClient.deleteWebhook({
            cacheName,
            webhookName
        });
    }
    /**
     * Lists webhooks associated with a cache
     *
     * @param {string} cacheName - The cache to list webhooks associated with it
     * @returns {Promise<ListWebhooks.Response>} -
     * {@link ListWebhooks.Success} on success.
     * {@link ListWebhooks.Error} on failure.
     */ async listWebhooks(cacheName) {
        return await this.webhookClient.listWebhooks(cacheName);
    }
    /**
     * Creates a new webhook, or updates an existing one
     *
     * @param {string} cacheName - The name of the cache to associate the webhook with
     * @param {string} webhookName - The name of the webhook
     * @param {PutWebhookCallOptions} options - The options for the webhook
     * @param {string} topicName - The name of the topic for the webhook to listen to
     * @param {WebhookDestination | string} webhookDestination - The url to associate the webhook with
     * @returns {Promise<PutWebhook.Response>} -
     * {@link PutWebhook.Success} on success.
     * {@link PutWebhook.Error} on failure.
     */ async putWebhook(cacheName, webhookName, options) {
        let _dest = options.destination;
        if (typeof _dest === 'string') {
            _dest = new index_1.PostUrlWebhookDestination(_dest);
        }
        return await this.webhookClient.putWebhook({
            topicName: options.topicName,
            id: {
                cacheName,
                webhookName
            },
            destination: _dest
        });
    }
    /**
     * Gets the signing secret for a webhook
     *
     * @param {string} cacheName - The name of the cache associated with the webhook
     * @param {string} webhookName - The name of the webhook
     * @returns {Promise<GetWebhookSecret.Response>} -
     * {@link GetWebhookSecret.Success} on success.
     * {@link GetWebhookSecret.Error} on failure.
     */ async getWebhookSecret(cacheName, webhookName) {
        return await this.webhookClient.getWebhookSecret({
            cacheName,
            webhookName
        });
    }
    /**
     * Rotates the signing secret for a webhook
     *
     * @param {string} cacheName - The name of the cache associated with the webhook
     * @param {string} webhookName - The name of the webhook
     * @returns {Promise<RotateWebhookSecret.Response>} -
     * {@link RotateWebhookSecret.Success} on success.
     * {@link RotateWebhookSecret.Error} on failure.
     */ async rotateWebhookSecret(cacheName, webhookName) {
        return await this.webhookClient.rotateWebhookSecret({
            cacheName,
            webhookName
        });
    }
    getNextPubsubClient() {
        const client = this.pubsubClients[this.nextPubsubClientIndex];
        this.nextPubsubClientIndex = (this.nextPubsubClientIndex + 1) % this.pubsubClients.length;
        return client;
    }
}
exports.AbstractTopicClient = AbstractTopicClient; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/subscription-state.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SubscriptionState = void 0;
/**
 * Encapsulates a topic subscription stream state.
 */ class SubscriptionState {
    constructor(){
        this._unsubscribeFn = ()=>{
            return;
        };
        this._isSubscribed = false;
    }
    get resumeAtTopicSequenceNumber() {
        var _a;
        return ((_a = this.lastTopicSequenceNumber) !== null && _a !== void 0 ? _a : -1) + 1;
    }
    setSubscribed() {
        this._isSubscribed = true;
    }
    setUnsubscribed() {
        this._isSubscribed = false;
    }
    get isSubscribed() {
        return this._isSubscribed;
    }
    set unsubscribeFn(unsubscribeFn) {
        this._unsubscribeFn = unsubscribeFn;
    }
    unsubscribe() {
        if (this.isSubscribed) {
            this._unsubscribeFn();
            this.setUnsubscribed();
        }
    }
    toString() {
        return JSON.stringify({
            lastTopicSequenceNumber: this.lastTopicSequenceNumber,
            isSubscribed: this._isSubscribed
        }, null, 2);
    }
}
exports.SubscriptionState = SubscriptionState; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vic2NyaXB0aW9uLXN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ludGVybmFsL3N1YnNjcmlwdGlvbi1zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILE1BQWEsaUJBQWlCO0lBSTVCO1FBQ0UsSUFBSSxDQUFDLGNBQWMsR0FBRyxHQUFHLEVBQUU7WUFDekIsT0FBTztRQUNULENBQUMsQ0FBQztRQUNGLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFXLDJCQUEyQjs7UUFDcEMsT0FBTyxDQUFDLE1BQUEsSUFBSSxDQUFDLHVCQUF1QixtQ0FBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU0sYUFBYTtRQUNsQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUM1QixDQUFDO0lBRU0sZUFBZTtRQUNwQixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBVyxhQUFhLENBQUMsYUFBeUI7UUFDaEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7SUFDdEMsQ0FBQztJQUVNLFdBQVc7UUFDaEIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN0QixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRU0sUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FDbkI7WUFDRSx1QkFBdUIsRUFBRSxJQUFJLENBQUMsdUJBQXVCO1lBQ3JELFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYTtTQUNqQyxFQUNELElBQUksRUFDSixDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQWhERCw4Q0FnREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVuY2Fwc3VsYXRlcyBhIHRvcGljIHN1YnNjcmlwdGlvbiBzdHJlYW0gc3RhdGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWJzY3JpcHRpb25TdGF0ZSB7XG4gIHByaXZhdGUgX3Vuc3Vic2NyaWJlRm46ICgpID0+IHZvaWQ7XG4gIHB1YmxpYyBsYXN0VG9waWNTZXF1ZW5jZU51bWJlcj86IG51bWJlcjtcbiAgcHJpdmF0ZSBfaXNTdWJzY3JpYmVkOiBib29sZWFuO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl91bnN1YnNjcmliZUZuID0gKCkgPT4ge1xuICAgICAgcmV0dXJuO1xuICAgIH07XG4gICAgdGhpcy5faXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHJlc3VtZUF0VG9waWNTZXF1ZW5jZU51bWJlcigpOiBudW1iZXIge1xuICAgIHJldHVybiAodGhpcy5sYXN0VG9waWNTZXF1ZW5jZU51bWJlciA/PyAtMSkgKyAxO1xuICB9XG5cbiAgcHVibGljIHNldFN1YnNjcmliZWQoKTogdm9pZCB7XG4gICAgdGhpcy5faXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRVbnN1YnNjcmliZWQoKTogdm9pZCB7XG4gICAgdGhpcy5faXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGlzU3Vic2NyaWJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNTdWJzY3JpYmVkO1xuICB9XG5cbiAgcHVibGljIHNldCB1bnN1YnNjcmliZUZuKHVuc3Vic2NyaWJlRm46ICgpID0+IHZvaWQpIHtcbiAgICB0aGlzLl91bnN1YnNjcmliZUZuID0gdW5zdWJzY3JpYmVGbjtcbiAgfVxuXG4gIHB1YmxpYyB1bnN1YnNjcmliZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1N1YnNjcmliZWQpIHtcbiAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlRm4oKTtcbiAgICAgIHRoaXMuc2V0VW5zdWJzY3JpYmVkKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KFxuICAgICAge1xuICAgICAgICBsYXN0VG9waWNTZXF1ZW5jZU51bWJlcjogdGhpcy5sYXN0VG9waWNTZXF1ZW5jZU51bWJlcixcbiAgICAgICAgaXNTdWJzY3JpYmVkOiB0aGlzLl9pc1N1YnNjcmliZWQsXG4gICAgICB9LFxuICAgICAgbnVsbCxcbiAgICAgIDJcbiAgICApO1xuICB9XG59XG4iXX0=

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/pubsub/AbstractPubsubClient.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AbstractPubsubClient = void 0;
const utils_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/utils/index.js [app-route] (ecmascript)");
const errors_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/errors/index.js [app-route] (ecmascript)");
const index_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/index.js [app-route] (ecmascript)");
const subscription_state_1 = __turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/subscription-state.js [app-route] (ecmascript)");
class AbstractPubsubClient {
    constructor(loggerFactory, logger, cacheServiceErrorMapper){
        this.loggerFactory = loggerFactory;
        this.logger = logger;
        this.cacheServiceErrorMapper = cacheServiceErrorMapper;
    }
    getLogger() {
        return this.logger;
    }
    getCacheServiceErrorMapper() {
        return this.cacheServiceErrorMapper;
    }
    async publish(cacheName, topicName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateTopicName)(topicName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new index_1.TopicPublish.Error(err));
        // )  new TopicPublish.Error(normalizeSdkError(err as Error));
        }
        this.logger.trace('Issuing publish request; topic: %s, message length: %s', (0, utils_1.truncateString)(topicName), value.length);
        return await this.sendPublish(cacheName, topicName, value);
    }
    async subscribe(cacheName, topicName, options) {
        var _a, _b, _c, _d;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateTopicName)(topicName);
        } catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, (err)=>new index_1.TopicSubscribe.Error(err));
        }
        this.logger.trace('Issuing subscribe request; topic: %s', (0, utils_1.truncateString)(topicName));
        const onItem = (_a = options.onItem) !== null && _a !== void 0 ? _a : ()=>{
            return;
        };
        const onError = (_b = options.onError) !== null && _b !== void 0 ? _b : ()=>{
            return;
        };
        const onDiscontinuity = (_c = options.onDiscontinuity) !== null && _c !== void 0 ? _c : ()=>{
            return;
        };
        const onHeartbeat = (_d = options.onHeartbeat) !== null && _d !== void 0 ? _d : ()=>{
            return;
        };
        const subscriptionState = new subscription_state_1.SubscriptionState();
        const subscription = new index_1.TopicSubscribe.Subscription(this.loggerFactory, subscriptionState);
        return await this.sendSubscribe({
            cacheName: cacheName,
            topicName: topicName,
            onItem: onItem,
            onError: onError,
            onDiscontinuity: onDiscontinuity,
            onHeartbeat: onHeartbeat,
            subscriptionState: subscriptionState,
            subscription: subscription,
            restartedDueToError: false,
            firstMessage: true
        });
    }
    prepareEndCallback(options) {
        return ()=>{
            // We want to restart on stream end, except if:
            // 1. The stream was cancelled by the caller.
            // 2. The stream was restarted following an error.
            if (options.restartedDueToError) {
                this.logger.trace('Stream ended after error but was restarted on topic: %s', options.topicName);
                return;
            } else if (!options.subscriptionState.isSubscribed) {
                this.logger.trace('Stream ended after unsubscribe on topic: %s', options.topicName);
                return;
            }
            this.logger.trace('Stream ended on topic: %s; restarting.', options.topicName);
            // When restarting the stream we do not do anything with the promises,
            // because we should have already returned the subscription object to the user.
            this.sendSubscribe(options).then(()=>{
                return;
            }).catch(()=>{
                return;
            });
        };
    }
    handleSubscribeError(options, momentoError, shouldReconnectSubscription) {
        this.logger.trace('Handling subscribe error');
        // When the first message is an error, an irrecoverable error has happened,
        // eg the cache does not exist. The user should not receive a subscription
        // object but an error.
        if (options.firstMessage) {
            this.logger.trace('First message on subscription was an error; topic: %s, error: %s', (0, utils_1.truncateString)(options.topicName), momentoError.toString());
            options.resolve(momentoError);
            options.subscription.unsubscribe();
            return;
        }
        this.logger.trace('Subscribe error was not the first message on the stream.');
        // Another special case is when the cache is not found.
        // This happens here if the user deletes the cache in the middle of
        // a subscription.
        if (momentoError.errorCode() === errors_1.MomentoErrorCode.CACHE_NOT_FOUND_ERROR) {
            this.logger.trace('Stream ended due to cache not found error on topic: %s', options.topicName);
            options.subscription.unsubscribe();
            options.onError(momentoError, options.subscription);
            return;
        }
        this.logger.trace('Checking to see if we should attempt to reconnect subscription.');
        // For several types of errors having to with network interruptions, we wish to
        // transparently restart the stream instead of propagating an error.
        if (shouldReconnectSubscription) {
            options.restartedDueToError = true;
            const reconnectDelayMillis = 500;
            this.logger.trace('Error occurred on subscription, possibly a network interruption. Will attempt to restart stream in %s ms.', reconnectDelayMillis);
            (0, utils_1.sleep)(reconnectDelayMillis).then(()=>{
                // When restarting the stream we do not do anything with the promises,
                // because we should have already returned the subscription object to the user.
                this.sendSubscribe(options).then(()=>{
                    return;
                }).catch((e)=>{
                    this.logger.trace('Error when calling sendSubscribe to reconnect: %s', e);
                    return;
                });
                return;
            }).catch((e)=>{
                this.logger.trace('Error when sleeping prior to sendSubscribe to reconnect: %s', e);
                return;
            });
            return;
        }
        this.logger.trace('Subscribe error was not a re-connectable error.');
        this.logger.trace('Subscribe error was not one of the known error types; calling error handler.');
        options.onError(momentoError, options.subscription);
    }
}
exports.AbstractPubsubClient = AbstractPubsubClient; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/IControlClient.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSUNvbnRyb2xDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvY2xpZW50cy9jYWNoZS9JQ29udHJvbENsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDYWNoZUZsdXNoLCBDcmVhdGVDYWNoZSwgRGVsZXRlQ2FjaGUsIExpc3RDYWNoZXN9IGZyb20gJy4uLy4uLy4uL2luZGV4JztcblxuZXhwb3J0IGludGVyZmFjZSBJQ29udHJvbENsaWVudCB7XG4gIGNyZWF0ZUNhY2hlKGNhY2hlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxDcmVhdGVDYWNoZS5SZXNwb25zZT47XG4gIGRlbGV0ZUNhY2hlKGNhY2hlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxEZWxldGVDYWNoZS5SZXNwb25zZT47XG4gIGxpc3RDYWNoZXMoKTogUHJvbWlzZTxMaXN0Q2FjaGVzLlJlc3BvbnNlPjtcbiAgZmx1c2hDYWNoZShjYWNoZU5hbWU6IHN0cmluZyk6IFByb21pc2U8Q2FjaGVGbHVzaC5SZXNwb25zZT47XG4gIGNsb3NlKCk6IHZvaWQ7XG59XG4iXX0=

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/IDataClient.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSURhdGFDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvY2xpZW50cy9jYWNoZS9JRGF0YUNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2FjaGVEZWxldGUsXG4gIENhY2hlR2V0LFxuICBDYWNoZUluY3JlbWVudCxcbiAgQ2FjaGVTZXQsXG4gIENhY2hlU2V0SWZOb3RFeGlzdHMsXG4gIENhY2hlU2V0RmV0Y2gsXG4gIENhY2hlU2V0QWRkRWxlbWVudHMsXG4gIENhY2hlU2V0Q29udGFpbnNFbGVtZW50LFxuICBDYWNoZVNldENvbnRhaW5zRWxlbWVudHMsXG4gIENhY2hlU2V0UmVtb3ZlRWxlbWVudHMsXG4gIENhY2hlTGlzdEZldGNoLFxuICBDYWNoZUxpc3RMZW5ndGgsXG4gIENhY2hlTGlzdFB1c2hGcm9udCxcbiAgQ2FjaGVMaXN0UHVzaEJhY2ssXG4gIENhY2hlTGlzdENvbmNhdGVuYXRlQmFjayxcbiAgQ2FjaGVMaXN0Q29uY2F0ZW5hdGVGcm9udCxcbiAgQ2FjaGVMaXN0UG9wQmFjayxcbiAgQ2FjaGVMaXN0UG9wRnJvbnQsXG4gIENhY2hlTGlzdFJlbW92ZVZhbHVlLFxuICBDYWNoZUxpc3RSZXRhaW4sXG4gIENhY2hlRGljdGlvbmFyeVNldEZpZWxkLFxuICBDYWNoZURpY3Rpb25hcnlTZXRGaWVsZHMsXG4gIENhY2hlRGljdGlvbmFyeUdldEZpZWxkLFxuICBDYWNoZURpY3Rpb25hcnlGZXRjaCxcbiAgQ2FjaGVEaWN0aW9uYXJ5SW5jcmVtZW50LFxuICBDYWNoZURpY3Rpb25hcnlSZW1vdmVGaWVsZCxcbiAgQ2FjaGVEaWN0aW9uYXJ5UmVtb3ZlRmllbGRzLFxuICBDYWNoZVNvcnRlZFNldEZldGNoLFxuICBDYWNoZVNvcnRlZFNldFB1dEVsZW1lbnQsXG4gIENhY2hlU29ydGVkU2V0UHV0RWxlbWVudHMsXG4gIENhY2hlU29ydGVkU2V0R2V0UmFuayxcbiAgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZSxcbiAgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZXMsXG4gIENhY2hlU29ydGVkU2V0SW5jcmVtZW50U2NvcmUsXG4gIENhY2hlU29ydGVkU2V0UmVtb3ZlRWxlbWVudCxcbiAgQ2FjaGVTb3J0ZWRTZXRMZW5ndGgsXG4gIENhY2hlU29ydGVkU2V0TGVuZ3RoQnlTY29yZSxcbiAgQ29sbGVjdGlvblR0bCxcbiAgU29ydGVkU2V0T3JkZXIsXG4gIENhY2hlSXRlbUdldFR5cGUsXG4gIENhY2hlSXRlbUdldFR0bCxcbiAgQ2FjaGVLZXlFeGlzdHMsXG4gIENhY2hlS2V5c0V4aXN0LFxuICBDYWNoZVVwZGF0ZVR0bCxcbiAgQ2FjaGVJbmNyZWFzZVR0bCxcbiAgQ2FjaGVEZWNyZWFzZVR0bCxcbiAgQ2FjaGVEaWN0aW9uYXJ5TGVuZ3RoLFxuICBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZHMsXG4gIENhY2hlU2V0QmF0Y2gsXG4gIENhY2hlR2V0QmF0Y2gsXG4gIENhY2hlU2V0SWZBYnNlbnQsXG4gIENhY2hlU2V0SWZQcmVzZW50LFxuICBDYWNoZVNldElmRXF1YWwsXG4gIENhY2hlU2V0SWZOb3RFcXVhbCxcbiAgQ2FjaGVTZXRJZlByZXNlbnRBbmROb3RFcXVhbCxcbiAgQ2FjaGVTZXRJZkFic2VudE9yRXF1YWwsXG4gIENhY2hlU2V0U2FtcGxlLFxuICBDYWNoZVNvcnRlZFNldFJlbW92ZUVsZW1lbnRzLFxuICBDYWNoZVNldFBvcCxcbiAgQ2FjaGVTZXRMZW5ndGgsXG59IGZyb20gJy4uLy4uLy4uL2luZGV4JztcbmltcG9ydCB7XG4gIEdldEJhdGNoQ2FsbE9wdGlvbnMsXG4gIEdldENhbGxPcHRpb25zLFxuICBTZXRCYXRjaENhbGxPcHRpb25zLFxuICBTZXRCYXRjaEl0ZW0sXG4gIFNldENhbGxPcHRpb25zLFxuICBTZXRJZkFic2VudENhbGxPcHRpb25zLFxufSBmcm9tICcuLi8uLi8uLi91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURhdGFDbGllbnQge1xuICBnZXQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIG9wdGlvbnM/OiBHZXRDYWxsT3B0aW9uc1xuICApOiBQcm9taXNlPENhY2hlR2V0LlJlc3BvbnNlPjtcbiAgc2V0KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICBvcHRpb25zPzogU2V0Q2FsbE9wdGlvbnNcbiAgKTogUHJvbWlzZTxDYWNoZVNldC5SZXNwb25zZT47XG4gIGRlbGV0ZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZURlbGV0ZS5SZXNwb25zZT47XG4gIGluY3JlbWVudChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBmaWVsZDogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICBhbW91bnQ6IG51bWJlcixcbiAgICB0dGw/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZUluY3JlbWVudC5SZXNwb25zZT47XG4gIHNldElmTm90RXhpc3RzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICBmaWVsZDogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB0dGw/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNldElmTm90RXhpc3RzLlJlc3BvbnNlPjtcbiAgc2V0SWZBYnNlbnQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIGZpZWxkOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIG9wdGlvbnM/OiBTZXRJZkFic2VudENhbGxPcHRpb25zXG4gICk6IFByb21pc2U8Q2FjaGVTZXRJZkFic2VudC5SZXNwb25zZT47XG4gIHNldElmUHJlc2VudChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgZmllbGQ6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdHRsPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVTZXRJZlByZXNlbnQuUmVzcG9uc2U+O1xuICBzZXRJZkVxdWFsKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICBmaWVsZDogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICBlcXVhbDogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB0dGw/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNldElmRXF1YWwuUmVzcG9uc2U+O1xuICBzZXRJZk5vdEVxdWFsKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICBmaWVsZDogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICBub3RFcXVhbDogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB0dGw/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNldElmTm90RXF1YWwuUmVzcG9uc2U+O1xuICBzZXRJZlByZXNlbnRBbmROb3RFcXVhbChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgZmllbGQ6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgbm90RXF1YWw6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdHRsPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVTZXRJZlByZXNlbnRBbmROb3RFcXVhbC5SZXNwb25zZT47XG4gIHNldElmQWJzZW50T3JFcXVhbChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgZmllbGQ6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgZXF1YWw6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdHRsPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVTZXRJZkFic2VudE9yRXF1YWwuUmVzcG9uc2U+O1xuICBnZXRCYXRjaChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXlzOiBBcnJheTxzdHJpbmcgfCBVaW50OEFycmF5PixcbiAgICBvcHRpb25zPzogR2V0QmF0Y2hDYWxsT3B0aW9uc1xuICApOiBQcm9taXNlPENhY2hlR2V0QmF0Y2guUmVzcG9uc2U+O1xuICBzZXRCYXRjaChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBpdGVtczpcbiAgICAgIHwgUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgVWludDhBcnJheT5cbiAgICAgIHwgTWFwPHN0cmluZyB8IFVpbnQ4QXJyYXksIHN0cmluZyB8IFVpbnQ4QXJyYXk+XG4gICAgICB8IEFycmF5PFNldEJhdGNoSXRlbT4sXG4gICAgb3B0aW9ucz86IFNldEJhdGNoQ2FsbE9wdGlvbnNcbiAgKTogUHJvbWlzZTxDYWNoZVNldEJhdGNoLlJlc3BvbnNlPjtcbiAgc2V0RmV0Y2goY2FjaGVOYW1lOiBzdHJpbmcsIHNldE5hbWU6IHN0cmluZyk6IFByb21pc2U8Q2FjaGVTZXRGZXRjaC5SZXNwb25zZT47XG4gIHNldEFkZEVsZW1lbnRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNldE5hbWU6IHN0cmluZyxcbiAgICBlbGVtZW50czogc3RyaW5nW10gfCBVaW50OEFycmF5W10sXG4gICAgdHRsPzogQ29sbGVjdGlvblR0bFxuICApOiBQcm9taXNlPENhY2hlU2V0QWRkRWxlbWVudHMuUmVzcG9uc2U+O1xuICBzZXRDb250YWluc0VsZW1lbnQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc2V0TmFtZTogc3RyaW5nLFxuICAgIGVsZW1lbnQ6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZVNldENvbnRhaW5zRWxlbWVudC5SZXNwb25zZT47XG4gIHNldENvbnRhaW5zRWxlbWVudHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc2V0TmFtZTogc3RyaW5nLFxuICAgIGVsZW1lbnRzOiBzdHJpbmdbXSB8IFVpbnQ4QXJyYXlbXVxuICApOiBQcm9taXNlPENhY2hlU2V0Q29udGFpbnNFbGVtZW50cy5SZXNwb25zZT47XG4gIHNldFJlbW92ZUVsZW1lbnRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNldE5hbWU6IHN0cmluZyxcbiAgICBlbGVtZW50czogc3RyaW5nW10gfCBVaW50OEFycmF5W11cbiAgKTogUHJvbWlzZTxDYWNoZVNldFJlbW92ZUVsZW1lbnRzLlJlc3BvbnNlPjtcbiAgc2V0U2FtcGxlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNldE5hbWU6IHN0cmluZyxcbiAgICBsaW1pdDogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVTZXRTYW1wbGUuUmVzcG9uc2U+O1xuICBzZXRQb3AoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc2V0TmFtZTogc3RyaW5nLFxuICAgIGNvdW50OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNldFBvcC5SZXNwb25zZT47XG4gIHNldExlbmd0aChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzZXROYW1lOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxDYWNoZVNldExlbmd0aC5SZXNwb25zZT47XG4gIGxpc3RGZXRjaChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogc3RyaW5nLFxuICAgIHN0YXJ0SW5kZXg/OiBudW1iZXIsXG4gICAgZW5kSW5kZXg/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RGZXRjaC5SZXNwb25zZT47XG4gIGxpc3RMZW5ndGgoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IHN0cmluZ1xuICApOiBQcm9taXNlPENhY2hlTGlzdExlbmd0aC5SZXNwb25zZT47XG4gIGxpc3RQdXNoRnJvbnQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB0cnVuY2F0ZUJhY2tUb1NpemU/OiBudW1iZXIsXG4gICAgdHRsPzogQ29sbGVjdGlvblR0bFxuICApOiBQcm9taXNlPENhY2hlTGlzdFB1c2hGcm9udC5SZXNwb25zZT47XG4gIGxpc3RQdXNoQmFjayhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIHRydW5jYXRlRnJvbnRUb1NpemU/OiBudW1iZXIsXG4gICAgdHRsPzogQ29sbGVjdGlvblR0bFxuICApOiBQcm9taXNlPENhY2hlTGlzdFB1c2hCYWNrLlJlc3BvbnNlPjtcbiAgbGlzdENvbmNhdGVuYXRlQmFjayhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlczogc3RyaW5nW10gfCBVaW50OEFycmF5W10sXG4gICAgdHJ1bmNhdGVGcm9udFRvU2l6ZT86IG51bWJlcixcbiAgICB0dGw/OiBDb2xsZWN0aW9uVHRsXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0Q29uY2F0ZW5hdGVCYWNrLlJlc3BvbnNlPjtcbiAgbGlzdENvbmNhdGVuYXRlRnJvbnQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZXM6IHN0cmluZ1tdIHwgVWludDhBcnJheVtdLFxuICAgIHRydW5jYXRlQmFja1RvU2l6ZT86IG51bWJlcixcbiAgICB0dGw/OiBDb2xsZWN0aW9uVHRsXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0Q29uY2F0ZW5hdGVGcm9udC5SZXNwb25zZT47XG4gIGxpc3RQb3BCYWNrKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RQb3BCYWNrLlJlc3BvbnNlPjtcbiAgbGlzdFBvcEZyb250KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RQb3BGcm9udC5SZXNwb25zZT47XG4gIGxpc3RSZW1vdmVWYWx1ZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVMaXN0UmVtb3ZlVmFsdWUuUmVzcG9uc2U+O1xuICBsaXN0UmV0YWluKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBzdHJpbmcsXG4gICAgc3RhcnRJbmRleD86IG51bWJlcixcbiAgICBlbmRJbmRleD86IG51bWJlcixcbiAgICB0dGw/OiBDb2xsZWN0aW9uVHRsXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0UmV0YWluLlJlc3BvbnNlPjtcbiAgZGljdGlvbmFyeVNldEZpZWxkKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBzdHJpbmcsXG4gICAgZmllbGQ6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdmFsdWU6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdHRsPzogQ29sbGVjdGlvblR0bFxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeVNldEZpZWxkLlJlc3BvbnNlPjtcbiAgZGljdGlvbmFyeVNldEZpZWxkcyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBkaWN0aW9uYXJ5TmFtZTogc3RyaW5nLFxuICAgIGVsZW1lbnRzOlxuICAgICAgfCBNYXA8c3RyaW5nIHwgVWludDhBcnJheSwgc3RyaW5nIHwgVWludDhBcnJheT5cbiAgICAgIHwgUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgVWludDhBcnJheT5cbiAgICAgIHwgQXJyYXk8W3N0cmluZywgc3RyaW5nIHwgVWludDhBcnJheV0+LFxuICAgIHR0bD86IENvbGxlY3Rpb25UdGxcbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlTZXRGaWVsZHMuUmVzcG9uc2U+O1xuICBkaWN0aW9uYXJ5R2V0RmllbGQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IHN0cmluZyxcbiAgICBmaWVsZDogc3RyaW5nIHwgVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeUdldEZpZWxkLlJlc3BvbnNlPjtcbiAgZGljdGlvbmFyeUdldEZpZWxkcyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBkaWN0aW9uYXJ5TmFtZTogc3RyaW5nLFxuICAgIGZpZWxkczogc3RyaW5nW10gfCBVaW50OEFycmF5W11cbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlHZXRGaWVsZHMuUmVzcG9uc2U+O1xuICBkaWN0aW9uYXJ5RmV0Y2goXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IHN0cmluZ1xuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeUZldGNoLlJlc3BvbnNlPjtcbiAgZGljdGlvbmFyeUluY3JlbWVudChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBkaWN0aW9uYXJ5TmFtZTogc3RyaW5nLFxuICAgIGZpZWxkOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIGFtb3VudD86IG51bWJlcixcbiAgICB0dGw/OiBDb2xsZWN0aW9uVHRsXG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5SW5jcmVtZW50LlJlc3BvbnNlPjtcbiAgZGljdGlvbmFyeVJlbW92ZUZpZWxkKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBzdHJpbmcsXG4gICAgZmllbGQ6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlSZW1vdmVGaWVsZC5SZXNwb25zZT47XG4gIGRpY3Rpb25hcnlSZW1vdmVGaWVsZHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IHN0cmluZyxcbiAgICBmaWVsZHM6IHN0cmluZ1tdIHwgVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5UmVtb3ZlRmllbGRzLlJlc3BvbnNlPjtcbiAgZGljdGlvbmFyeUxlbmd0aChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBkaWN0aW9uYXJ5TmFtZTogc3RyaW5nXG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5TGVuZ3RoLlJlc3BvbnNlPjtcbiAgc29ydGVkU2V0RmV0Y2hCeVJhbmsoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogc3RyaW5nLFxuICAgIG9yZGVyPzogU29ydGVkU2V0T3JkZXIsXG4gICAgc3RhcnRSYW5rPzogbnVtYmVyLFxuICAgIGVuZFJhbms/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldEZldGNoLlJlc3BvbnNlPjtcbiAgc29ydGVkU2V0RmV0Y2hCeVNjb3JlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZyxcbiAgICBvcmRlcj86IFNvcnRlZFNldE9yZGVyLFxuICAgIG1pblNjb3JlPzogbnVtYmVyLFxuICAgIG1heFNjb3JlPzogbnVtYmVyLFxuICAgIG9mZnNldD86IG51bWJlcixcbiAgICBjb3VudD86IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0RmV0Y2guUmVzcG9uc2U+O1xuICBzb3J0ZWRTZXRQdXRFbGVtZW50KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICBzY29yZTogbnVtYmVyLFxuICAgIHR0bD86IENvbGxlY3Rpb25UdGxcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldFB1dEVsZW1lbnQuUmVzcG9uc2U+O1xuICBzb3J0ZWRTZXRQdXRFbGVtZW50cyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBzdHJpbmcsXG4gICAgZWxlbWVudHM6XG4gICAgICB8IE1hcDxzdHJpbmcgfCBVaW50OEFycmF5LCBudW1iZXI+XG4gICAgICB8IFJlY29yZDxzdHJpbmcsIG51bWJlcj5cbiAgICAgIHwgQXJyYXk8W3N0cmluZywgbnVtYmVyXT4sXG4gICAgdHRsPzogQ29sbGVjdGlvblR0bFxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0UHV0RWxlbWVudHMuUmVzcG9uc2U+O1xuICBzb3J0ZWRTZXRHZXRSYW5rKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICBvcmRlcj86IFNvcnRlZFNldE9yZGVyXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRHZXRSYW5rLlJlc3BvbnNlPjtcbiAgc29ydGVkU2V0R2V0U2NvcmUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRHZXRTY29yZS5SZXNwb25zZT47XG4gIHNvcnRlZFNldEdldFNjb3JlcyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBzdHJpbmcsXG4gICAgdmFsdWVzOiBzdHJpbmdbXSB8IFVpbnQ4QXJyYXlbXVxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0R2V0U2NvcmVzLlJlc3BvbnNlPjtcbiAgc29ydGVkU2V0SW5jcmVtZW50U2NvcmUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIGFtb3VudD86IG51bWJlcixcbiAgICB0dGw/OiBDb2xsZWN0aW9uVHRsXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRJbmNyZW1lbnRTY29yZS5SZXNwb25zZT47XG4gIHNvcnRlZFNldFJlbW92ZUVsZW1lbnQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRSZW1vdmVFbGVtZW50LlJlc3BvbnNlPjtcbiAgc29ydGVkU2V0UmVtb3ZlRWxlbWVudHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlczogc3RyaW5nW10gfCBVaW50OEFycmF5W11cbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldFJlbW92ZUVsZW1lbnRzLlJlc3BvbnNlPjtcbiAgc29ydGVkU2V0TGVuZ3RoKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZ1xuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0TGVuZ3RoLlJlc3BvbnNlPjtcbiAgc29ydGVkU2V0TGVuZ3RoQnlTY29yZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBzdHJpbmcsXG4gICAgbWluU2NvcmU/OiBudW1iZXIsXG4gICAgbWF4U2NvcmU/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldExlbmd0aEJ5U2NvcmUuUmVzcG9uc2U+O1xuICBpdGVtR2V0VHlwZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZUl0ZW1HZXRUeXBlLlJlc3BvbnNlPjtcbiAgaXRlbUdldFR0bChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZUl0ZW1HZXRUdGwuUmVzcG9uc2U+O1xuICBrZXlFeGlzdHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcgfCBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVLZXlFeGlzdHMuUmVzcG9uc2U+O1xuICBrZXlzRXhpc3QoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5czogc3RyaW5nW10gfCBVaW50OEFycmF5W11cbiAgKTogUHJvbWlzZTxDYWNoZUtleXNFeGlzdC5SZXNwb25zZT47XG4gIHVwZGF0ZVR0bChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdHRsTWlsbGlzZWNvbmRzOiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVVwZGF0ZVR0bC5SZXNwb25zZT47XG4gIGluY3JlYXNlVHRsKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB0dGxNaWxsaXNlY29uZHM6IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlSW5jcmVhc2VUdGwuUmVzcG9uc2U+O1xuICBkZWNyZWFzZVR0bChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdHRsTWlsbGlzZWNvbmRzOiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZURlY3JlYXNlVHRsLlJlc3BvbnNlPjtcbiAgY2xvc2UoKTogdm9pZDtcbn1cbiJdfQ==

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/IPingClient.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSVBpbmdDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvY2xpZW50cy9jYWNoZS9JUGluZ0NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBJUGluZ0NsaWVudCB7XG4gIHBpbmcoKTogUHJvbWlzZTx2b2lkPjtcbn1cbiJdfQ==

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/index.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/AbstractCacheClient.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/clients/ICacheClient.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/IControlClient.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/IDataClient.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/IPingClient.js [app-route] (ecmascript)"), exports); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvY2xpZW50cy9jYWNoZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0RBQXNDO0FBQ3RDLGdFQUE4QztBQUM5QyxtREFBaUM7QUFDakMsZ0RBQThCO0FBQzlCLGdEQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vQWJzdHJhY3RDYWNoZUNsaWVudCc7XG5leHBvcnQgKiBmcm9tICcuLi8uLi8uLi9jbGllbnRzL0lDYWNoZUNsaWVudCc7XG5leHBvcnQgKiBmcm9tICcuL0lDb250cm9sQ2xpZW50JztcbmV4cG9ydCAqIGZyb20gJy4vSURhdGFDbGllbnQnO1xuZXhwb3J0ICogZnJvbSAnLi9JUGluZ0NsaWVudCc7XG4iXX0=

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/auth/AbstractAuthClient.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AbstractAuthClient = void 0;
class AbstractAuthClient {
    constructor(props){
        this.authClient = props.createAuthClient();
    }
    /**
     * Generates a new API key, along with a refresh token to refresh the API key before expiry.
     *
     * @param {PermissionScope} scope - controls the permissions that the new key will have
     * @param {string} expiresIn - How long the API key should be valid for in epoch timestamp.
     * @returns {Promise<GenerateApiKey.Response>} -
     * {@link GenerateApiKey.Success} containing the API key, refresh token, origin and epoch timestamp when token expires.
     * If the API key never expires, then no refresh token will be returned and expires at timestamp will be infinite.
     * {@link GenerateApiKey.Error} on failure.
     */ async generateApiKey(scope, expiresIn) {
        return await this.authClient.generateApiKey(scope, expiresIn);
    }
    /**
     * @deprecated please use `generateApiKey` instead
     */ async generateAuthToken(scope, expiresIn) {
        return await this.generateApiKey(scope, expiresIn);
    }
    /**
     * Refreshes an API key.  Returns a new API key and refresh token, that will be able to be refreshed again in the future.
     * The new API key will be valid for the same length of time as the original key, starting from the time of refresh.
     * The original api key will still work until its expired.
     *
     * @param {string} refreshToken - Refresh token used to refresh the API key.
     * @returns {Promise<RefreshApiKey.Response>} -
     * {@link RefreshApiKey.Success} containing the new API key, refresh token, origin and epoch timestamp when the API key expires.
     * {@link RefreshApiKey.Error} on failure.
     */ async refreshApiKey(refreshToken) {
        return await this.authClient.refreshApiKey(refreshToken);
    }
    /**
     * @deprecated please use `refreshApiKey` instead
     */ async refreshAuthToken(refreshToken) {
        return await this.refreshApiKey(refreshToken);
    }
    /**
     * Generates a new disposable, fine-grained access token.
     *
     * @param {DisposableTokenScope} scope - controls the permissions that the new token will have
     * @param {string} expiresIn - How long the token is valid for in epoch timestamp.
     * @param {DisposableTokenProps} disposableTokenProps - Additional properties for the API
     * @returns {Promise<GenerateDisposableToken.Response>} -
     * {@link GenerateDisposableToken.Success} containing the api token, origin and epoch timestamp when token expires.
     * {@link GenerateDisposableToken.Error} on failure.
     */ async generateDisposableToken(scope, expiresIn, disposableTokenProps) {
        return await this.authClient.generateDisposableToken(scope, expiresIn, disposableTokenProps);
    }
}
exports.AbstractAuthClient = AbstractAuthClient; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RBdXRoQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL2NsaWVudHMvYXV0aC9BYnN0cmFjdEF1dGhDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBY0EsTUFBc0Isa0JBQWtCO0lBSXRDLFlBQXNCLEtBQTBCO1FBQzlDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDN0MsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNJLEtBQUssQ0FBQyxjQUFjLENBQ3pCLEtBQXNCLEVBQ3RCLFNBQW9CO1FBRXBCLE9BQU8sTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLGlCQUFpQixDQUM1QixLQUFzQixFQUN0QixTQUFvQjtRQUVwQixPQUFPLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNJLEtBQUssQ0FBQyxhQUFhLENBQ3hCLFlBQW9CO1FBRXBCLE9BQU8sTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxLQUFLLENBQUMsZ0JBQWdCLENBQzNCLFlBQW9CO1FBRXBCLE9BQU8sTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7Ozs7Ozs7O09BU0c7SUFDSSxLQUFLLENBQUMsdUJBQXVCLENBQ2xDLEtBQTJCLEVBQzNCLFNBQW9CLEVBQ3BCLG9CQUEyQztRQUUzQyxPQUFPLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FDbEQsS0FBSyxFQUNMLFNBQVMsRUFDVCxvQkFBb0IsQ0FDckIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQWpGRCxnREFpRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBHZW5lcmF0ZUFwaUtleSxcbiAgRXhwaXJlc0luLFxuICBSZWZyZXNoQXBpS2V5LFxuICBHZW5lcmF0ZURpc3Bvc2FibGVUb2tlbixcbiAgRGlzcG9zYWJsZVRva2VuU2NvcGUsXG59IGZyb20gJy4uLy4uLy4uL2luZGV4JztcbmltcG9ydCB7SUF1dGhDbGllbnR9IGZyb20gJy4uLy4uLy4uL2NsaWVudHMvSUF1dGhDbGllbnQnO1xuaW1wb3J0IHtQZXJtaXNzaW9uU2NvcGV9IGZyb20gJy4uLy4uLy4uL2F1dGgvdG9rZW5zL3Blcm1pc3Npb24tc2NvcGUnO1xuaW1wb3J0IHtEaXNwb3NhYmxlVG9rZW5Qcm9wc30gZnJvbSAnLi4vLi4vLi4vYXV0aC90b2tlbnMvZGlzcG9zYWJsZS10b2tlbi1zY29wZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUF1dGhDbGllbnRQcm9wcyB7XG4gIGNyZWF0ZUF1dGhDbGllbnQ6ICgpID0+IElBdXRoQ2xpZW50O1xufVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0QXV0aENsaWVudCBpbXBsZW1lbnRzIElBdXRoQ2xpZW50IHtcbiAgLy8gbWFraW5nIHRoZXNlIHByb3RlY3RlZCB1bnRpbCB3ZSBmdWxseSBhYnN0cmFjdCBhd2F5IHRoZSBub2RlanMgY2xpZW50XG4gIHByb3RlY3RlZCByZWFkb25seSBhdXRoQ2xpZW50OiBJQXV0aENsaWVudDtcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJvcHM6IEJhc2VBdXRoQ2xpZW50UHJvcHMpIHtcbiAgICB0aGlzLmF1dGhDbGllbnQgPSBwcm9wcy5jcmVhdGVBdXRoQ2xpZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgbmV3IEFQSSBrZXksIGFsb25nIHdpdGggYSByZWZyZXNoIHRva2VuIHRvIHJlZnJlc2ggdGhlIEFQSSBrZXkgYmVmb3JlIGV4cGlyeS5cbiAgICpcbiAgICogQHBhcmFtIHtQZXJtaXNzaW9uU2NvcGV9IHNjb3BlIC0gY29udHJvbHMgdGhlIHBlcm1pc3Npb25zIHRoYXQgdGhlIG5ldyBrZXkgd2lsbCBoYXZlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHBpcmVzSW4gLSBIb3cgbG9uZyB0aGUgQVBJIGtleSBzaG91bGQgYmUgdmFsaWQgZm9yIGluIGVwb2NoIHRpbWVzdGFtcC5cbiAgICogQHJldHVybnMge1Byb21pc2U8R2VuZXJhdGVBcGlLZXkuUmVzcG9uc2U+fSAtXG4gICAqIHtAbGluayBHZW5lcmF0ZUFwaUtleS5TdWNjZXNzfSBjb250YWluaW5nIHRoZSBBUEkga2V5LCByZWZyZXNoIHRva2VuLCBvcmlnaW4gYW5kIGVwb2NoIHRpbWVzdGFtcCB3aGVuIHRva2VuIGV4cGlyZXMuXG4gICAqIElmIHRoZSBBUEkga2V5IG5ldmVyIGV4cGlyZXMsIHRoZW4gbm8gcmVmcmVzaCB0b2tlbiB3aWxsIGJlIHJldHVybmVkIGFuZCBleHBpcmVzIGF0IHRpbWVzdGFtcCB3aWxsIGJlIGluZmluaXRlLlxuICAgKiB7QGxpbmsgR2VuZXJhdGVBcGlLZXkuRXJyb3J9IG9uIGZhaWx1cmUuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2VuZXJhdGVBcGlLZXkoXG4gICAgc2NvcGU6IFBlcm1pc3Npb25TY29wZSxcbiAgICBleHBpcmVzSW46IEV4cGlyZXNJblxuICApOiBQcm9taXNlPEdlbmVyYXRlQXBpS2V5LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYXV0aENsaWVudC5nZW5lcmF0ZUFwaUtleShzY29wZSwgZXhwaXJlc0luKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBwbGVhc2UgdXNlIGBnZW5lcmF0ZUFwaUtleWAgaW5zdGVhZFxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdlbmVyYXRlQXV0aFRva2VuKFxuICAgIHNjb3BlOiBQZXJtaXNzaW9uU2NvcGUsXG4gICAgZXhwaXJlc0luOiBFeHBpcmVzSW5cbiAgKTogUHJvbWlzZTxHZW5lcmF0ZUFwaUtleS5SZXNwb25zZT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmdlbmVyYXRlQXBpS2V5KHNjb3BlLCBleHBpcmVzSW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZnJlc2hlcyBhbiBBUEkga2V5LiAgUmV0dXJucyBhIG5ldyBBUEkga2V5IGFuZCByZWZyZXNoIHRva2VuLCB0aGF0IHdpbGwgYmUgYWJsZSB0byBiZSByZWZyZXNoZWQgYWdhaW4gaW4gdGhlIGZ1dHVyZS5cbiAgICogVGhlIG5ldyBBUEkga2V5IHdpbGwgYmUgdmFsaWQgZm9yIHRoZSBzYW1lIGxlbmd0aCBvZiB0aW1lIGFzIHRoZSBvcmlnaW5hbCBrZXksIHN0YXJ0aW5nIGZyb20gdGhlIHRpbWUgb2YgcmVmcmVzaC5cbiAgICogVGhlIG9yaWdpbmFsIGFwaSBrZXkgd2lsbCBzdGlsbCB3b3JrIHVudGlsIGl0cyBleHBpcmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmcmVzaFRva2VuIC0gUmVmcmVzaCB0b2tlbiB1c2VkIHRvIHJlZnJlc2ggdGhlIEFQSSBrZXkuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlZnJlc2hBcGlLZXkuUmVzcG9uc2U+fSAtXG4gICAqIHtAbGluayBSZWZyZXNoQXBpS2V5LlN1Y2Nlc3N9IGNvbnRhaW5pbmcgdGhlIG5ldyBBUEkga2V5LCByZWZyZXNoIHRva2VuLCBvcmlnaW4gYW5kIGVwb2NoIHRpbWVzdGFtcCB3aGVuIHRoZSBBUEkga2V5IGV4cGlyZXMuXG4gICAqIHtAbGluayBSZWZyZXNoQXBpS2V5LkVycm9yfSBvbiBmYWlsdXJlLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIHJlZnJlc2hBcGlLZXkoXG4gICAgcmVmcmVzaFRva2VuOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxSZWZyZXNoQXBpS2V5LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYXV0aENsaWVudC5yZWZyZXNoQXBpS2V5KHJlZnJlc2hUb2tlbik7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgcGxlYXNlIHVzZSBgcmVmcmVzaEFwaUtleWAgaW5zdGVhZFxuICAgKi9cbiAgcHVibGljIGFzeW5jIHJlZnJlc2hBdXRoVG9rZW4oXG4gICAgcmVmcmVzaFRva2VuOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxSZWZyZXNoQXBpS2V5LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucmVmcmVzaEFwaUtleShyZWZyZXNoVG9rZW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIG5ldyBkaXNwb3NhYmxlLCBmaW5lLWdyYWluZWQgYWNjZXNzIHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0ge0Rpc3Bvc2FibGVUb2tlblNjb3BlfSBzY29wZSAtIGNvbnRyb2xzIHRoZSBwZXJtaXNzaW9ucyB0aGF0IHRoZSBuZXcgdG9rZW4gd2lsbCBoYXZlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHBpcmVzSW4gLSBIb3cgbG9uZyB0aGUgdG9rZW4gaXMgdmFsaWQgZm9yIGluIGVwb2NoIHRpbWVzdGFtcC5cbiAgICogQHBhcmFtIHtEaXNwb3NhYmxlVG9rZW5Qcm9wc30gZGlzcG9zYWJsZVRva2VuUHJvcHMgLSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgZm9yIHRoZSBBUElcbiAgICogQHJldHVybnMge1Byb21pc2U8R2VuZXJhdGVEaXNwb3NhYmxlVG9rZW4uUmVzcG9uc2U+fSAtXG4gICAqIHtAbGluayBHZW5lcmF0ZURpc3Bvc2FibGVUb2tlbi5TdWNjZXNzfSBjb250YWluaW5nIHRoZSBhcGkgdG9rZW4sIG9yaWdpbiBhbmQgZXBvY2ggdGltZXN0YW1wIHdoZW4gdG9rZW4gZXhwaXJlcy5cbiAgICoge0BsaW5rIEdlbmVyYXRlRGlzcG9zYWJsZVRva2VuLkVycm9yfSBvbiBmYWlsdXJlLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdlbmVyYXRlRGlzcG9zYWJsZVRva2VuKFxuICAgIHNjb3BlOiBEaXNwb3NhYmxlVG9rZW5TY29wZSxcbiAgICBleHBpcmVzSW46IEV4cGlyZXNJbixcbiAgICBkaXNwb3NhYmxlVG9rZW5Qcm9wcz86IERpc3Bvc2FibGVUb2tlblByb3BzXG4gICk6IFByb21pc2U8R2VuZXJhdGVEaXNwb3NhYmxlVG9rZW4uUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hdXRoQ2xpZW50LmdlbmVyYXRlRGlzcG9zYWJsZVRva2VuKFxuICAgICAgc2NvcGUsXG4gICAgICBleHBpcmVzSW4sXG4gICAgICBkaXNwb3NhYmxlVG9rZW5Qcm9wc1xuICAgICk7XG4gIH1cbn1cbiJdfQ==

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/auth/index.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/auth/AbstractAuthClient.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/clients/IAuthClient.js [app-route] (ecmascript)"), exports); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvY2xpZW50cy9hdXRoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1REFBcUM7QUFDckMsK0RBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9BYnN0cmFjdEF1dGhDbGllbnQnO1xuZXhwb3J0ICogZnJvbSAnLi4vLi4vLi4vY2xpZW50cy9JQXV0aENsaWVudCc7XG4iXX0=

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/pubsub/IPubsubClient.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSVB1YnN1YkNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9pbnRlcm5hbC9jbGllbnRzL3B1YnN1Yi9JUHVic3ViQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBUb3BpY1B1Ymxpc2gsXG4gIFRvcGljU3Vic2NyaWJlLFxuICBTdWJzY3JpYmVDYWxsT3B0aW9ucyxcbn0gZnJvbSAnLi4vLi4vLi4vaW5kZXgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElQdWJzdWJDbGllbnQge1xuICBwdWJsaXNoKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHRvcGljTmFtZTogc3RyaW5nLFxuICAgIHZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5XG4gICk6IFByb21pc2U8VG9waWNQdWJsaXNoLlJlc3BvbnNlPjtcbiAgc3Vic2NyaWJlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHRvcGljTmFtZTogc3RyaW5nLFxuICAgIG9wdGlvbnM6IFN1YnNjcmliZUNhbGxPcHRpb25zXG4gICk6IFByb21pc2U8VG9waWNTdWJzY3JpYmUuUmVzcG9uc2U+O1xufVxuIl19

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/pubsub/index.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/clients/ITopicClient.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/pubsub/IPubsubClient.js [app-route] (ecmascript)"), exports); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvY2xpZW50cy9wdWJzdWIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdFQUE4QztBQUM5QyxrREFBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi8uLi8uLi9jbGllbnRzL0lUb3BpY0NsaWVudCc7XG5leHBvcnQgKiBmcm9tICcuL0lQdWJzdWJDbGllbnQnO1xuIl19

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/leaderboard/AbstractLeaderboard.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AbstractLeaderboard = void 0;
class AbstractLeaderboard {
    constructor(cacheName, leaderboardName, dataClient){
        this.cacheName = cacheName;
        this.leaderboardName = leaderboardName;
        this.dataClient = dataClient;
    }
    /**
     * Updates elements in a leaderboard or inserts elements if they do not already exist.
     * The leaderboard is also created if it does not already exist.
     * Note: can upsert a maximum of 8192 elements at a time.
     *
     * @param {Map<number, number>} elements - The ID->score pairs to add to the leaderboard.
     * @returns {Promise<LeaderboardUpsert.Response>} -
     * {@link LeaderboardUpsert.Success} on success.
     * {@link LeaderboardUpsert.Error} on failure.
     */ async upsert(elements) {
        return await this.dataClient.upsert(this.cacheName, this.leaderboardName, elements);
    }
    /**
     * Fetch the elements in the given leaderboard by score.
     * Note: can fetch a maximum of 8192 elements at a time.
     *
     * @param {LeaderboardFetchByScoreCallOptions} options
     * @param {number} [options.minScore] - The minimum score (inclusive) of the
     * elements to fetch. Defaults to negative infinity.
     * @param {number} [options.maxScore] - The maximum score (exclusive) of the
     * elements to fetch. Defaults to positive infinity.
     * @param {LeaderboardOrder} [options.order] - The order to fetch the elements in.
     * Defaults to ascending, meaning 0 is the lowest-scoring rank.
     * @param {number} [options.offset] - The number of elements to skip before
     * returning the first element. Defaults to 0. Note: this is not the score of
     * the first element to return, but the number of elements of the result set
     * to skip before returning the first element.
     * @param {number} [options.count] - The maximum number of elements to return.
     * Defaults to 8192, which is the maximum that can be fetched at a time.
     * @returns {Promise<LeaderboardFetch.Response>} -
     * {@link LeaderboardFetch.Success} containing the requested elements.
     * {@link LeaderboardFetch.Error} on failure.
     */ async fetchByScore(options) {
        return await this.dataClient.fetchByScore(this.cacheName, this.leaderboardName, options === null || options === void 0 ? void 0 : options.minScore, options === null || options === void 0 ? void 0 : options.maxScore, options === null || options === void 0 ? void 0 : options.order, options === null || options === void 0 ? void 0 : options.offset, options === null || options === void 0 ? void 0 : options.count);
    }
    /**
     * Fetch the elements in the given leaderboard by index (rank).
     * Note: can fetch a maximum of 8192 elements at a time and rank
     * is 0-based (index begins at 0).
     *
     * @param {number} [startRank] - The rank of the first element to
     * fetch. This rank is inclusive, ie the element at this rank
     * will be fetched. Ranks can be used to manually paginate through the leaderboard
     * in batches of 8192 elements (e.g. request 0-8192, then 8192-16384, etc).
     * @param {number} [endRank] - The rank of the last element to fetch.
     * This rank is exclusive, ie the element at this rank will not be fetched.
     * Ranks can be used to manually paginate through the leaderboard
     * in batches of 8192 elements (e.g. request 0-8192, then 8192-16384, etc).
     * @param {LeaderboardFetchByRankOptions} options
     * @param {LeaderboardOrder} [options.order] - The order to fetch the elements in.
     * Defaults to ascending, meaning 0 is the lowest-scoring rank.
     * @returns {Promise<LeaderboardFetch.Response>} -
     * {@link LeaderboardFetch.Success} containing the requested elements.
     * {@link LeaderboardFetch.Error} on failure.
     */ async fetchByRank(startRank, endRank, options) {
        return await this.dataClient.fetchByRank(this.cacheName, this.leaderboardName, startRank, endRank, options === null || options === void 0 ? void 0 : options.order);
    }
    /**
     * Look up the rank of an element in the leaderboard given the element id.
     * Note: rank is 0-based (index begins at 0).
     *
     * @param {number} ids - The ids of the elements whose rank we are retrieving.
     * @param {LeaderboardGetRankCallOptions} options
     * @param {LeaderboardOrder} [options.order] - The order to fetch the elements in.
     * Defaults to ascending, meaning 0 is the lowest-scoring rank.
     * @returns {Promise<LeaderboardFetch.Response>}
     * {@link LeaderboardFetch.Success} containing the requested elements.
     * {@link LeaderboardFetch.Error} on failure.
     */ async getRank(ids, options) {
        return await this.dataClient.getRank(this.cacheName, this.leaderboardName, ids, options === null || options === void 0 ? void 0 : options.order);
    }
    /**
     * Fetch length (number of items) of leaderboard
     *
     * @returns {Promise<LeaderboardLength.Response>}
     * {@link LeaderboardLength.Success} containing the length if the leaderboard exists.
     * {@link LeaderboardLength.Error} on failure.
     */ async length() {
        return await this.dataClient.length(this.cacheName, this.leaderboardName);
    }
    /**
     * Remove multiple elements from the given leaderboard
     * Note: can remove a maximum of 8192 elements at a time.
     *
     * @param {Array<number>} ids - The IDs of the elements to remove from the leaderboard.
     * @returns {Promise<LeaderboardRemoveElements.Response>}
     * {@link LeaderboardRemoveElements.Success} if the elements were successfully removed.
     * {@link LeaderboardRemoveElements.Error} on failure.
     */ async removeElements(ids) {
        return await this.dataClient.removeElements(this.cacheName, this.leaderboardName, ids);
    }
    /**
     * Delete the given leaderboard
     *
     * @returns {Promise<LeaderboardDelete.Response>}
     * {@link LeaderboardDelete.Success} on success.
     * {@link LeaderboardDelete.Error} on failure.
     */ async delete() {
        return await this.dataClient.delete(this.cacheName, this.leaderboardName);
    }
}
exports.AbstractLeaderboard = AbstractLeaderboard; //# sourceMappingURL=data:application/json;base64,

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/leaderboard/index.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/clients/ILeaderboard.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/clients/ILeaderboardClient.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/leaderboard/AbstractLeaderboard.js [app-route] (ecmascript)"), exports); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvY2xpZW50cy9sZWFkZXJib2FyZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0VBQThDO0FBQzlDLHNFQUFvRDtBQUNwRCx3REFBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi8uLi8uLi9jbGllbnRzL0lMZWFkZXJib2FyZCc7XG5leHBvcnQgKiBmcm9tICcuLi8uLi8uLi9jbGllbnRzL0lMZWFkZXJib2FyZENsaWVudCc7XG5leHBvcnQgKiBmcm9tICcuL0Fic3RyYWN0TGVhZGVyYm9hcmQnO1xuIl19

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/storage/AbstractStorageClient.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AbstractStorageClient = void 0;
class AbstractStorageClient {
    constructor(dataClients, controlClient){
        this.dataClients = dataClients;
        this.controlClient = controlClient;
        // We round-robin the requests through all of our clients.  Since javascript
        // is single-threaded, we don't have to worry about thread safety on this
        // index variable.
        this.nextDataClientIndex = 0;
    }
    createStore(storeName) {
        return this.controlClient.createStore(storeName);
    }
    listStores() {
        return this.controlClient.listStores();
    }
    deleteStore(storeName) {
        return this.controlClient.deleteStore(storeName);
    }
    get(storeName, key) {
        return this.getNextDataClient().get(storeName, key);
    }
    putInt(storeName, key, value) {
        return this.getNextDataClient().putInt(storeName, key, value);
    }
    putDouble(storeName, key, value) {
        return this.getNextDataClient().putDouble(storeName, key, value);
    }
    putString(storeName, key, value) {
        return this.getNextDataClient().putString(storeName, key, value);
    }
    putBytes(storeName, key, value) {
        return this.getNextDataClient().putBytes(storeName, key, value);
    }
    delete(storeName, key) {
        return this.getNextDataClient().delete(storeName, key);
    }
    getNextDataClient() {
        const client = this.dataClients[this.nextDataClientIndex];
        this.nextDataClientIndex = (this.nextDataClientIndex + 1) % this.dataClients.length;
        return client;
    }
}
exports.AbstractStorageClient = AbstractStorageClient; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RTdG9yYWdlQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL2NsaWVudHMvc3RvcmFnZS9BYnN0cmFjdFN0b3JhZ2VDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBWUEsTUFBc0IscUJBQXFCO0lBS3pDLFlBQ0UsV0FBaUMsRUFDakMsYUFBb0M7UUFFcEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFFbkMsNEVBQTRFO1FBQzVFLHlFQUF5RTtRQUN6RSxrQkFBa0I7UUFDbEIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsV0FBVyxDQUFDLFNBQWlCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELFVBQVU7UUFDUixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVELFdBQVcsQ0FBQyxTQUFpQjtRQUMzQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxHQUFHLENBQUMsU0FBaUIsRUFBRSxHQUFXO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsTUFBTSxDQUNKLFNBQWlCLEVBQ2pCLEdBQVcsRUFDWCxLQUFhO1FBRWIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsU0FBUyxDQUNQLFNBQWlCLEVBQ2pCLEdBQVcsRUFDWCxLQUFhO1FBRWIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsU0FBUyxDQUNQLFNBQWlCLEVBQ2pCLEdBQVcsRUFDWCxLQUFhO1FBRWIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsUUFBUSxDQUNOLFNBQWlCLEVBQ2pCLEdBQVcsRUFDWCxLQUFpQjtRQUVqQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBaUIsRUFBRSxHQUFXO1FBQ25DLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLG1CQUFtQjtZQUN0QixDQUFDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUMzRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBR0Y7QUE5RUQsc0RBOEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ3JlYXRlU3RvcmUsXG4gIERlbGV0ZVN0b3JlLFxuICBMaXN0U3RvcmVzLFxuICBTdG9yYWdlR2V0LFxuICBTdG9yYWdlUHV0LFxuICBTdG9yYWdlRGVsZXRlLFxufSBmcm9tICcuLi8uLi8uLi9pbmRleCc7XG5pbXBvcnQge0lTdG9yYWdlRGF0YUNsaWVudH0gZnJvbSAnLi9JU3RvcmFnZURhdGFDbGllbnQnO1xuaW1wb3J0IHtJU3RvcmFnZUNsaWVudH0gZnJvbSAnLi4vLi4vLi4vY2xpZW50cy9JU3RvcmFnZUNsaWVudCc7XG5pbXBvcnQge0lTdG9yYWdlQ29udHJvbENsaWVudH0gZnJvbSAnLi9JU3RvcmFnZUNvbnRyb2xDbGllbnQnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RTdG9yYWdlQ2xpZW50IGltcGxlbWVudHMgSVN0b3JhZ2VDbGllbnQge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGF0YUNsaWVudHM6IElTdG9yYWdlRGF0YUNsaWVudFtdO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgY29udHJvbENsaWVudDogSVN0b3JhZ2VDb250cm9sQ2xpZW50O1xuICBwcml2YXRlIG5leHREYXRhQ2xpZW50SW5kZXg6IG51bWJlcjtcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoXG4gICAgZGF0YUNsaWVudHM6IElTdG9yYWdlRGF0YUNsaWVudFtdLFxuICAgIGNvbnRyb2xDbGllbnQ6IElTdG9yYWdlQ29udHJvbENsaWVudFxuICApIHtcbiAgICB0aGlzLmRhdGFDbGllbnRzID0gZGF0YUNsaWVudHM7XG4gICAgdGhpcy5jb250cm9sQ2xpZW50ID0gY29udHJvbENsaWVudDtcblxuICAgIC8vIFdlIHJvdW5kLXJvYmluIHRoZSByZXF1ZXN0cyB0aHJvdWdoIGFsbCBvZiBvdXIgY2xpZW50cy4gIFNpbmNlIGphdmFzY3JpcHRcbiAgICAvLyBpcyBzaW5nbGUtdGhyZWFkZWQsIHdlIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgdGhyZWFkIHNhZmV0eSBvbiB0aGlzXG4gICAgLy8gaW5kZXggdmFyaWFibGUuXG4gICAgdGhpcy5uZXh0RGF0YUNsaWVudEluZGV4ID0gMDtcbiAgfVxuXG4gIGNyZWF0ZVN0b3JlKHN0b3JlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxDcmVhdGVTdG9yZS5SZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xDbGllbnQuY3JlYXRlU3RvcmUoc3RvcmVOYW1lKTtcbiAgfVxuXG4gIGxpc3RTdG9yZXMoKTogUHJvbWlzZTxMaXN0U3RvcmVzLlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbENsaWVudC5saXN0U3RvcmVzKCk7XG4gIH1cblxuICBkZWxldGVTdG9yZShzdG9yZU5hbWU6IHN0cmluZyk6IFByb21pc2U8RGVsZXRlU3RvcmUuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sQ2xpZW50LmRlbGV0ZVN0b3JlKHN0b3JlTmFtZSk7XG4gIH1cblxuICBnZXQoc3RvcmVOYW1lOiBzdHJpbmcsIGtleTogc3RyaW5nKTogUHJvbWlzZTxTdG9yYWdlR2V0LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TmV4dERhdGFDbGllbnQoKS5nZXQoc3RvcmVOYW1lLCBrZXkpO1xuICB9XG5cbiAgcHV0SW50KFxuICAgIHN0b3JlTmFtZTogc3RyaW5nLFxuICAgIGtleTogc3RyaW5nLFxuICAgIHZhbHVlOiBudW1iZXJcbiAgKTogUHJvbWlzZTxTdG9yYWdlUHV0LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TmV4dERhdGFDbGllbnQoKS5wdXRJbnQoc3RvcmVOYW1lLCBrZXksIHZhbHVlKTtcbiAgfVxuXG4gIHB1dERvdWJsZShcbiAgICBzdG9yZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyxcbiAgICB2YWx1ZTogbnVtYmVyXG4gICk6IFByb21pc2U8U3RvcmFnZVB1dC5SZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLmdldE5leHREYXRhQ2xpZW50KCkucHV0RG91YmxlKHN0b3JlTmFtZSwga2V5LCB2YWx1ZSk7XG4gIH1cblxuICBwdXRTdHJpbmcoXG4gICAgc3RvcmVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdmFsdWU6IHN0cmluZ1xuICApOiBQcm9taXNlPFN0b3JhZ2VQdXQuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5nZXROZXh0RGF0YUNsaWVudCgpLnB1dFN0cmluZyhzdG9yZU5hbWUsIGtleSwgdmFsdWUpO1xuICB9XG5cbiAgcHV0Qnl0ZXMoXG4gICAgc3RvcmVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdmFsdWU6IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxTdG9yYWdlUHV0LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TmV4dERhdGFDbGllbnQoKS5wdXRCeXRlcyhzdG9yZU5hbWUsIGtleSwgdmFsdWUpO1xuICB9XG5cbiAgZGVsZXRlKHN0b3JlTmFtZTogc3RyaW5nLCBrZXk6IHN0cmluZyk6IFByb21pc2U8U3RvcmFnZURlbGV0ZS5SZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLmdldE5leHREYXRhQ2xpZW50KCkuZGVsZXRlKHN0b3JlTmFtZSwga2V5KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TmV4dERhdGFDbGllbnQoKTogSVN0b3JhZ2VEYXRhQ2xpZW50IHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmRhdGFDbGllbnRzW3RoaXMubmV4dERhdGFDbGllbnRJbmRleF07XG4gICAgdGhpcy5uZXh0RGF0YUNsaWVudEluZGV4ID1cbiAgICAgICh0aGlzLm5leHREYXRhQ2xpZW50SW5kZXggKyAxKSAlIHRoaXMuZGF0YUNsaWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBjbGllbnQ7XG4gIH1cblxuICBhYnN0cmFjdCBjbG9zZSgpOiB2b2lkO1xufVxuIl19

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/storage/IStorageControlClient.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSVN0b3JhZ2VDb250cm9sQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL2NsaWVudHMvc3RvcmFnZS9JU3RvcmFnZUNvbnRyb2xDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q3JlYXRlU3RvcmUsIERlbGV0ZVN0b3JlLCBMaXN0U3RvcmVzfSBmcm9tICcuLi8uLi8uLi9pbmRleCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN0b3JhZ2VDb250cm9sQ2xpZW50IHtcbiAgY3JlYXRlU3RvcmUoc3RvcmVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPENyZWF0ZVN0b3JlLlJlc3BvbnNlPjtcbiAgZGVsZXRlU3RvcmUoc3RvcmVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPERlbGV0ZVN0b3JlLlJlc3BvbnNlPjtcbiAgbGlzdFN0b3JlcygpOiBQcm9taXNlPExpc3RTdG9yZXMuUmVzcG9uc2U+O1xuICBjbG9zZSgpOiB2b2lkO1xufVxuIl19

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/storage/IStorageDataClient.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSVN0b3JhZ2VEYXRhQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL2NsaWVudHMvc3RvcmFnZS9JU3RvcmFnZURhdGFDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RvcmFnZUdldCwgU3RvcmFnZVB1dCwgU3RvcmFnZURlbGV0ZX0gZnJvbSAnLi4vLi4vLi4vaW5kZXgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTdG9yYWdlRGF0YUNsaWVudCB7XG4gIGdldChzdG9yZU5hbWU6IHN0cmluZywga2V5OiBzdHJpbmcpOiBQcm9taXNlPFN0b3JhZ2VHZXQuUmVzcG9uc2U+O1xuICBwdXRJbnQoXG4gICAgc3RvcmVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdmFsdWU6IG51bWJlclxuICApOiBQcm9taXNlPFN0b3JhZ2VQdXQuUmVzcG9uc2U+O1xuICBwdXREb3VibGUoXG4gICAgc3RvcmVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdmFsdWU6IG51bWJlclxuICApOiBQcm9taXNlPFN0b3JhZ2VQdXQuUmVzcG9uc2U+O1xuICBwdXRTdHJpbmcoXG4gICAgc3RvcmVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdmFsdWU6IHN0cmluZ1xuICApOiBQcm9taXNlPFN0b3JhZ2VQdXQuUmVzcG9uc2U+O1xuICBwdXRCeXRlcyhcbiAgICBzdG9yZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyxcbiAgICB2YWx1ZTogVWludDhBcnJheVxuICApOiBQcm9taXNlPFN0b3JhZ2VQdXQuUmVzcG9uc2U+O1xuICBkZWxldGUoc3RvcmVOYW1lOiBzdHJpbmcsIGtleTogc3RyaW5nKTogUHJvbWlzZTxTdG9yYWdlRGVsZXRlLlJlc3BvbnNlPjtcbiAgY2xvc2UoKTogdm9pZDtcbn1cbiJdfQ==

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/storage/index.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/storage/AbstractStorageClient.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/storage/IStorageControlClient.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/storage/IStorageDataClient.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/clients/IStorageClient.js [app-route] (ecmascript)"), exports); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvY2xpZW50cy9zdG9yYWdlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwwREFBd0M7QUFDeEMsMERBQXdDO0FBQ3hDLHVEQUFxQztBQUNyQyxrRUFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL0Fic3RyYWN0U3RvcmFnZUNsaWVudCc7XG5leHBvcnQgKiBmcm9tICcuL0lTdG9yYWdlQ29udHJvbENsaWVudCc7XG5leHBvcnQgKiBmcm9tICcuL0lTdG9yYWdlRGF0YUNsaWVudCc7XG5leHBvcnQgKiBmcm9tICcuLi8uLi8uLi9jbGllbnRzL0lTdG9yYWdlQ2xpZW50JztcbiJdfQ==

}.call(this) }),
"[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/index.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/cache/index.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/auth/index.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/pubsub/index.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/leaderboard/index.js [app-route] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/@gomomento/sdk-core/dist/src/internal/clients/storage/index.js [app-route] (ecmascript)"), exports); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvY2xpZW50cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMENBQXdCO0FBQ3hCLHlDQUF1QjtBQUN2QiwyQ0FBeUI7QUFDekIsZ0RBQThCO0FBQzlCLDRDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vY2FjaGUnO1xuZXhwb3J0ICogZnJvbSAnLi9hdXRoJztcbmV4cG9ydCAqIGZyb20gJy4vcHVic3ViJztcbmV4cG9ydCAqIGZyb20gJy4vbGVhZGVyYm9hcmQnO1xuZXhwb3J0ICogZnJvbSAnLi9zdG9yYWdlJztcbiJdfQ==

}.call(this) }),

};

//# sourceMappingURL=node_modules_%40gomomento_sdk-core_dist_src_internal_e69e0e._.js.map